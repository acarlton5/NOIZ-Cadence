{
  "version": 3,
  "sources": ["../../property-graph/src/event-dispatcher.ts", "../../property-graph/src/graph-edge.ts", "../../property-graph/src/graph.ts", "../../property-graph/src/refs.ts", "../../property-graph/src/graph-node.ts", "../../@gltf-transform/core/src/constants.ts", "../../node_modules/gl-matrix/esm/common.js", "../../node_modules/gl-matrix/esm/vec3.js", "../../@gltf-transform/core/src/utils/get-bounds.ts", "../../@gltf-transform/core/src/utils/buffer-utils.ts", "../../@gltf-transform/core/src/utils/color-utils.ts", "../../@gltf-transform/core/src/utils/image-utils.ts", "../../@gltf-transform/core/src/utils/file-utils.ts", "../../@gltf-transform/core/src/utils/is-plain-object.ts", "../../@gltf-transform/core/src/utils/logger.ts", "../../node_modules/gl-matrix/esm/mat4.js", "../../@gltf-transform/core/src/utils/math-utils.ts", "../../@gltf-transform/core/src/utils/property-utils.ts", "../../@gltf-transform/core/src/utils/uuid.ts", "../../@gltf-transform/core/src/utils/http-utils.ts", "../../@gltf-transform/core/src/properties/property.ts", "../../@gltf-transform/core/src/properties/extensible-property.ts", "../../@gltf-transform/core/src/properties/accessor.ts", "../../@gltf-transform/core/src/properties/animation.ts", "../../@gltf-transform/core/src/properties/animation-channel.ts", "../../@gltf-transform/core/src/properties/animation-sampler.ts", "../../@gltf-transform/core/src/properties/buffer.ts", "../../@gltf-transform/core/src/properties/camera.ts", "../../@gltf-transform/core/src/properties/extension-property.ts", "../../@gltf-transform/core/src/properties/texture-info.ts", "../../@gltf-transform/core/src/properties/material.ts", "../../@gltf-transform/core/src/properties/mesh.ts", "../../@gltf-transform/core/src/properties/node.ts", "../../@gltf-transform/core/src/properties/primitive.ts", "../../@gltf-transform/core/src/properties/primitive-target.ts", "../../@gltf-transform/core/src/properties/scene.ts", "../../@gltf-transform/core/src/properties/skin.ts", "../../@gltf-transform/core/src/properties/texture.ts", "../../@gltf-transform/core/src/properties/root.ts", "../../@gltf-transform/core/src/document.ts", "../../@gltf-transform/core/src/extension.ts", "../../@gltf-transform/core/src/io/reader-context.ts", "../../@gltf-transform/core/src/io/reader.ts", "../../@gltf-transform/core/src/io/writer-context.ts", "../../@gltf-transform/core/src/io/writer.ts", "../../@gltf-transform/core/src/io/platform-io.ts", "../../@gltf-transform/core/src/io/node-io.ts", "../../@gltf-transform/core/src/io/deno-io.ts", "../../@gltf-transform/core/src/io/web-io.ts"],
  "sourcesContent": ["import type { Graph } from './graph.js';\nimport type { GraphNode } from './graph-node.js';\nimport type { GraphEdge } from './graph-edge.js';\n\nexport interface BaseEvent {\n\ttype: string;\n\t[attachment: string]: unknown;\n}\n\nexport interface GraphEvent extends BaseEvent {\n\ttarget: Graph<GraphNode>;\n}\n\nexport interface GraphNodeEvent extends BaseEvent {\n\ttarget: GraphNode;\n}\n\nexport interface GraphEdgeEvent extends BaseEvent {\n\ttarget: GraphEdge<GraphNode, GraphNode>;\n}\n\nexport type EventListener<E> = (event: E) => void;\n\nexport class EventDispatcher<T extends BaseEvent> {\n\tprivate _listeners = {} as Record<string, EventListener<T>[]>;\n\n\taddEventListener(type: string, listener: EventListener<T>): this {\n\t\tconst listeners = this._listeners;\n\n\t\tif (listeners[type] === undefined) {\n\t\t\tlisteners[type] = [] as EventListener<T>[];\n\t\t}\n\n\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\tlisteners[type].push(listener);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tremoveEventListener(type: string, listener: EventListener<T>): this {\n\t\tif (this._listeners === undefined) return this;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispatchEvent(event: T): this {\n\t\tif (this._listeners === undefined) return this;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[event.type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\tarray[i].call(this, event as T);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispose(): void {\n\t\tfor (const key in this._listeners) {\n\t\t\tdelete this._listeners[key];\n\t\t}\n\t}\n}\n", "import { EventDispatcher, GraphEdgeEvent } from './event-dispatcher.js';\nimport { GraphNode } from './graph-node.js';\n\n/**\n * Represents a connection between two {@link GraphNode} resources in a {@link Graph}.\n *\n * The left node is considered the owner, and the right node the resource. The\n * owner is responsible for being able find and remove a reference to a resource, given\n * that link. The resource does not hold a reference to the link or to the owner,\n * although that reverse lookup can be done on the graph.\n */\nexport class GraphEdge<Parent extends GraphNode, Child extends GraphNode> extends EventDispatcher<GraphEdgeEvent> {\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate readonly _parent: Parent,\n\t\tprivate _child: Child,\n\t\tprivate _attributes: Record<string, unknown> = {}\n\t) {\n\t\tsuper();\n\t\tif (!_parent.isOnGraph(_child)) {\n\t\t\tthrow new Error('Cannot connect disconnected graphs.');\n\t\t}\n\t}\n\n\t/** Name. */\n\tgetName(): string {\n\t\treturn this._name;\n\t}\n\n\t/** Owner node. */\n\tgetParent(): Parent {\n\t\treturn this._parent;\n\t}\n\n\t/** Resource node. */\n\tgetChild(): Child {\n\t\treturn this._child;\n\t}\n\n\t/**\n\t * Sets the child node.\n\t *\n\t * @internal Only {@link Graph} implementations may safely call this method directly. Use\n\t * \t{@link Property.swap} or {@link Graph.swapChild} instead.\n\t */\n\tsetChild(child: Child): this {\n\t\tthis._child = child;\n\t\treturn this;\n\t}\n\n\t/** Attributes of the graph node relationship. */\n\tgetAttributes(): Record<string, unknown> {\n\t\treturn this._attributes;\n\t}\n\n\t/** Destroys a (currently intact) edge, updating both the graph and the owner. */\n\tdispose(): void {\n\t\tif (this._disposed) return;\n\t\tthis._disposed = true;\n\t\tthis.dispatchEvent({ type: 'dispose', target: this });\n\t\tsuper.dispose();\n\t}\n\n\t/** Whether this link has been destroyed. */\n\tisDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n}\n", "import { EventDispatcher, GraphEdgeEvent, GraphEvent, GraphNodeEvent } from './event-dispatcher.js';\nimport { GraphEdge } from './graph-edge.js';\nimport { GraphNode } from './graph-node.js';\n\n/**\n * A graph manages a network of {@link GraphNode} nodes, connected\n * by {@link @Link} edges.\n */\nexport class Graph<T extends GraphNode> extends EventDispatcher<GraphEvent | GraphNodeEvent | GraphEdgeEvent> {\n\tprivate _emptySet: Set<GraphEdge<T, T>> = new Set();\n\n\tprivate _edges: Set<GraphEdge<T, T>> = new Set();\n\tprivate _parentEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\tprivate _childEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\n\t/** Returns a list of all parent->child edges on this graph. */\n\tpublic listEdges(): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._edges);\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their child. */\n\tpublic listParentEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._childEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of parent nodes for the given child node. */\n\tpublic listParents(node: T): T[] {\n\t\treturn this.listParentEdges(node).map((edge) => edge.getParent());\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their parent. */\n\tpublic listChildEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._parentEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of child nodes for the given parent node. */\n\tpublic listChildren(node: T): T[] {\n\t\treturn this.listChildEdges(node).map((edge) => edge.getChild());\n\t}\n\n\tpublic disconnectParents(node: T, filter?: (n: T) => boolean): this {\n\t\tlet edges = this.listParentEdges(node);\n\t\tif (filter) {\n\t\t\tedges = edges.filter((edge) => filter(edge.getParent()));\n\t\t}\n\t\tedges.forEach((edge) => edge.dispose());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link GraphEdge} connecting two {@link GraphNode} instances. Edge is returned\n\t * for the caller to store.\n\t * @param a Owner\n\t * @param b Resource\n\t */\n\tpublic createEdge<A extends T, B extends T>(\n\t\tname: string,\n\t\ta: A,\n\t\tb: B,\n\t\tattributes?: Record<string, unknown>\n\t): GraphEdge<A, B> {\n\t\treturn this._registerEdge(new GraphEdge(name, a, b, attributes)) as GraphEdge<A, B>;\n\t}\n\n\t/**********************************************************************************************\n\t * Internal.\n\t */\n\n\t/** @hidden */\n\tprivate _registerEdge(edge: GraphEdge<T, T>): GraphEdge<T, T> {\n\t\tthis._edges.add(edge);\n\n\t\tconst parent = edge.getParent();\n\t\tif (!this._parentEdges.has(parent)) this._parentEdges.set(parent, new Set());\n\t\tthis._parentEdges.get(parent)!.add(edge);\n\n\t\tconst child = edge.getChild();\n\t\tif (!this._childEdges.has(child)) this._childEdges.set(child, new Set());\n\t\tthis._childEdges.get(child)!.add(edge);\n\n\t\tedge.addEventListener('dispose', () => this._removeEdge(edge));\n\t\treturn edge;\n\t}\n\n\t/**\n\t * Removes the {@link GraphEdge} from the {@link Graph}. This method should only\n\t * be invoked by the onDispose() listener created in {@link _registerEdge()}. The\n\t * public method of removing an edge is {@link GraphEdge.dispose}.\n\t */\n\tprivate _removeEdge(edge: GraphEdge<T, T>): this {\n\t\tthis._edges.delete(edge);\n\t\tthis._parentEdges.get(edge.getParent())!.delete(edge);\n\t\tthis._childEdges.get(edge.getChild())!.delete(edge);\n\t\treturn this;\n\t}\n}\n", "import { GraphEdge } from './graph-edge.js';\nimport { GraphNode } from './graph-node.js';\n\nexport type Ref<T extends GraphNode = GraphNode> = GraphEdge<GraphNode, T>;\n\n/**\n * An ordered collection of {@link Ref Refs}, allowing duplicates. Removing\n * a Ref is an O(n) operation — use {@link RefSet} for faster removal, if\n * duplicates are not required.\n */\nexport class RefList<T extends GraphNode = GraphNode> {\n\tlist: Ref<T>[] = [];\n\tconstructor(refs?: Ref<T>[]) {\n\t\tif (refs) {\n\t\t\tfor (const ref of refs) {\n\t\t\t\tthis.list.push(ref);\n\t\t\t}\n\t\t}\n\t}\n\tadd(ref: Ref<T>): void {\n\t\tthis.list.push(ref);\n\t}\n\tremove(ref: Ref<T>): void {\n\t\tconst index = this.list.indexOf(ref);\n\t\tif (index >= 0) this.list.splice(index, 1);\n\t}\n\tremoveChild(child: T): Ref<T>[] {\n\t\tconst refs = [] as Ref<T>[];\n\t\tfor (const ref of this.list) {\n\t\t\tif (ref.getChild() === child) {\n\t\t\t\trefs.push(ref);\n\t\t\t}\n\t\t}\n\t\tfor (const ref of refs) {\n\t\t\tthis.remove(ref);\n\t\t}\n\t\treturn refs;\n\t}\n\tlistRefsByChild(child: T): Ref<T>[] {\n\t\tconst refs = [] as Ref<T>[];\n\t\tfor (const ref of this.list) {\n\t\t\tif (ref.getChild() === child) {\n\t\t\t\trefs.push(ref);\n\t\t\t}\n\t\t}\n\t\treturn refs;\n\t}\n\tvalues(): Ref<T>[] {\n\t\treturn this.list;\n\t}\n}\n\n/**\n * An ordered collection of {@link Ref Refs}, without duplicates. Adding or\n * removing a Ref is typically O(1) or O(log(n)), and faster than\n * {@link RefList}. If support for duplicates is required, use {@link RefList}.\n */\nexport class RefSet<T extends GraphNode = GraphNode> {\n\tset = new Set<Ref<T>>();\n\tmap = new Map<T, Ref<T>>();\n\tconstructor(refs?: Ref<T>[]) {\n\t\tif (refs) {\n\t\t\tfor (const ref of refs) {\n\t\t\t\tthis.add(ref);\n\t\t\t}\n\t\t}\n\t}\n\tadd(ref: Ref<T>): void {\n\t\tconst child = ref.getChild();\n\t\tthis.removeChild(child);\n\n\t\tthis.set.add(ref);\n\t\tthis.map.set(child, ref);\n\t}\n\tremove(ref: Ref<T>): void {\n\t\tthis.set.delete(ref);\n\t\tthis.map.delete(ref.getChild());\n\t}\n\tremoveChild(child: T): Ref<T> | null {\n\t\tconst ref = this.map.get(child) || null;\n\t\tif (ref) this.remove(ref);\n\t\treturn ref;\n\t}\n\tgetRefByChild(child: T): Ref<T> | null {\n\t\treturn this.map.get(child) || null;\n\t}\n\tvalues(): Ref<T>[] {\n\t\treturn Array.from(this.set);\n\t}\n}\n\n/**\n * Map (or dictionary) from string keys to {@link Ref Refs}.\n */\nexport class RefMap<T extends GraphNode = GraphNode> {\n\tmap: { [key: string]: Ref<T> } = {};\n\tconstructor(map?: Record<string, Ref<T>>) {\n\t\tif (map) {\n\t\t\tObject.assign(this.map, map);\n\t\t}\n\t}\n\tset(key: string, child: Ref<T>): void {\n\t\tthis.map[key] = child;\n\t}\n\tdelete(key: string): void {\n\t\tdelete this.map[key];\n\t}\n\tget(key: string): Ref<T> | null {\n\t\treturn this.map[key] || null;\n\t}\n\tkeys(): string[] {\n\t\treturn Object.keys(this.map);\n\t}\n\tvalues(): Ref<T>[] {\n\t\treturn Object.values(this.map);\n\t}\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport {\n\tLiteralKeys,\n\tNullable,\n\tRefCollectionValue,\n\tRefKeys,\n\tRefListKeys,\n\tRefMapKeys,\n\tRefMapValue,\n\tRefSetKeys,\n} from './constants.js';\nimport { BaseEvent, EventDispatcher, GraphNodeEvent } from './event-dispatcher.js';\nimport { Graph } from './graph.js';\nimport { GraphEdge } from './graph-edge.js';\nimport { Ref, RefList, RefMap, RefSet } from './refs.js';\n\n// References:\n// - https://stackoverflow.com/a/70163679/1314762\n// - https://stackoverflow.com/a/70201805/1314762\n\ntype GraphNodeAttributesInternal<Parent extends GraphNode, Attributes extends {}> = {\n\t[Key in keyof Attributes]: Attributes[Key] extends GraphNode\n\t\t? GraphEdge<Parent, Attributes[Key]>\n\t\t: Attributes[Key] extends GraphNode[]\n\t\t? GraphEdge<Parent, Attributes[Key][number]>[]\n\t\t: Attributes[Key] extends { [key: string]: GraphNode }\n\t\t? Record<string, GraphEdge<Parent, Attributes[Key][string]>>\n\t\t: Attributes[Key];\n};\n\nexport const $attributes = Symbol('attributes');\nexport const $immutableKeys = Symbol('immutableKeys');\n\n/**\n * Represents a node in a {@link Graph}.\n */\nexport abstract class GraphNode<Attributes extends {} = {}> extends EventDispatcher<GraphNodeEvent> {\n\tprivate _disposed = false;\n\n\t/**\n\t * Internal graph used to search and maintain references.\n\t * @hidden\n\t */\n\tprotected readonly graph: Graph<GraphNode>;\n\n\t/**\n\t * Attributes (literal values and GraphNode references) associated with this instance. For each\n\t * GraphNode reference, the attributes stores a {@link GraphEdge}. List and Map references are\n\t * stored as arrays and dictionaries of edges.\n\t * @internal\n\t */\n\tprotected readonly [$attributes]: GraphNodeAttributesInternal<this, Attributes>;\n\n\t/**\n\t * Attributes included with `getDefaultAttributes` are considered immutable, and cannot be\n\t * modifed by `.setRef()`, `.copy()`, or other GraphNode methods. Both the edges and the\n\t * properties will be disposed with the parent GraphNode.\n\t *\n\t * Currently, only single-edge references (getRef/setRef) are supported as immutables.\n\t *\n\t * @internal\n\t */\n\tprotected readonly [$immutableKeys]: Set<string>;\n\n\tconstructor(graph: Graph<GraphNode>) {\n\t\tsuper();\n\t\tthis.graph = graph;\n\t\tthis[$immutableKeys] = new Set();\n\t\tthis[$attributes] = this._createAttributes();\n\t}\n\n\t/**\n\t * Returns default attributes for the graph node. Subclasses having any attributes (either\n\t * literal values or references to other graph nodes) must override this method. Literal\n\t * attributes should be given their default values, if any. References should generally be\n\t * initialized as empty (Ref → null, RefList → [], RefMap → {}) and then modified by setters.\n\t *\n\t * Any single-edge references (setRef) returned by this method will be considered immutable,\n\t * to be owned by and disposed with the parent node. Multi-edge references (addRef, removeRef,\n\t * setRefMap) cannot be returned as default attributes.\n\t */\n\tprotected getDefaults(): Nullable<Attributes> {\n\t\treturn {} as Nullable<Attributes>;\n\t}\n\n\t/**\n\t * Constructs and returns an object used to store a graph nodes attributes. Compared to the\n\t * default Attributes interface, this has two distinctions:\n\t *\n\t * 1. Slots for GraphNode<T> objects are replaced with slots for GraphEdge<this, GraphNode<T>>\n\t * 2. GraphNode<T> objects provided as defaults are considered immutable\n\t *\n\t * @internal\n\t */\n\tprivate _createAttributes(): GraphNodeAttributesInternal<this, Attributes> {\n\t\tconst defaultAttributes = this.getDefaults();\n\t\tconst attributes = {} as GraphNodeAttributesInternal<this, Attributes>;\n\t\tfor (const key in defaultAttributes) {\n\t\t\tconst value = defaultAttributes[key] as any;\n\t\t\t// TODO(design): With Ref, RefList, and RefMap types, should users\n\t\t\t// be able to pass them all here? Listeners must be added.\n\t\t\tif (value instanceof GraphNode) {\n\t\t\t\tconst ref = this.graph.createEdge(key, this, value);\n\t\t\t\tref.addEventListener('dispose', () => value.dispose());\n\t\t\t\tthis[$immutableKeys].add(key);\n\t\t\t\tattributes[key] = ref as any;\n\t\t\t} else {\n\t\t\t\tattributes[key] = value as any;\n\t\t\t}\n\t\t}\n\t\treturn attributes;\n\t}\n\n\t/** @internal Returns true if two nodes are on the same {@link Graph}. */\n\tpublic isOnGraph(other: GraphNode): boolean {\n\t\treturn this.graph === other.graph;\n\t}\n\n\t/** Returns true if the node has been permanently removed from the graph. */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Removes both inbound references to and outbound references from this object. At the end\n\t * of the process the object holds no references, and nothing holds references to it. A\n\t * disposed object is not reusable.\n\t */\n\tpublic dispose(): void {\n\t\tif (this._disposed) return;\n\t\tthis.graph.listChildEdges(this).forEach((edge) => edge.dispose());\n\t\tthis.graph.disconnectParents(this);\n\t\tthis._disposed = true;\n\t\tthis.dispatchEvent({ type: 'dispose' });\n\t}\n\n\t/**\n\t * Removes all inbound references to this object. At the end of the process the object is\n\t * considered 'detached': it may hold references to child resources, but nothing holds\n\t * references to it. A detached object may be re-attached.\n\t */\n\tpublic detach(): this {\n\t\tthis.graph.disconnectParents(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transfers this object's references from the old node to the new one. The old node is fully\n\t * detached from this parent at the end of the process.\n\t *\n\t * @hidden\n\t */\n\tpublic swap(prevValue: GraphNode, nextValue: GraphNode): this {\n\t\tfor (const attribute in this[$attributes]) {\n\t\t\tconst value = this[$attributes][attribute] as Ref | RefList | RefSet | RefMap;\n\t\t\tif (value instanceof GraphEdge) {\n\t\t\t\tconst ref = value as Ref;\n\t\t\t\tif (ref.getChild() === prevValue) {\n\t\t\t\t\tthis.setRef(attribute as any, nextValue, ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefList) {\n\t\t\t\tfor (const ref of value.listRefsByChild(prevValue)) {\n\t\t\t\t\tconst refAttributes = ref.getAttributes();\n\t\t\t\t\tthis.removeRef(attribute as any, prevValue as any);\n\t\t\t\t\tthis.addRef(attribute as any, nextValue as any, refAttributes);\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefSet) {\n\t\t\t\tconst ref = value.getRefByChild(prevValue);\n\t\t\t\tif (ref) {\n\t\t\t\t\tconst refAttributes = ref.getAttributes();\n\t\t\t\t\tthis.removeRef(attribute as any, prevValue as any);\n\t\t\t\t\tthis.addRef(attribute as any, nextValue as any, refAttributes);\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefMap) {\n\t\t\t\tfor (const key of value.keys()) {\n\t\t\t\t\tconst ref = value.get(key)!;\n\t\t\t\t\tif (ref.getChild() === prevValue) {\n\t\t\t\t\t\tthis.setRefMap(attribute as any, key, nextValue as any, ref.getAttributes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Literal attributes.\n\t */\n\n\t/** @hidden */\n\tprotected get<K extends LiteralKeys<Attributes>>(attribute: K): Attributes[K] {\n\t\treturn this[$attributes][attribute] as Attributes[K];\n\t}\n\n\t/** @hidden */\n\tprotected set<K extends LiteralKeys<Attributes>>(attribute: K, value: Attributes[K]): this {\n\t\t(this[$attributes][attribute] as Attributes[K]) = value;\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * Ref: 1:1 graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected getRef<K extends RefKeys<Attributes>>(attribute: K): (GraphNode & Attributes[K]) | null {\n\t\tconst ref = this[$attributes][attribute] as Ref;\n\t\treturn ref ? (ref.getChild() as GraphNode & Attributes[K]) : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRef<K extends RefKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: (GraphNode & Attributes[K]) | null,\n\t\tattributes?: Record<string, unknown>,\n\t): this {\n\t\tif (this[$immutableKeys].has(attribute as string)) {\n\t\t\tthrow new Error(`Cannot overwrite immutable attribute, \"${attribute as string}\".`);\n\t\t}\n\n\t\tconst prevRef = this[$attributes][attribute] as Ref;\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, attributes);\n\t\tref.addEventListener('dispose', () => {\n\t\t\tdelete this[$attributes][attribute];\n\t\t\tthis.dispatchEvent({ type: 'change', attribute });\n\t\t});\n\t\t(this[$attributes][attribute] as Ref) = ref;\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * RefList: 1:many graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefs<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(\n\t\tattribute: K,\n\t): RefCollectionValue<Attributes[K]>[] {\n\t\tconst refs = this.assertRefList(attribute);\n\t\treturn refs.values().map((ref) => ref.getChild()) as RefCollectionValue<Attributes[K]>[];\n\t}\n\n\t/** @hidden */\n\tprotected addRef<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: RefCollectionValue<Attributes[K]>,\n\t\tattributes?: Record<string, unknown>,\n\t): this {\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, attributes);\n\n\t\tconst refs = this.assertRefList(attribute);\n\t\trefs.add(ref);\n\n\t\tref.addEventListener('dispose', () => {\n\t\t\trefs.remove(ref);\n\t\t\tthis.dispatchEvent({ type: 'change', attribute });\n\t\t});\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/** @hidden */\n\tprotected removeRef<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: RefCollectionValue<Attributes[K]>,\n\t): this {\n\t\tconst refs = this.assertRefList(attribute);\n\n\t\tif (refs instanceof RefList) {\n\t\t\tfor (const ref of refs.removeChild(value)) {\n\t\t\t\tref.dispose();\n\t\t\t}\n\t\t} else {\n\t\t\tconst ref = refs.removeChild(value);\n\t\t\tif (ref) ref.dispose();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/** @hidden */\n\tprivate assertRefList<K extends RefListKeys<Attributes> | RefSetKeys<Attributes>>(attribute: K): RefList | RefSet {\n\t\tconst list = this[$attributes][attribute];\n\n\t\tif (list instanceof RefList || list instanceof RefSet) {\n\t\t\treturn list;\n\t\t}\n\n\t\t// TODO(v3) Remove warning.\n\t\tthrow new Error(`Expected RefList or RefSet for attribute \"${attribute as string}\"`);\n\t}\n\n\t/**********************************************************************************************\n\t * RefMap: Named 1:many (map) graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefMapKeys<K extends RefMapKeys<Attributes>>(attribute: K): string[] {\n\t\treturn this.assertRefMap(attribute).keys();\n\t}\n\n\t/** @hidden */\n\tprotected listRefMapValues<K extends RefMapKeys<Attributes>, V extends RefMapValue<Attributes[K]>>(\n\t\tattribute: K,\n\t): V[] {\n\t\treturn this.assertRefMap(attribute)\n\t\t\t.values()\n\t\t\t.map((ref: any) => ref.getChild());\n\t}\n\n\t/** @hidden */\n\tprotected getRefMap<K extends RefMapKeys<Attributes>, V extends RefMapValue<Attributes[K]>>(\n\t\tattribute: K,\n\t\tkey: string,\n\t): V | null {\n\t\tconst refMap = this.assertRefMap(attribute);\n\t\tconst ref = refMap.get(key as string);\n\t\treturn ref ? (ref.getChild() as V) : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRefMap<K extends RefMapKeys<Attributes>, V extends RefMapValue<Attributes[K]>>(\n\t\tattribute: K,\n\t\tkey: string,\n\t\tvalue: V | null,\n\t\tmetadata?: Record<string, unknown>,\n\t): this {\n\t\tconst refMap = this.assertRefMap(attribute);\n\n\t\tconst prevRef = refMap.get(key as string);\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tmetadata = Object.assign(metadata || {}, { key: key });\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, { ...metadata, key });\n\t\tref.addEventListener('dispose', () => {\n\t\t\trefMap.delete(key as string);\n\t\t\tthis.dispatchEvent({ type: 'change', attribute, key });\n\t\t});\n\t\trefMap.set(key as string, ref);\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute, key });\n\t}\n\n\t/** @hidden */\n\tprivate assertRefMap<K extends RefMapKeys<Attributes>>(attribute: K): RefMap {\n\t\tconst map = this[$attributes][attribute];\n\n\t\tif (map instanceof RefMap) {\n\t\t\treturn map;\n\t\t}\n\n\t\t// TODO(v3) Remove warning.\n\t\tthrow new Error(`Expected RefMap for attribute \"${attribute as string}\"`);\n\t}\n\n\t/**********************************************************************************************\n\t * Events.\n\t */\n\n\t/**\n\t * Dispatches an event on the GraphNode, and on the associated\n\t * Graph. Event types on the graph are prefixed, `\"node:[type]\"`.\n\t */\n\tdispatchEvent(event: BaseEvent): this {\n\t\tsuper.dispatchEvent({ ...event, target: this });\n\t\tthis.graph.dispatchEvent({ ...event, target: this, type: `node:${event.type}` });\n\t\treturn this;\n\t}\n}\n", "// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\n/**\n * Current version of the package.\n * @hidden\n */\nexport const VERSION = `v${PACKAGE_VERSION}`;\n\n/** @internal */\nexport const NAME = '@gltf-transform/core';\n\n/**\n * Interface allowing Accessor setter/getter methods to be used interchangeably with gl-matrix\n * arrays or with three.js math objects' fromArray/toArray methods. For example, THREE.Vector2,\n * THREE.Vector3, THREE.Vector4, THREE.Quaternion, THREE.Matrix3, THREE.Matrix4, and THREE.Color.\n *\n * @internal\n */\nexport interface ArrayProxy {\n\t/** Sets the value of the object from an array of values. */\n\tfromArray(array: number[]): ArrayProxy;\n\t/** Writes the value of the object into the given array. */\n\ttoArray(array: number[]): number[];\n}\n\n/**\n * TypeScript utility for nullable types.\n * @hidden\n */\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\n/**\n * 2-dimensional vector.\n * @hidden\n */\nexport type vec2 = [number, number];\n\n/**\n * 3-dimensional vector.\n * @hidden\n */\nexport type vec3 = [number, number, number];\n\n/**\n * 4-dimensional vector, e.g. RGBA or a quaternion.\n * @hidden\n */\nexport type vec4 = [number, number, number, number];\n\n// prettier-ignore\n/**\n * 3x3 matrix, e.g. an affine transform of a 2D vector.\n * @hidden\n */\nexport type mat3 = [\n\tnumber, number, number,\n\tnumber, number, number,\n\tnumber, number, number,\n];\n\n// prettier-ignore\n/**\n * 4x4 matrix, e.g. an affine transform of a 3D vector.\n * @hidden\n */\nexport type mat4 = [\n\tnumber, number, number, number,\n\tnumber, number, number, number,\n\tnumber, number, number, number,\n\tnumber, number, number, number,\n];\n\n/** @hidden */\nexport type bbox = { min: vec3; max: vec3 };\n\n/** @hidden */\nexport const GLB_BUFFER = '@glb.bin';\n\n/**\n * Abstraction representing any one of the typed array classes supported by glTF and JavaScript.\n * @hidden\n */\nexport type TypedArray = Float32Array | Uint32Array | Uint16Array | Uint8Array | Int16Array | Int8Array;\n\n/**\n * Abstraction representing the typed array constructors supported by glTF and JavaScript.\n * @hidden\n */\nexport type TypedArrayConstructor =\n\t| Float32ArrayConstructor\n\t| Uint32ArrayConstructor\n\t| Uint16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Int8ArrayConstructor;\n\n/** String IDs for core {@link Property} types. */\nexport enum PropertyType {\n\tACCESSOR = 'Accessor',\n\tANIMATION = 'Animation',\n\tANIMATION_CHANNEL = 'AnimationChannel',\n\tANIMATION_SAMPLER = 'AnimationSampler',\n\tBUFFER = 'Buffer',\n\tCAMERA = 'Camera',\n\tMATERIAL = 'Material',\n\tMESH = 'Mesh',\n\tPRIMITIVE = 'Primitive',\n\tPRIMITIVE_TARGET = 'PrimitiveTarget',\n\tNODE = 'Node',\n\tROOT = 'Root',\n\tSCENE = 'Scene',\n\tSKIN = 'Skin',\n\tTEXTURE = 'Texture',\n\tTEXTURE_INFO = 'TextureInfo',\n}\n\n/** Vertex layout method. */\nexport enum VertexLayout {\n\t/**\n\t * Stores vertex attributes in a single buffer view per mesh primitive. Interleaving vertex\n\t * data may improve performance by reducing page-thrashing in GPU memory.\n\t */\n\tINTERLEAVED = 'interleaved',\n\n\t/**\n\t * Stores each vertex attribute in a separate buffer view. May decrease performance by causing\n\t * page-thrashing in GPU memory. Some 3D engines may prefer this layout, e.g. for simplicity.\n\t */\n\tSEPARATE = 'separate',\n}\n\n/** Accessor usage. */\nexport enum BufferViewUsage {\n\tARRAY_BUFFER = 'ARRAY_BUFFER',\n\tELEMENT_ARRAY_BUFFER = 'ELEMENT_ARRAY_BUFFER',\n\tINVERSE_BIND_MATRICES = 'INVERSE_BIND_MATRICES',\n\tOTHER = 'OTHER',\n\tSPARSE = 'SPARSE',\n}\n\n/** Texture channels. */\nexport enum TextureChannel {\n\tR = 0x1000,\n\tG = 0x0100,\n\tB = 0x0010,\n\tA = 0x0001,\n}\n\nexport enum Format {\n\tGLTF = 'GLTF',\n\tGLB = 'GLB',\n}\n\nexport const ComponentTypeToTypedArray = {\n\t'5120': Int8Array,\n\t'5121': Uint8Array,\n\t'5122': Int16Array,\n\t'5123': Uint16Array,\n\t'5125': Uint32Array,\n\t'5126': Float32Array,\n};\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import { transformMat4 } from 'gl-matrix/vec3';\nimport { PropertyType, bbox, mat4, vec3 } from '../constants.js';\nimport type { Mesh, Node, Scene } from '../properties/index.js';\n\n/** @hidden Implemented in /core for use by /extensions, publicly exported from /functions. */\nexport function getBounds(node: Node | Scene): bbox {\n\tconst resultBounds = createBounds();\n\tconst parents = node.propertyType === PropertyType.NODE ? [node] : node.listChildren();\n\n\tfor (const parent of parents) {\n\t\tparent.traverse((node) => {\n\t\t\tconst mesh = node.getMesh();\n\t\t\tif (!mesh) return;\n\n\t\t\t// Compute mesh bounds and update result.\n\t\t\tconst meshBounds = getMeshBounds(mesh, node.getWorldMatrix());\n\t\t\tif (meshBounds.min.every(isFinite) && meshBounds.max.every(isFinite)) {\n\t\t\t\texpandBounds(meshBounds.min, resultBounds);\n\t\t\t\texpandBounds(meshBounds.max, resultBounds);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn resultBounds;\n}\n\n/** Computes mesh bounds in world space. */\nfunction getMeshBounds(mesh: Mesh, worldMatrix: mat4): bbox {\n\tconst meshBounds = createBounds();\n\n\t// We can't transform a local AABB into world space and still have a tight AABB in world space,\n\t// so we need to compute the world AABB vertex by vertex here.\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst position = prim.getAttribute('POSITION');\n\t\tconst indices = prim.getIndices();\n\t\tif (!position) continue;\n\n\t\tlet localPos: vec3 = [0, 0, 0];\n\t\tlet worldPos: vec3 = [0, 0, 0];\n\t\tfor (let i = 0, il = indices ? indices.getCount() : position.getCount(); i < il; i++) {\n\t\t\tconst index = indices ? indices.getScalar(i) : i;\n\t\t\tlocalPos = position.getElement(index, localPos) as vec3;\n\t\t\tworldPos = transformMat4(worldPos, localPos, worldMatrix) as vec3;\n\t\t\texpandBounds(worldPos, meshBounds);\n\t\t}\n\t}\n\n\treturn meshBounds;\n}\n\n/** Expands bounds of target by given source. */\nfunction expandBounds(point: vec3, target: bbox): void {\n\tfor (let i = 0; i < 3; i++) {\n\t\ttarget.min[i] = Math.min(point[i], target.min[i]);\n\t\ttarget.max[i] = Math.max(point[i], target.max[i]);\n\t}\n}\n\n/** Creates new bounds with min=Infinity, max=-Infinity. */\nfunction createBounds(): bbox {\n\treturn {\n\t\tmin: [Infinity, Infinity, Infinity] as vec3,\n\t\tmax: [-Infinity, -Infinity, -Infinity] as vec3,\n\t};\n}\n", "import type { TypedArray } from '../constants.js';\n\n/**\n * *Common utilities for working with Uint8Array and Buffer objects.*\n *\n * @category Utilities\n */\nexport class BufferUtils {\n\t/** Creates a byte array from a Data URI. */\n\tstatic createBufferFromDataURI(dataURI: string): Uint8Array {\n\t\tif (typeof Buffer === 'undefined') {\n\t\t\t// Browser.\n\t\t\tconst byteString = atob(dataURI.split(',')[1]);\n\t\t\tconst ia = new Uint8Array(byteString.length);\n\t\t\tfor (let i = 0; i < byteString.length; i++) {\n\t\t\t\tia[i] = byteString.charCodeAt(i);\n\t\t\t}\n\t\t\treturn ia;\n\t\t} else {\n\t\t\t// Node.js.\n\t\t\tconst data = dataURI.split(',')[1];\n\t\t\tconst isBase64 = dataURI.indexOf('base64') >= 0;\n\t\t\treturn Buffer.from(data, isBase64 ? 'base64' : 'utf8');\n\t\t}\n\t}\n\n\t/** Encodes text to a byte array. */\n\tstatic encodeText(text: string): Uint8Array {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\n\t/** Decodes a byte array to text. */\n\tstatic decodeText(array: Uint8Array): string {\n\t\treturn new TextDecoder().decode(array);\n\t}\n\n\t/**\n\t * Concatenates N byte arrays.\n\t */\n\tstatic concat(arrays: Uint8Array[]): Uint8Array {\n\t\tlet totalByteLength = 0;\n\t\tfor (const array of arrays) {\n\t\t\ttotalByteLength += array.byteLength;\n\t\t}\n\n\t\tconst result = new Uint8Array(totalByteLength);\n\t\tlet byteOffset = 0;\n\n\t\tfor (const array of arrays) {\n\t\t\tresult.set(array, byteOffset);\n\t\t\tbyteOffset += array.byteLength;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Pads a Uint8Array to the next 4-byte boundary.\n\t *\n\t * Reference: [glTF → Data Alignment](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment)\n\t */\n\tstatic pad(srcArray: Uint8Array, paddingByte = 0): Uint8Array {\n\t\tconst paddedLength = this.padNumber(srcArray.byteLength);\n\t\tif (paddedLength === srcArray.byteLength) return srcArray;\n\n\t\tconst dstArray = new Uint8Array(paddedLength);\n\t\tdstArray.set(srcArray);\n\n\t\tif (paddingByte !== 0) {\n\t\t\tfor (let i = srcArray.byteLength; i < paddedLength; i++) {\n\t\t\t\tdstArray[i] = paddingByte;\n\t\t\t}\n\t\t}\n\n\t\treturn dstArray;\n\t}\n\n\t/** Pads a number to 4-byte boundaries. */\n\tstatic padNumber(v: number): number {\n\t\treturn Math.ceil(v / 4) * 4;\n\t}\n\n\t/** Returns true if given byte array instances are equal. */\n\tstatic equals(a: Uint8Array, b: Uint8Array): boolean {\n\t\tif (a === b) return true;\n\n\t\tif (a.byteLength !== b.byteLength) return false;\n\n\t\tlet i = a.byteLength;\n\t\twhile (i--) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns a Uint8Array view of a typed array, with the same underlying ArrayBuffer.\n\t *\n\t * A shorthand for:\n\t *\n\t * ```js\n\t * const buffer = new Uint8Array(\n\t * \tarray.buffer,\n\t * \tarray.byteOffset + byteOffset,\n\t * \tMath.min(array.byteLength, byteLength)\n\t * );\n\t * ```\n\t *\n\t */\n\tstatic toView(a: TypedArray, byteOffset = 0, byteLength = Infinity): Uint8Array {\n\t\treturn new Uint8Array(a.buffer, a.byteOffset + byteOffset, Math.min(a.byteLength, byteLength));\n\t}\n\n\t/** @internal */\n\tstatic assertView(view: null): null;\n\tstatic assertView(view: Uint8Array): Uint8Array;\n\tstatic assertView(view: Uint8Array | null): Uint8Array | null;\n\tstatic assertView(view: Uint8Array | null): Uint8Array | null {\n\t\tif (view && !ArrayBuffer.isView(view)) {\n\t\t\tthrow new Error(`Method requires Uint8Array parameter; received \"${typeof view}\".`);\n\t\t}\n\t\treturn view as Uint8Array;\n\t}\n}\n", "import type { vec3, vec4 } from '../constants.js';\n\n/**\n * *Common utilities for working with colors in vec3, vec4, or hexadecimal form.*\n *\n * Provides methods to convert linear components (vec3, vec4) to sRGB hex values. All colors in\n * the glTF specification, excluding color textures, are linear. Hexadecimal values, in sRGB\n * colorspace, are accessible through helper functions in the API as a convenience.\n *\n * ```typescript\n * // Hex (sRGB) to factor (linear).\n * const factor = ColorUtils.hexToFactor(0xFFCCCC, []);\n *\n * // Factor (linear) to hex (sRGB).\n * const hex = ColorUtils.factorToHex([1, .25, .25])\n * ```\n *\n * @category Utilities\n */\nexport class ColorUtils {\n\t/**\n\t * Converts sRGB hexadecimal to linear components.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic hexToFactor<T = vec3 | vec4>(hex: number, target: T): T {\n\t\thex = Math.floor(hex);\n\t\tconst _target = target as unknown as vec3;\n\t\t_target[0] = ((hex >> 16) & 255) / 255;\n\t\t_target[1] = ((hex >> 8) & 255) / 255;\n\t\t_target[2] = (hex & 255) / 255;\n\t\treturn this.convertSRGBToLinear<T>(target, target);\n\t}\n\n\t/**\n\t * Converts linear components to sRGB hexadecimal.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic factorToHex<T = vec3 | vec4>(factor: T): number {\n\t\tconst target = [...(factor as unknown as number[])] as unknown as T;\n\t\tconst [r, g, b] = this.convertLinearToSRGB(factor, target) as unknown as number[];\n\t\treturn ((r * 255) << 16) ^ ((g * 255) << 8) ^ ((b * 255) << 0);\n\t}\n\n\t/**\n\t * Converts sRGB components to linear components.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic convertSRGBToLinear<T = vec3 | vec4>(source: T, target: T): T {\n\t\tconst _source = source as unknown as vec3;\n\t\tconst _target = target as unknown as vec3;\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t_target[i] =\n\t\t\t\t_source[i] < 0.04045\n\t\t\t\t\t? _source[i] * 0.0773993808\n\t\t\t\t\t: Math.pow(_source[i] * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Converts linear components to sRGB components.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic convertLinearToSRGB<T = vec3 | vec4>(source: T, target: T): T {\n\t\tconst _source = source as unknown as vec3;\n\t\tconst _target = target as unknown as vec3;\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t_target[i] = _source[i] < 0.0031308 ? _source[i] * 12.92 : 1.055 * Math.pow(_source[i], 0.41666) - 0.055;\n\t\t}\n\t\treturn target;\n\t}\n}\n", "import type { vec2 } from '../constants.js';\nimport { BufferUtils } from './buffer-utils.js';\n\n/** Implements support for an image format in the {@link ImageUtils} class. */\nexport interface ImageUtilsFormat {\n\tmatch(buffer: Uint8Array): boolean;\n\tgetSize(buffer: Uint8Array): vec2 | null;\n\tgetChannels(buffer: Uint8Array): number | null;\n\tgetVRAMByteLength?(buffer: Uint8Array): number | null;\n}\n\n/** JPEG image support. */\nclass JPEGImageUtils implements ImageUtilsFormat {\n\tmatch(array: Uint8Array): boolean {\n\t\treturn array.length >= 3 && array[0] === 255 && array[1] === 216 && array[2] === 255;\n\t}\n\tgetSize(array: Uint8Array): vec2 {\n\t\t// Skip 4 chars, they are for signature\n\t\tlet view = new DataView(array.buffer, array.byteOffset + 4);\n\n\t\tlet i: number, next: number;\n\t\twhile (view.byteLength) {\n\t\t\t// read length of the next block\n\t\t\ti = view.getUint16(0, false);\n\t\t\t// i = buffer.readUInt16BE(0);\n\n\t\t\t// ensure correct format\n\t\t\tvalidateJPEGBuffer(view, i);\n\n\t\t\t// 0xFFC0 is baseline standard(SOF)\n\t\t\t// 0xFFC1 is baseline optimized(SOF)\n\t\t\t// 0xFFC2 is progressive(SOF2)\n\t\t\tnext = view.getUint8(i + 1);\n\t\t\tif (next === 0xc0 || next === 0xc1 || next === 0xc2) {\n\t\t\t\treturn [view.getUint16(i + 7, false), view.getUint16(i + 5, false)];\n\t\t\t}\n\n\t\t\t// move to the next block\n\t\t\tview = new DataView(array.buffer, view.byteOffset + i + 2);\n\t\t}\n\n\t\tthrow new TypeError('Invalid JPG, no size found');\n\t}\n\n\tgetChannels(_buffer: Uint8Array): number {\n\t\treturn 3;\n\t}\n}\n\n/**\n * PNG image support.\n *\n * PNG signature: 'PNG\\r\\n\\x1a\\n'\n * PNG image header chunk name: 'IHDR'\n */\nclass PNGImageUtils implements ImageUtilsFormat {\n\t// Used to detect \"fried\" png's: http://www.jongware.com/pngdefry.html\n\tstatic PNG_FRIED_CHUNK_NAME = 'CgBI';\n\tmatch(array: Uint8Array): boolean {\n\t\treturn (\n\t\t\tarray.length >= 8 &&\n\t\t\tarray[0] === 0x89 &&\n\t\t\tarray[1] === 0x50 &&\n\t\t\tarray[2] === 0x4e &&\n\t\t\tarray[3] === 0x47 &&\n\t\t\tarray[4] === 0x0d &&\n\t\t\tarray[5] === 0x0a &&\n\t\t\tarray[6] === 0x1a &&\n\t\t\tarray[7] === 0x0a\n\t\t);\n\t}\n\tgetSize(array: Uint8Array): vec2 {\n\t\tconst view = new DataView(array.buffer, array.byteOffset);\n\t\tconst magic = BufferUtils.decodeText(array.slice(12, 16));\n\t\tif (magic === PNGImageUtils.PNG_FRIED_CHUNK_NAME) {\n\t\t\treturn [view.getUint32(32, false), view.getUint32(36, false)];\n\t\t}\n\t\treturn [view.getUint32(16, false), view.getUint32(20, false)];\n\t}\n\tgetChannels(_buffer: Uint8Array): number {\n\t\treturn 4;\n\t}\n}\n\n/**\n * *Common utilities for working with image data.*\n *\n * @category Utilities\n */\nexport class ImageUtils {\n\tstatic impls: Record<string, ImageUtilsFormat> = {\n\t\t'image/jpeg': new JPEGImageUtils(),\n\t\t'image/png': new PNGImageUtils(),\n\t};\n\n\t/** Registers support for a new image format; useful for certain extensions. */\n\tpublic static registerFormat(mimeType: string, impl: ImageUtilsFormat): void {\n\t\tthis.impls[mimeType] = impl;\n\t}\n\n\t/**\n\t * Returns detected MIME type of the given image buffer. Note that for image\n\t * formats with support provided by extensions, the extension must be\n\t * registered with an I/O class before it can be detected by ImageUtils.\n\t */\n\tpublic static getMimeType(buffer: Uint8Array): string | null {\n\t\tfor (const mimeType in this.impls) {\n\t\t\tif (this.impls[mimeType].match(buffer)) {\n\t\t\t\treturn mimeType;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Returns the dimensions of the image. */\n\tpublic static getSize(buffer: Uint8Array, mimeType: string): vec2 | null {\n\t\tif (!this.impls[mimeType]) return null;\n\t\treturn this.impls[mimeType].getSize(buffer);\n\t}\n\n\t/**\n\t * Returns a conservative estimate of the number of channels in the image. For some image\n\t * formats, the method may return 4 indicating the possibility of an alpha channel, without\n\t * the ability to guarantee that an alpha channel is present.\n\t */\n\tpublic static getChannels(buffer: Uint8Array, mimeType: string): number | null {\n\t\tif (!this.impls[mimeType]) return null;\n\t\treturn this.impls[mimeType].getChannels(buffer);\n\t}\n\n\t/** Returns a conservative estimate of the GPU memory required by this image. */\n\tpublic static getVRAMByteLength(buffer: Uint8Array, mimeType: string): number | null {\n\t\tif (!this.impls[mimeType]) return null;\n\n\t\tif (this.impls[mimeType].getVRAMByteLength) {\n\t\t\treturn this.impls[mimeType].getVRAMByteLength!(buffer);\n\t\t}\n\n\t\tlet uncompressedBytes = 0;\n\t\tconst channels = 4; // See https://github.com/donmccurdy/glTF-Transform/issues/151.\n\t\tconst resolution = this.getSize(buffer, mimeType);\n\t\tif (!resolution) return null;\n\n\t\twhile (resolution[0] > 1 || resolution[1] > 1) {\n\t\t\tuncompressedBytes += resolution[0] * resolution[1] * channels;\n\t\t\tresolution[0] = Math.max(Math.floor(resolution[0] / 2), 1);\n\t\t\tresolution[1] = Math.max(Math.floor(resolution[1] / 2), 1);\n\t\t}\n\t\tuncompressedBytes += 1 * 1 * channels;\n\t\treturn uncompressedBytes;\n\t}\n\n\t/** Returns the preferred file extension for the given MIME type. */\n\tpublic static mimeTypeToExtension(mimeType: string): string {\n\t\tif (mimeType === 'image/jpeg') return 'jpg';\n\t\treturn mimeType.split('/').pop()!;\n\t}\n\n\t/** Returns the MIME type for the given file extension. */\n\tpublic static extensionToMimeType(extension: string): string {\n\t\tif (extension === 'jpg') return 'image/jpeg';\n\t\tif (!extension) return '';\n\t\treturn `image/${extension}`;\n\t}\n}\n\nfunction validateJPEGBuffer(view: DataView, i: number): DataView {\n\t// index should be within buffer limits\n\tif (i > view.byteLength) {\n\t\tthrow new TypeError('Corrupt JPG, exceeded buffer limits');\n\t}\n\t// Every JPEG block must begin with a 0xFF\n\tif (view.getUint8(i) !== 0xff) {\n\t\tthrow new TypeError('Invalid JPG, marker table corrupted');\n\t}\n\n\treturn view;\n}\n", "import { ImageUtils } from './image-utils.js';\n\n/**\n * *Utility class for working with file systems and URI paths.*\n *\n * @category Utilities\n */\nexport class FileUtils {\n\t/**\n\t * Extracts the basename from a file path, e.g. \"folder/model.glb\" -> \"model\".\n\t * See: {@link HTTPUtils.basename}\n\t */\n\tstatic basename(uri: string): string {\n\t\tconst fileName = uri.split(/[\\\\/]/).pop()!;\n\t\treturn fileName.substring(0, fileName.lastIndexOf('.'));\n\t}\n\n\t/**\n\t * Extracts the extension from a file path, e.g. \"folder/model.glb\" -> \"glb\".\n\t * See: {@link HTTPUtils.extension}\n\t */\n\tstatic extension(uri: string): string {\n\t\tif (uri.startsWith('data:image/')) {\n\t\t\tconst mimeType = uri.match(/data:(image\\/\\w+)/)![1];\n\t\t\treturn ImageUtils.mimeTypeToExtension(mimeType);\n\t\t} else if (uri.startsWith('data:model/gltf+json')) {\n\t\t\treturn 'gltf';\n\t\t} else if (uri.startsWith('data:model/gltf-binary')) {\n\t\t\treturn 'glb';\n\t\t} else if (uri.startsWith('data:application/')) {\n\t\t\treturn 'bin';\n\t\t}\n\t\treturn uri.split(/[\\\\/]/).pop()!.split(/[.]/).pop()!;\n\t}\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n// Reference: https://github.com/jonschlinkert/is-plain-object\n\nfunction isObject(o: any) {\n\treturn Object.prototype.toString.call(o) === '[object Object]';\n}\n\nexport function isPlainObject(o: any) {\n\tif (isObject(o) === false) return false;\n\n\t// If has modified constructor\n\tconst ctor = o.constructor;\n\tif (ctor === undefined) return true;\n\n\t// If has modified prototype\n\tconst prot = ctor.prototype;\n\tif (isObject(prot) === false) return false;\n\n\t// If constructor does not have an Object-specific method\n\tif (Object.prototype.hasOwnProperty.call(prot, 'isPrototypeOf') === false) {\n\t\treturn false;\n\t}\n\n\t// Most likely a plain Object\n\treturn true;\n}\n", "/** Logger verbosity thresholds. */\nexport enum Verbosity {\n\t/** No events are logged. */\n\tSILENT = 4,\n\n\t/** Only error events are logged. */\n\tERROR = 3,\n\n\t/** Only error and warn events are logged. */\n\tWARN = 2,\n\n\t/** Only error, warn, and info events are logged. (DEFAULT) */\n\tINFO = 1,\n\n\t/** All events are logged. */\n\tDEBUG = 0,\n}\n\nexport interface ILogger {\n\tdebug(text: string): void;\n\tinfo(text: string): void;\n\twarn(text: string): void;\n\terror(text: string): void;\n}\n\n/**\n * *Logger utility class.*\n *\n * @category Utilities\n */\nexport class Logger implements ILogger {\n\t/** Logger verbosity thresholds. */\n\tstatic Verbosity = Verbosity;\n\n\t/** Default logger instance. */\n\tpublic static DEFAULT_INSTANCE = new Logger(Logger.Verbosity.INFO);\n\n\t/** Constructs a new Logger instance. */\n\tconstructor(private readonly verbosity: number) {}\n\n\t/** Logs an event at level {@link Logger.Verbosity.DEBUG}. */\n\tdebug(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.DEBUG) {\n\t\t\tconsole.debug(text);\n\t\t}\n\t}\n\n\t/** Logs an event at level {@link Logger.Verbosity.INFO}. */\n\tinfo(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.INFO) {\n\t\t\tconsole.info(text);\n\t\t}\n\t}\n\n\t/** Logs an event at level {@link Logger.Verbosity.WARN}. */\n\twarn(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.WARN) {\n\t\t\tconsole.warn(text);\n\t\t}\n\t}\n\n\t/** Logs an event at level {@link Logger.Verbosity.ERROR}. */\n\terror(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.ERROR) {\n\t\t\tconsole.error(text);\n\t\t}\n\t}\n}\n", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import { determinant, getRotation } from 'gl-matrix/mat4';\nimport { length } from 'gl-matrix/vec3';\nimport type { mat4, vec3, vec4 } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\n\n/** @hidden */\nexport class MathUtils {\n\tpublic static identity(v: number): number {\n\t\treturn v;\n\t}\n\n\tpublic static eq(a: number[], b: number[], tolerance = 10e-6): boolean {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (Math.abs(a[i] - b[i]) > tolerance) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic static clamp(value: number, min: number, max: number): number {\n\t\tif (value < min) return min;\n\t\tif (value > max) return max;\n\t\treturn value;\n\t}\n\n\t// TODO(perf): Compare performance if we replace the switch with individual functions.\n\tpublic static decodeNormalizedInt(i: number, componentType: GLTF.AccessorComponentType): number {\n\t\t// Hardcode enums from accessor.ts to avoid a circular dependency.\n\t\tswitch (componentType) {\n\t\t\tcase 5126: // FLOAT\n\t\t\t\treturn i;\n\t\t\tcase 5123: // UNSIGNED_SHORT\n\t\t\t\treturn i / 65535.0;\n\t\t\tcase 5121: // UNSIGNED_BYTE\n\t\t\t\treturn i / 255.0;\n\t\t\tcase 5122: // SHORT\n\t\t\t\treturn Math.max(i / 32767.0, -1.0);\n\t\t\tcase 5120: // BYTE\n\t\t\t\treturn Math.max(i / 127.0, -1.0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid component type.');\n\t\t}\n\t}\n\n\t// TODO(perf): Compare performance if we replace the switch with individual functions.\n\tpublic static encodeNormalizedInt(f: number, componentType: GLTF.AccessorComponentType): number {\n\t\t// Hardcode enums from accessor.ts to avoid a circular dependency.\n\t\tswitch (componentType) {\n\t\t\tcase 5126: // FLOAT\n\t\t\t\treturn f;\n\t\t\tcase 5123: // UNSIGNED_SHORT\n\t\t\t\treturn Math.round(MathUtils.clamp(f, 0, 1) * 65535.0);\n\t\t\tcase 5121: // UNSIGNED_BYTE\n\t\t\t\treturn Math.round(MathUtils.clamp(f, 0, 1) * 255.0);\n\t\t\tcase 5122: // SHORT\n\t\t\t\treturn Math.round(MathUtils.clamp(f, -1, 1) * 32767.0);\n\t\t\tcase 5120: // BYTE\n\t\t\t\treturn Math.round(MathUtils.clamp(f, -1, 1) * 127.0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid component type.');\n\t\t}\n\t}\n\n\t/**\n\t * Decompose a mat4 to TRS properties.\n\t *\n\t * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n\t * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n\t *\n\t * @param srcMat Matrix element, to be decomposed to TRS properties.\n\t * @param dstTranslation Translation element, to be overwritten.\n\t * @param dstRotation Rotation element, to be overwritten.\n\t * @param dstScale Scale element, to be overwritten.\n\t */\n\tpublic static decompose(srcMat: mat4, dstTranslation: vec3, dstRotation: vec4, dstScale: vec3): void {\n\t\tlet sx = length([srcMat[0], srcMat[1], srcMat[2]]);\n\t\tconst sy = length([srcMat[4], srcMat[5], srcMat[6]]);\n\t\tconst sz = length([srcMat[8], srcMat[9], srcMat[10]]);\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = determinant(srcMat);\n\t\tif (det < 0) sx = -sx;\n\n\t\tdstTranslation[0] = srcMat[12];\n\t\tdstTranslation[1] = srcMat[13];\n\t\tdstTranslation[2] = srcMat[14];\n\n\t\t// scale the rotation part\n\t\tconst _m1 = srcMat.slice();\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1[0] *= invSX;\n\t\t_m1[1] *= invSX;\n\t\t_m1[2] *= invSX;\n\n\t\t_m1[4] *= invSY;\n\t\t_m1[5] *= invSY;\n\t\t_m1[6] *= invSY;\n\n\t\t_m1[8] *= invSZ;\n\t\t_m1[9] *= invSZ;\n\t\t_m1[10] *= invSZ;\n\n\t\tgetRotation(dstRotation, _m1 as mat4);\n\n\t\tdstScale[0] = sx;\n\t\tdstScale[1] = sy;\n\t\tdstScale[2] = sz;\n\t}\n\n\t/**\n\t * Compose TRS properties to a mat4.\n\t *\n\t * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n\t * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n\t *\n\t * @param srcTranslation Translation element of matrix.\n\t * @param srcRotation Rotation element of matrix.\n\t * @param srcScale Scale element of matrix.\n\t * @param dstMat Matrix element, to be modified and returned.\n\t * @returns dstMat, overwritten to mat4 equivalent of given TRS properties.\n\t */\n\tpublic static compose(srcTranslation: vec3, srcRotation: vec4, srcScale: vec3, dstMat: mat4): mat4 {\n\t\tconst te = dstMat;\n\n\t\tconst x = srcRotation[0],\n\t\t\ty = srcRotation[1],\n\t\t\tz = srcRotation[2],\n\t\t\tw = srcRotation[3];\n\t\tconst x2 = x + x,\n\t\t\ty2 = y + y,\n\t\t\tz2 = z + z;\n\t\tconst xx = x * x2,\n\t\t\txy = x * y2,\n\t\t\txz = x * z2;\n\t\tconst yy = y * y2,\n\t\t\tyz = y * z2,\n\t\t\tzz = z * z2;\n\t\tconst wx = w * x2,\n\t\t\twy = w * y2,\n\t\t\twz = w * z2;\n\n\t\tconst sx = srcScale[0],\n\t\t\tsy = srcScale[1],\n\t\t\tsz = srcScale[2];\n\n\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\tte[1] = (xy + wz) * sx;\n\t\tte[2] = (xz - wy) * sx;\n\t\tte[3] = 0;\n\n\t\tte[4] = (xy - wz) * sy;\n\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\tte[6] = (yz + wx) * sy;\n\t\tte[7] = 0;\n\n\t\tte[8] = (xz + wy) * sz;\n\t\tte[9] = (yz - wx) * sz;\n\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\tte[11] = 0;\n\n\t\tte[12] = srcTranslation[0];\n\t\tte[13] = srcTranslation[1];\n\t\tte[14] = srcTranslation[2];\n\t\tte[15] = 1;\n\n\t\treturn te;\n\t}\n}\n", "import type { Ref, RefList, RefMap, RefSet } from 'property-graph';\nimport { isPlainObject } from './is-plain-object.js';\nimport type { BufferViewUsage } from '../constants.js';\nimport type { Property } from '../properties/index.js';\n\nexport type UnknownRef = Ref<Property> | RefList<Property> | RefSet<Property> | RefMap<Property>;\n\nexport function equalsRef(refA: Ref<Property>, refB: Ref<Property>): boolean {\n\tif (!!refA !== !!refB) return false;\n\n\tconst a = refA.getChild()!;\n\tconst b = refB.getChild()!;\n\n\treturn a === b || a.equals(b);\n}\n\nexport function equalsRefSet<\n\tA extends RefList<Property> | RefSet<Property>,\n\tB extends RefList<Property> | RefSet<Property>,\n>(refSetA: A, refSetB: B): boolean {\n\tif (!!refSetA !== !!refSetB) return false;\n\tconst refValuesA = refSetA.values();\n\tconst refValuesB = refSetB.values();\n\tif (refValuesA.length !== refValuesB.length) return false;\n\n\tfor (let i = 0; i < refValuesA.length; i++) {\n\t\tconst a = refValuesA[i];\n\t\tconst b = refValuesB[i];\n\n\t\tif (a.getChild() === b.getChild()) continue;\n\n\t\tif (!a.getChild().equals(b.getChild())) return false;\n\t}\n\n\treturn true;\n}\n\nexport function equalsRefMap(refMapA: RefMap<Property>, refMapB: RefMap<Property>): boolean {\n\tif (!!refMapA !== !!refMapB) return false;\n\n\tconst keysA = refMapA.keys();\n\tconst keysB = refMapB.keys();\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (const key of keysA) {\n\t\tconst refA = refMapA.get(key)!;\n\t\tconst refB = refMapB.get(key)!;\n\t\tif (!!refA !== !!refB) return false;\n\n\t\tconst a = refA.getChild();\n\t\tconst b = refB.getChild();\n\t\tif (a === b) continue;\n\n\t\tif (!a.equals(b)) return false;\n\t}\n\n\treturn true;\n}\n\nexport function equalsArray(a: ArrayLike<unknown> | null, b: ArrayLike<unknown> | null): boolean {\n\tif (a === b) return true;\n\n\tif (!!a !== !!b || !a || !b) return false;\n\n\tif (a.length !== b.length) return false;\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\n\treturn true;\n}\n\nexport function equalsObject(_a: unknown, _b: unknown): boolean {\n\tif (_a === _b) return true;\n\tif (!!_a !== !!_b) return false;\n\tif (!isPlainObject(_a) || !isPlainObject(_b)) {\n\t\treturn _a === _b;\n\t}\n\n\tconst a = _a as Record<string, unknown>;\n\tconst b = _b as Record<string, unknown>;\n\n\tlet numKeysA = 0;\n\tlet numKeysB = 0;\n\n\tlet key: string;\n\n\tfor (key in a) numKeysA++;\n\tfor (key in b) numKeysB++;\n\tif (numKeysA !== numKeysB) return false;\n\n\tfor (key in a) {\n\t\tconst valueA = a[key];\n\t\tconst valueB = b[key];\n\t\tif (isArray(valueA) && isArray(valueB)) {\n\t\t\tif (!equalsArray(valueA as [], valueB as [])) return false;\n\t\t} else if (isPlainObject(valueA) && isPlainObject(valueB)) {\n\t\t\tif (!equalsObject(valueA, valueB)) return false;\n\t\t} else {\n\t\t\tif (valueA !== valueB) return false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport type RefAttributes = Record<string, unknown>;\n\nexport interface AccessorRefAttributes extends RefAttributes {\n\t/** Usage role of an accessor reference. */\n\tusage: BufferViewUsage | string;\n}\n\nexport interface TextureRefAttributes extends RefAttributes {\n\t/** Bitmask for {@link TextureChannel TextureChannels} used by a texture reference. */\n\tchannels: number;\n\t/**\n\t * Specifies that the texture contains color data (base color, emissive, …),\n\t * rather than non-color data (normal maps, metallic roughness, …). Used\n\t * when tuning texture compression settings.\n\t */\n\tisColor?: boolean;\n}\n\nexport function isArray(value: unknown): boolean {\n\treturn Array.isArray(value) || ArrayBuffer.isView(value);\n}\n", "const ALPHABET = '23456789abdegjkmnpqrvwxyzABDEGJKMNPQRVWXYZ';\nconst UNIQUE_RETRIES = 999;\nconst ID_LENGTH = 6;\n\nconst previousIDs = new Set();\n\nconst generateOne = function (): string {\n\tlet rtn = '';\n\tfor (let i = 0; i < ID_LENGTH; i++) {\n\t\trtn += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));\n\t}\n\treturn rtn;\n};\n\n/**\n * Short ID generator.\n *\n * Generated IDs are short, easy to type, and unique for the duration of the program's execution.\n * Uniqueness across multiple program executions, or on other devices, is not guaranteed. Based on\n * [Short ID Generation in JavaScript](https://tomspencer.dev/blog/2014/11/16/short-id-generation-in-javascript/),\n * with alterations.\n *\n * @category Utilities\n * @hidden\n */\nexport const uuid = function (): string {\n\tfor (let retries = 0; retries < UNIQUE_RETRIES; retries++) {\n\t\tconst id = generateOne();\n\t\tif (!previousIDs.has(id)) {\n\t\t\tpreviousIDs.add(id);\n\t\t\treturn id;\n\t\t}\n\t}\n\treturn '';\n};\n", "import { FileUtils } from './file-utils.js';\n\n// Need a placeholder domain to construct a URL from a relative path. We only\n// access `url.pathname`, so the domain doesn't matter.\nconst NULL_DOMAIN = 'https://null.example';\n\n/**\n * *Utility class for working with URLs.*\n *\n * @category Utilities\n */\nexport class HTTPUtils {\n\tstatic readonly DEFAULT_INIT: RequestInit = {};\n\tstatic readonly PROTOCOL_REGEXP = /^[a-zA-Z]+:\\/\\//;\n\n\tstatic dirname(path: string): string {\n\t\tconst index = path.lastIndexOf('/');\n\t\tif (index === -1) return './';\n\t\treturn path.substring(0, index + 1);\n\t}\n\n\t/**\n\t * Extracts the basename from a URL, e.g. \"folder/model.glb\" -> \"model\".\n\t * See: {@link FileUtils.basename}\n\t */\n\tstatic basename(uri: string): string {\n\t\treturn FileUtils.basename(new URL(uri, NULL_DOMAIN).pathname);\n\t}\n\n\t/**\n\t * Extracts the extension from a URL, e.g. \"folder/model.glb\" -> \"glb\".\n\t * See: {@link FileUtils.extension}\n\t */\n\tstatic extension(uri: string): string {\n\t\treturn FileUtils.extension(new URL(uri, NULL_DOMAIN).pathname);\n\t}\n\n\tstatic resolve(base: string, path: string) {\n\t\tif (!this.isRelativePath(path)) return path;\n\n\t\tconst stack = base.split('/');\n\t\tconst parts = path.split('/');\n\t\tstack.pop();\n\t\tfor (let i = 0; i < parts.length; i++) {\n\t\t\tif (parts[i] === '.') continue;\n\t\t\tif (parts[i] === '..') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push(parts[i]);\n\t\t\t}\n\t\t}\n\t\treturn stack.join('/');\n\t}\n\n\t/**\n\t * Returns true for URLs containing a protocol, and false for both\n\t * absolute and relative paths.\n\t */\n\tstatic isAbsoluteURL(path: string) {\n\t\treturn this.PROTOCOL_REGEXP.test(path);\n\t}\n\n\t/**\n\t * Returns true for paths that are declared relative to some unknown base\n\t * path. For example, \"foo/bar/\" is relative both \"/foo/bar/\" is not.\n\t */\n\tstatic isRelativePath(path: string): boolean {\n\t\treturn !/^(?:[a-zA-Z]+:)?\\//.test(path);\n\t}\n}\n", "import type { Nullable } from '../constants.js';\nimport {\n\t$attributes,\n\t$immutableKeys,\n\tGraph,\n\tGraphNode,\n\tGraphEdge,\n\tLiteralKeys,\n\tRefList,\n\tRefSet,\n\tRefMap,\n\tRef,\n\tLiteral,\n} from 'property-graph';\nimport {\n\tequalsArray,\n\tequalsObject,\n\tequalsRef,\n\tequalsRefSet,\n\tequalsRefMap,\n\tisArray,\n\tisPlainObject,\n} from '../utils/index.js';\nimport type { UnknownRef } from '../utils/index.js';\n\nexport type PropertyResolver<T extends Property> = (p: T) => T;\nexport const COPY_IDENTITY = <T extends Property>(t: T): T => t;\n\nexport interface IProperty {\n\tname: string;\n\textras: Record<string, unknown>;\n}\n\nconst EMPTY_SET = new Set<string>();\n\n/**\n * *Properties represent distinct resources in a glTF asset, referenced by other properties.*\n *\n * For example, each material and texture is a property, with material properties holding\n * references to the textures. All properties are created with factory methods on the\n * {@link Document} in which they should be constructed. Properties are destroyed by calling\n * {@link Property.dispose}().\n *\n * Usage:\n *\n * ```ts\n * const texture = doc.createTexture('myTexture');\n * doc.listTextures(); // → [texture x 1]\n *\n * // Attach a texture to a material.\n * material.setBaseColorTexture(texture);\n * material.getBaseColortexture(); // → texture\n *\n * // Detaching a texture removes any references to it, except from the doc.\n * texture.detach();\n * material.getBaseColorTexture(); // → null\n * doc.listTextures(); // → [texture x 1]\n *\n * // Disposing a texture removes all references to it, and its own references.\n * texture.dispose();\n * doc.listTextures(); // → []\n * ```\n *\n * Reference:\n * - [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Properties\n */\nexport abstract class Property<T extends IProperty = IProperty> extends GraphNode<T> {\n\t/** Property type. */\n\tpublic abstract readonly propertyType: string;\n\n\t/**\n\t * Internal graph used to search and maintain references.\n\t * @override\n\t * @hidden\n\t */\n\tprotected declare readonly graph: Graph<Property>;\n\n\t/** @hidden */\n\tconstructor(graph: Graph<Property>, name = '') {\n\t\tsuper(graph);\n\t\t(this as Property)[$attributes]['name'] = name;\n\t\tthis.init();\n\t\tthis.dispatchEvent({ type: 'create' });\n\t}\n\n\t/**\n\t * Initializes instance data for a subclass. Because subclass constructors run after the\n\t * constructor of the parent class, and 'create' events dispatched by the parent class\n\t * assume the instance is fully initialized, it's best to do any initialization here.\n\t * @hidden\n\t */\n\tprotected abstract init(): void;\n\n\t/**\n\t * Returns the Graph associated with this Property. For internal use.\n\t * @hidden\n\t * @experimental\n\t */\n\tpublic getGraph(): Graph<Property> {\n\t\treturn this.graph;\n\t}\n\n\t/**\n\t * Returns default attributes for the property. Empty lists and maps should be initialized\n\t * to empty arrays and objects. Always invoke `super.getDefaults()` and extend the result.\n\t */\n\tprotected getDefaults(): Nullable<T> {\n\t\treturn Object.assign(super.getDefaults(), { name: '', extras: {} });\n\t}\n\n\t/** @hidden */\n\tprotected set<K extends LiteralKeys<T>>(attribute: K, value: T[K]): this {\n\t\tif (Array.isArray(value)) value = value.slice() as T[K]; // copy vector, quat, color …\n\t\treturn super.set(attribute, value);\n\t}\n\n\t/**********************************************************************************************\n\t * Name.\n\t */\n\n\t/**\n\t * Returns the name of this property. While names are not required to be unique, this is\n\t * encouraged, and non-unique names will be overwritten in some tools. For custom data about\n\t * a property, prefer to use Extras.\n\t */\n\tpublic getName(): string {\n\t\treturn (this as Property).get('name');\n\t}\n\n\t/**\n\t * Sets the name of this property. While names are not required to be unique, this is\n\t * encouraged, and non-unique names will be overwritten in some tools. For custom data about\n\t * a property, prefer to use Extras.\n\t */\n\tpublic setName(name: string): this {\n\t\treturn (this as Property).set('name', name) as this;\n\t}\n\n\t/**********************************************************************************************\n\t * Extras.\n\t */\n\n\t/**\n\t * Returns a reference to the Extras object, containing application-specific data for this\n\t * Property. Extras should be an Object, not a primitive value, for best portability.\n\t */\n\tpublic getExtras(): Record<string, unknown> {\n\t\treturn (this as Property).get('extras');\n\t}\n\n\t/**\n\t * Updates the Extras object, containing application-specific data for this Property. Extras\n\t * should be an Object, not a primitive value, for best portability.\n\t */\n\tpublic setExtras(extras: Record<string, unknown>): this {\n\t\treturn (this as Property).set('extras', extras) as this;\n\t}\n\n\t/**********************************************************************************************\n\t * Graph state.\n\t */\n\n\t/**\n\t * Makes a copy of this property, with the same resources (by reference) as the original.\n\t */\n\tpublic clone(): this {\n\t\tconst PropertyClass = this.constructor as new (g: Graph<Property>) => this;\n\t\treturn new PropertyClass(this.graph).copy(this, COPY_IDENTITY);\n\t}\n\n\t/**\n\t * Copies all data from another property to this one. Child properties are copied by reference,\n\t * unless a 'resolve' function is given to override that.\n\t * @param other Property to copy references from.\n\t * @param resolve Function to resolve each Property being transferred. Default is identity.\n\t */\n\tpublic copy(other: this, resolve: PropertyResolver<Property> = COPY_IDENTITY): this {\n\t\t// Remove previous references.\n\t\tfor (const key in this[$attributes]) {\n\t\t\tconst value = this[$attributes][key] as GraphEdge<Property, Property> | RefList | RefSet | RefMap;\n\t\t\tif (value instanceof GraphEdge) {\n\t\t\t\tif (!this[$immutableKeys].has(key)) {\n\t\t\t\t\tvalue.dispose();\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefList || value instanceof RefSet) {\n\t\t\t\tfor (const ref of value.values()) {\n\t\t\t\t\tref.dispose();\n\t\t\t\t}\n\t\t\t} else if (value instanceof RefMap) {\n\t\t\t\tfor (const ref of value.values()) {\n\t\t\t\t\tref.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add new references.\n\t\tfor (const key in other[$attributes]) {\n\t\t\tconst thisValue = this[$attributes][key];\n\t\t\tconst otherValue = other[$attributes][key];\n\t\t\tif (otherValue instanceof GraphEdge) {\n\t\t\t\tif (this[$immutableKeys].has(key)) {\n\t\t\t\t\tconst ref = thisValue as unknown as Ref<Property>;\n\t\t\t\t\tref.getChild().copy(resolve(otherValue.getChild()), resolve);\n\t\t\t\t} else {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tthis.setRef(key as any, resolve(otherValue.getChild()), otherValue.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (otherValue instanceof RefSet || otherValue instanceof RefList) {\n\t\t\t\tfor (const ref of otherValue.values()) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tthis.addRef(key as any, resolve(ref.getChild()) as any, ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (otherValue instanceof RefMap) {\n\t\t\t\tfor (const subkey of otherValue.keys()) {\n\t\t\t\t\tconst ref = otherValue.get(subkey)!;\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tthis.setRefMap(key as any, subkey, resolve(ref.getChild()) as any, ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (isPlainObject(otherValue)) {\n\t\t\t\tthis[$attributes][key] = JSON.parse(JSON.stringify(otherValue));\n\t\t\t} else if (\n\t\t\t\tArray.isArray(otherValue) ||\n\t\t\t\totherValue instanceof ArrayBuffer ||\n\t\t\t\tArrayBuffer.isView(otherValue)\n\t\t\t) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\tthis[$attributes][key] = (otherValue as unknown as Uint8Array).slice() as any;\n\t\t\t} else {\n\t\t\t\tthis[$attributes][key] = otherValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if two properties are deeply equivalent, recursively comparing the attributes\n\t * of the properties. Optionally, a 'skip' set may be included, specifying attributes whose\n\t * values should not be considered in the comparison.\n\t *\n\t * Example: Two {@link Primitive Primitives} are equivalent if they have accessors and\n\t * materials with equivalent content — but not necessarily the same specific accessors\n\t * and materials.\n\t */\n\tpublic equals(other: this, skip = EMPTY_SET): boolean {\n\t\tif (this === other) return true;\n\t\tif (this.propertyType !== other.propertyType) return false;\n\n\t\tfor (const key in this[$attributes]) {\n\t\t\tif (skip.has(key)) continue;\n\n\t\t\tconst a = this[$attributes][key] as UnknownRef | Literal;\n\t\t\tconst b = other[$attributes][key] as UnknownRef | Literal;\n\n\t\t\tif (a instanceof GraphEdge || b instanceof GraphEdge) {\n\t\t\t\tif (!equalsRef(a as Ref<Property>, b as Ref<Property>)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (a instanceof RefSet || b instanceof RefSet || a instanceof RefList || b instanceof RefList) {\n\t\t\t\tif (!equalsRefSet(a as RefSet<Property>, b as RefSet<Property>)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (a instanceof RefMap || b instanceof RefMap) {\n\t\t\t\tif (!equalsRefMap(a as RefMap<Property>, b as RefMap<Property>)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (isPlainObject(a) || isPlainObject(b)) {\n\t\t\t\tif (!equalsObject(a, b)) return false;\n\t\t\t} else if (isArray(a) || isArray(b)) {\n\t\t\t\tif (!equalsArray(a as [], b as [])) return false;\n\t\t\t} else {\n\t\t\t\t// Literal.\n\t\t\t\tif (a !== b) return false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic detach(): this {\n\t\t// Detaching should keep properties in the same Document, and attached to its root.\n\t\tthis.graph.disconnectParents(this, (n: Property) => n.propertyType !== 'Root');\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a list of all properties that hold a reference to this property. For example, a\n\t * material may hold references to various textures, but a texture does not hold references\n\t * to the materials that use it.\n\t *\n\t * It is often necessary to filter the results for a particular type: some resources, like\n\t * {@link Accessor}s, may be referenced by different types of properties. Most properties\n\t * include the {@link Root} as a parent, which is usually not of interest.\n\t *\n\t * Usage:\n\t *\n\t * ```ts\n\t * const materials = texture\n\t * \t.listParents()\n\t * \t.filter((p) => p instanceof Material)\n\t * ```\n\t */\n\tpublic listParents(): Property[] {\n\t\treturn this.graph.listParents(this);\n\t}\n}\n", "import { RefMap } from 'property-graph';\nimport type { Nullable } from '../constants.js';\nimport type { ExtensionProperty } from './extension-property.js';\nimport { Property, IProperty } from './property.js';\n\nexport interface IExtensibleProperty extends IProperty {\n\textensions: RefMap<ExtensionProperty>;\n}\n\n/**\n * *A {@link Property} that can have {@link ExtensionProperty} instances attached.*\n *\n * Most properties are extensible. See the {@link Extension} documentation for information about\n * how to use extensions.\n *\n * @category Properties\n */\nexport abstract class ExtensibleProperty<T extends IExtensibleProperty = IExtensibleProperty> extends Property<T> {\n\tprotected getDefaults(): Nullable<T> {\n\t\treturn Object.assign(super.getDefaults(), { extensions: new RefMap<ExtensionProperty>() });\n\t}\n\n\t/** Returns an {@link ExtensionProperty} attached to this Property, if any. */\n\tpublic getExtension<Prop extends ExtensionProperty>(name: string): Prop | null {\n\t\treturn (this as ExtensibleProperty).getRefMap('extensions', name) as Prop;\n\t}\n\n\t/**\n\t * Attaches the given {@link ExtensionProperty} to this Property. For a given extension, only\n\t * one ExtensionProperty may be attached to any one Property at a time.\n\t */\n\tpublic setExtension<Prop extends ExtensionProperty>(name: string, extensionProperty: Prop | null): this {\n\t\tif (extensionProperty) extensionProperty._validateParent(this as ExtensibleProperty);\n\t\treturn (this as ExtensibleProperty).setRefMap('extensions', name, extensionProperty) as this;\n\t}\n\n\t/** Lists all {@link ExtensionProperty} instances attached to this Property. */\n\tpublic listExtensions(): ExtensionProperty[] {\n\t\treturn (this as ExtensibleProperty).listRefMapValues('extensions');\n\t}\n}\n", "import { Nullable, PropertyType, TypedArray } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { MathUtils } from '../utils/index.js';\nimport type { Buffer } from './buffer.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\n\ninterface IAccessor extends IExtensibleProperty {\n\tarray: TypedArray | null;\n\ttype: GLTF.AccessorType;\n\tcomponentType: GLTF.AccessorComponentType;\n\tnormalized: boolean;\n\tsparse: boolean;\n\tbuffer: Buffer;\n}\n\n/**\n * *Accessors store lists of numeric, vector, or matrix elements in a typed array.*\n *\n * All large data for {@link Mesh}, {@link Skin}, and {@link Animation} properties is stored in\n * {@link Accessor}s, organized into one or more {@link Buffer}s. Each accessor provides data in\n * typed arrays, with two abstractions:\n *\n * *Elements* are the logical divisions of the data into useful types: `\"SCALAR\"`, `\"VEC2\"`,\n * `\"VEC3\"`, `\"VEC4\"`, `\"MAT3\"`, or `\"MAT4\"`. The element type can be determined with the\n * {@link Accessor.getType getType}() method, and the number of elements in the accessor determine its\n * {@link Accessor.getCount getCount}(). The number of components in an element — e.g. 9 for `\"MAT3\"` — are its\n * {@link Accessor.getElementSize getElementSize}(). See {@link Accessor.Type}.\n *\n * *Components* are the numeric values within an element — e.g. `.x` and `.y` for `\"VEC2\"`. Various\n * component types are available: `BYTE`, `UNSIGNED_BYTE`, `SHORT`, `UNSIGNED_SHORT`,\n * `UNSIGNED_INT`, and `FLOAT`. The component type can be determined with the\n * {@link Accessor.getComponentType getComponentType} method, and the number of bytes in each component determine its\n * {@link Accessor.getComponentSize getComponentSize}. See {@link Accessor.ComponentType}.\n *\n * Usage:\n *\n * ```typescript\n * const accessor = doc.createAccessor('myData')\n * \t.setArray(new Float32Array([1,2,3,4,5,6,7,8,9,10,11,12]))\n * \t.setType(Accessor.Type.VEC3)\n * \t.setBuffer(doc.getRoot().listBuffers()[0]);\n *\n * accessor.getCount();        // → 4\n * accessor.getElementSize();  // → 3\n * accessor.getByteLength();   // → 48\n * accessor.getElement(1, []); // → [4, 5, 6]\n *\n * accessor.setElement(0, [10, 20, 30]);\n * ```\n *\n * Data access through the {@link Accessor.getElement getElement} and {@link Accessor.setElement setElement}\n * methods reads or overwrites the content of the underlying typed array. These methods use\n * element arrays intended to be compatible with the [gl-matrix](https://github.com/toji/gl-matrix)\n * library, or with the `toArray`/`fromArray` methods of libraries like three.js and babylon.js.\n *\n * Each Accessor must be assigned to a {@link Buffer}, which determines where the accessor's data\n * is stored in the final file. Assigning Accessors to different Buffers allows the data to be\n * written to different `.bin` files.\n *\n * glTF Transform does not expose many details of sparse, normalized, or interleaved accessors\n * through its API. It reads files using those techniques, presents a simplified view of the data\n * for editing, and attempts to write data back out with optimizations. For example, vertex\n * attributes will typically be interleaved by default, regardless of the input file.\n *\n * References:\n * - [glTF → Accessors](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#accessors)\n *\n * @category Properties\n */\nexport class Accessor extends ExtensibleProperty<IAccessor> {\n\tpublic declare propertyType: PropertyType.ACCESSOR;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Element type contained by the accessor (SCALAR, VEC2, ...). */\n\tpublic static Type: Record<string, GLTF.AccessorType> = {\n\t\t/** Scalar, having 1 value per element. */\n\t\tSCALAR: 'SCALAR',\n\t\t/** 2-component vector, having 2 components per element. */\n\t\tVEC2: 'VEC2',\n\t\t/** 3-component vector, having 3 components per element. */\n\t\tVEC3: 'VEC3',\n\t\t/** 4-component vector, having 4 components per element. */\n\t\tVEC4: 'VEC4',\n\t\t/** 2x2 matrix, having 4 components per element. */\n\t\tMAT2: 'MAT2',\n\t\t/** 3x3 matrix, having 9 components per element. */\n\t\tMAT3: 'MAT3',\n\t\t/** 4x3 matrix, having 16 components per element. */\n\t\tMAT4: 'MAT4',\n\t};\n\n\t/** Data type of the values composing each element in the accessor. */\n\tpublic static ComponentType: Record<string, GLTF.AccessorComponentType> = {\n\t\t/**\n\t\t * 1-byte signed integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array Int8Array}.\n\t\t */\n\t\tBYTE: 5120,\n\t\t/**\n\t\t * 1-byte unsigned integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array Uint8Array}.\n\t\t */\n\t\tUNSIGNED_BYTE: 5121,\n\t\t/**\n\t\t * 2-byte signed integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array Int16Array}.\n\t\t */\n\t\tSHORT: 5122,\n\t\t/**\n\t\t * 2-byte unsigned integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array Uint16Array}.\n\t\t */\n\t\tUNSIGNED_SHORT: 5123,\n\t\t/**\n\t\t * 4-byte unsigned integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array Uint32Array}.\n\t\t */\n\t\tUNSIGNED_INT: 5125,\n\t\t/**\n\t\t * 4-byte floating point number, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array Float32Array}.\n\t\t */\n\t\tFLOAT: 5126,\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ACCESSOR;\n\t}\n\n\tprotected getDefaults(): Nullable<IAccessor> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tarray: null,\n\t\t\ttype: Accessor.Type.SCALAR,\n\t\t\tcomponentType: Accessor.ComponentType.FLOAT,\n\t\t\tnormalized: false,\n\t\t\tsparse: false,\n\t\t\tbuffer: null,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Static.\n\t */\n\n\t/** Returns size of a given element type, in components. */\n\tpublic static getElementSize(type: GLTF.AccessorType): number {\n\t\tswitch (type) {\n\t\t\tcase Accessor.Type.SCALAR:\n\t\t\t\treturn 1;\n\t\t\tcase Accessor.Type.VEC2:\n\t\t\t\treturn 2;\n\t\t\tcase Accessor.Type.VEC3:\n\t\t\t\treturn 3;\n\t\t\tcase Accessor.Type.VEC4:\n\t\t\t\treturn 4;\n\t\t\tcase Accessor.Type.MAT2:\n\t\t\t\treturn 4;\n\t\t\tcase Accessor.Type.MAT3:\n\t\t\t\treturn 9;\n\t\t\tcase Accessor.Type.MAT4:\n\t\t\t\treturn 16;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unexpected type: ' + type);\n\t\t}\n\t}\n\n\t/** Returns size of a given component type, in bytes. */\n\tpublic static getComponentSize(componentType: GLTF.AccessorComponentType): number {\n\t\tswitch (componentType) {\n\t\t\tcase Accessor.ComponentType.BYTE:\n\t\t\t\treturn 1;\n\t\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\t\treturn 1;\n\t\t\tcase Accessor.ComponentType.SHORT:\n\t\t\t\treturn 2;\n\t\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\t\treturn 2;\n\t\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\t\treturn 4;\n\t\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\t\treturn 4;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unexpected component type: ' + componentType);\n\t\t}\n\t}\n\n\t/**********************************************************************************************\n\t * Min/max bounds.\n\t */\n\n\t/**\n\t * Minimum value of each component in this attribute. Unlike in a final glTF file, values\n\t * returned by this method will reflect the minimum accounting for {@link .normalized}\n\t * state.\n\t */\n\tpublic getMinNormalized(target: number[]): number[] {\n\t\tconst normalized = this.getNormalized();\n\t\tconst elementSize = this.getElementSize();\n\t\tconst componentType = this.getComponentType();\n\n\t\tthis.getMin(target);\n\n\t\tif (normalized) {\n\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\ttarget[j] = MathUtils.decodeNormalizedInt(target[j], componentType);\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Minimum value of each component in this attribute. Values returned by this method do not\n\t * reflect normalization: use {@link .getMinNormalized} in that case.\n\t */\n\tpublic getMin(target: number[]): number[] {\n\t\tconst array = this.getArray()!;\n\t\tconst count = this.getCount();\n\t\tconst elementSize = this.getElementSize();\n\n\t\tfor (let j = 0; j < elementSize; j++) target[j] = Infinity;\n\n\t\tfor (let i = 0; i < count * elementSize; i += elementSize) {\n\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\tconst value = array[i + j];\n\t\t\t\tif (Number.isFinite(value)) {\n\t\t\t\t\ttarget[j] = Math.min(target[j], value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Maximum value of each component in this attribute. Unlike in a final glTF file, values\n\t * returned by this method will reflect the minimum accounting for {@link .normalized}\n\t * state.\n\t */\n\tpublic getMaxNormalized(target: number[]): number[] {\n\t\tconst normalized = this.getNormalized();\n\t\tconst elementSize = this.getElementSize();\n\t\tconst componentType = this.getComponentType();\n\n\t\tthis.getMax(target);\n\n\t\tif (normalized) {\n\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\ttarget[j] = MathUtils.decodeNormalizedInt(target[j], componentType);\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Maximum value of each component in this attribute. Values returned by this method do not\n\t * reflect normalization: use {@link .getMinNormalized} in that case.\n\t */\n\tpublic getMax(target: number[]): number[] {\n\t\tconst array = this.get('array');\n\t\tconst count = this.getCount();\n\t\tconst elementSize = this.getElementSize();\n\n\t\tfor (let j = 0; j < elementSize; j++) target[j] = -Infinity;\n\n\t\tfor (let i = 0; i < count * elementSize; i += elementSize) {\n\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\tconst value = array![i + j];\n\t\t\t\tif (Number.isFinite(value)) {\n\t\t\t\t\ttarget[j] = Math.max(target[j], value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/**********************************************************************************************\n\t * Layout.\n\t */\n\n\t/**\n\t * Number of elements in the accessor. An array of length 30, containing 10 `VEC3` elements,\n\t * will have a count of 10.\n\t */\n\tpublic getCount(): number {\n\t\tconst array = this.get('array');\n\t\treturn array ? array.length / this.getElementSize() : 0;\n\t}\n\n\t/** Type of element stored in the accessor. `VEC2`, `VEC3`, etc. */\n\tpublic getType(): GLTF.AccessorType {\n\t\treturn this.get('type');\n\t}\n\n\t/**\n\t * Sets type of element stored in the accessor. `VEC2`, `VEC3`, etc. Array length must be a\n\t * multiple of the component size (`VEC2` = 2, `VEC3` = 3, ...) for the selected type.\n\t */\n\tpublic setType(type: GLTF.AccessorType): Accessor {\n\t\treturn this.set('type', type);\n\t}\n\n\t/**\n\t * Number of components in each element of the accessor. For example, the element size of a\n\t * `VEC2` accessor is 2. This value is determined automatically based on array length and\n\t * accessor type, specified with {@link Accessor.setType setType()}.\n\t */\n\tpublic getElementSize(): number {\n\t\treturn Accessor.getElementSize(this.get('type'));\n\t}\n\n\t/**\n\t * Size of each component (a value in the raw array), in bytes. For example, the\n\t * `componentSize` of data backed by a `float32` array is 4 bytes.\n\t */\n\tpublic getComponentSize(): number {\n\t\treturn this.get('array')!.BYTES_PER_ELEMENT;\n\t}\n\n\t/**\n\t * Component type (float32, uint16, etc.). This value is determined automatically, and can only\n\t * be modified by replacing the underlying array.\n\t */\n\tpublic getComponentType(): GLTF.AccessorComponentType {\n\t\treturn this.get('componentType');\n\t}\n\n\t/**********************************************************************************************\n\t * Normalization.\n\t */\n\n\t/**\n\t * Specifies whether integer data values should be normalized (true) to [0, 1] (for unsigned\n\t * types) or [-1, 1] (for signed types), or converted directly (false) when they are accessed.\n\t * This property is defined only for accessors that contain vertex attributes or animation\n\t * output data.\n\t */\n\tpublic getNormalized(): boolean {\n\t\treturn this.get('normalized');\n\t}\n\n\t/**\n\t * Specifies whether integer data values should be normalized (true) to [0, 1] (for unsigned\n\t * types) or [-1, 1] (for signed types), or converted directly (false) when they are accessed.\n\t * This property is defined only for accessors that contain vertex attributes or animation\n\t * output data.\n\t */\n\tpublic setNormalized(normalized: boolean): this {\n\t\treturn this.set('normalized', normalized);\n\t}\n\n\t/**********************************************************************************************\n\t * Data access.\n\t */\n\n\t/**\n\t * Returns the scalar element value at the given index. For\n\t * {@link Accessor.getNormalized normalized} integer accessors, values are\n\t * decoded and returned in floating-point form.\n\t */\n\tpublic getScalar(index: number): number {\n\t\tconst elementSize = this.getElementSize();\n\t\tconst componentType = this.getComponentType();\n\t\tconst array = this.getArray()!;\n\n\t\tif (this.getNormalized()) {\n\t\t\treturn MathUtils.decodeNormalizedInt(array[index * elementSize], componentType);\n\t\t}\n\n\t\treturn array[index * elementSize];\n\t}\n\n\t/**\n\t * Assigns the scalar element value at the given index. For\n\t * {@link Accessor.getNormalized normalized} integer accessors, \"value\" should be\n\t * given in floating-point form — it will be integer-encoded before writing\n\t * to the underlying array.\n\t */\n\tpublic setScalar(index: number, x: number): this {\n\t\tconst elementSize = this.getElementSize();\n\t\tconst componentType = this.getComponentType();\n\t\tconst array = this.getArray()!;\n\n\t\tif (this.getNormalized()) {\n\t\t\tarray[index * elementSize] = MathUtils.encodeNormalizedInt(x, componentType);\n\t\t} else {\n\t\t\tarray[index * elementSize] = x;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the vector or matrix element value at the given index. For\n\t * {@link Accessor.getNormalized normalized} integer accessors, values are\n\t * decoded and returned in floating-point form.\n\t *\n\t * Example:\n\t *\n\t * ```javascript\n\t * import { add } from 'gl-matrix/add';\n\t *\n\t * const element = [];\n\t * const offset = [1, 1, 1];\n\t *\n\t * for (let i = 0; i < accessor.getCount(); i++) {\n\t * \taccessor.getElement(i, element);\n\t * \tadd(element, element, offset);\n\t * \taccessor.setElement(i, element);\n\t * }\n\t * ```\n\t */\n\tpublic getElement(index: number, target: number[]): number[] {\n\t\tconst normalized = this.getNormalized();\n\t\tconst elementSize = this.getElementSize();\n\t\tconst componentType = this.getComponentType();\n\t\tconst array = this.getArray()!;\n\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tif (normalized) {\n\t\t\t\ttarget[i] = MathUtils.decodeNormalizedInt(array[index * elementSize + i], componentType);\n\t\t\t} else {\n\t\t\t\ttarget[i] = array[index * elementSize + i];\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Assigns the vector or matrix element value at the given index. For\n\t * {@link Accessor.getNormalized normalized} integer accessors, \"value\" should be\n\t * given in floating-point form — it will be integer-encoded before writing\n\t * to the underlying array.\n\t *\n\t * Example:\n\t *\n\t * ```javascript\n\t * import { add } from 'gl-matrix/add';\n\t *\n\t * const element = [];\n\t * const offset = [1, 1, 1];\n\t *\n\t * for (let i = 0; i < accessor.getCount(); i++) {\n\t * \taccessor.getElement(i, element);\n\t * \tadd(element, element, offset);\n\t * \taccessor.setElement(i, element);\n\t * }\n\t * ```\n\t */\n\tpublic setElement(index: number, value: number[]): this {\n\t\tconst normalized = this.getNormalized();\n\t\tconst elementSize = this.getElementSize();\n\t\tconst componentType = this.getComponentType();\n\t\tconst array = this.getArray()!;\n\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tif (normalized) {\n\t\t\t\tarray[index * elementSize + i] = MathUtils.encodeNormalizedInt(value[i], componentType);\n\t\t\t} else {\n\t\t\t\tarray[index * elementSize + i] = value[i];\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Raw data storage.\n\t */\n\n\t/**\n\t * Specifies whether the accessor should be stored sparsely. When written to a glTF file, sparse\n\t * accessors store only values that differ from base values. When loaded in glTF Transform (or most\n\t * runtimes) a sparse accessor can be treated like any other accessor. Currently, glTF Transform always\n\t * uses zeroes for the base values when writing files.\n\t * @experimental\n\t */\n\tpublic getSparse(): boolean {\n\t\treturn this.get('sparse');\n\t}\n\n\t/**\n\t * Specifies whether the accessor should be stored sparsely. When written to a glTF file, sparse\n\t * accessors store only values that differ from base values. When loaded in glTF Transform (or most\n\t * runtimes) a sparse accessor can be treated like any other accessor. Currently, glTF Transform always\n\t * uses zeroes for the base values when writing files.\n\t * @experimental\n\t */\n\tpublic setSparse(sparse: boolean): this {\n\t\treturn this.set('sparse', sparse);\n\t}\n\n\t/** Returns the {@link Buffer} into which this accessor will be organized. */\n\tpublic getBuffer(): Buffer | null {\n\t\treturn this.getRef('buffer');\n\t}\n\n\t/** Assigns the {@link Buffer} into which this accessor will be organized. */\n\tpublic setBuffer(buffer: Buffer | null): this {\n\t\treturn this.setRef('buffer', buffer);\n\t}\n\n\t/** Returns the raw typed array underlying this accessor. */\n\tpublic getArray(): TypedArray | null {\n\t\treturn this.get('array');\n\t}\n\n\t/** Assigns the raw typed array underlying this accessor. */\n\tpublic setArray(array: TypedArray | null): this {\n\t\tthis.set('componentType', array ? arrayToComponentType(array) : Accessor.ComponentType.FLOAT);\n\t\tthis.set('array', array);\n\t\treturn this;\n\t}\n\n\t/** Returns the total bytelength of this accessor, exclusive of padding. */\n\tpublic getByteLength(): number {\n\t\tconst array = this.get('array');\n\t\treturn array ? array.byteLength : 0;\n\t}\n}\n\n/**************************************************************************************************\n * Accessor utilities.\n */\n\n/** @internal */\nfunction arrayToComponentType(array: TypedArray): GLTF.AccessorComponentType {\n\tswitch (array.constructor) {\n\t\tcase Float32Array:\n\t\t\treturn Accessor.ComponentType.FLOAT;\n\t\tcase Uint32Array:\n\t\t\treturn Accessor.ComponentType.UNSIGNED_INT;\n\t\tcase Uint16Array:\n\t\t\treturn Accessor.ComponentType.UNSIGNED_SHORT;\n\t\tcase Uint8Array:\n\t\t\treturn Accessor.ComponentType.UNSIGNED_BYTE;\n\t\tcase Int16Array:\n\t\t\treturn Accessor.ComponentType.SHORT;\n\t\tcase Int8Array:\n\t\t\treturn Accessor.ComponentType.BYTE;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown accessor componentType.');\n\t}\n}\n", "import { RefSet } from 'property-graph';\nimport { Nullable, PropertyType } from '../constants.js';\nimport type { AnimationChannel } from './animation-channel.js';\nimport type { AnimationSampler } from './animation-sampler.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\n\ninterface IAnimation extends IExtensibleProperty {\n\tchannels: RefSet<AnimationChannel>;\n\tsamplers: RefSet<AnimationSampler>;\n}\n\n/**\n * *Reusable collections of {@link AnimationChannel}s, together representing a discrete animation\n * clip.*\n *\n * One Animation represents one playable unit in an animation system. Each may contain channels\n * affecting multiple paths (`translation`, `rotation`, `scale`, or `weights`) on multiple\n * {@link Node}s. An Animation's channels must be played together, and do not have any meaning in\n * isolation.\n *\n * Multiple Animations _may_ be played together: for example, one character's _Walk_ animation\n * might play while another character's _Run_ animation plays. Or a single character might have\n * both an _Idle_ and a _Talk_ animation playing at the same time. However, glTF does not define\n * any particular relationship between top-level Animations, or any particular playback behavior\n * like looping or sequences of Animations. General-purpose viewers typically autoplay the first\n * animation and provide UI controls for choosing another. Game engines may have significantly\n * more advanced methods of playing and blending animations.\n *\n * For example, a very simple skinned {@link Mesh} might have two Animations, _Idle_ and _Walk_.\n * Each of those Animations might affect the rotations of two bones, _LegL_ and _LegR_, where the\n * keyframes for each target-path pair are stored in {@link AnimationChannel} instances. In  total,\n * this model would contain two Animations and Four {@link AnimationChannel}s.\n *\n * Usage:\n *\n * ```ts\n * const animation = doc.createAnimation('machineRun')\n * \t.addChannel(rotateCog1)\n * \t.addChannel(rotateCog2)\n * \t.addChannel(rotateCog3);\n * ```\n *\n * Reference\n * - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n *\n * @category Properties\n */\nexport class Animation extends ExtensibleProperty<IAnimation> {\n\tpublic declare propertyType: PropertyType.ANIMATION;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ANIMATION;\n\t}\n\n\tprotected getDefaults(): Nullable<IAnimation> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tchannels: new RefSet<AnimationChannel>(),\n\t\t\tsamplers: new RefSet<AnimationSampler>(),\n\t\t});\n\t}\n\n\t/** Adds an {@link AnimationChannel} to this Animation. */\n\tpublic addChannel(channel: AnimationChannel): this {\n\t\treturn this.addRef('channels', channel);\n\t}\n\n\t/** Removes an {@link AnimationChannel} from this Animation. */\n\tpublic removeChannel(channel: AnimationChannel): this {\n\t\treturn this.removeRef('channels', channel);\n\t}\n\n\t/** Lists {@link AnimationChannel}s in this Animation. */\n\tpublic listChannels(): AnimationChannel[] {\n\t\treturn this.listRefs('channels');\n\t}\n\n\t/** Adds an {@link AnimationSampler} to this Animation. */\n\tpublic addSampler(sampler: AnimationSampler): this {\n\t\treturn this.addRef('samplers', sampler);\n\t}\n\n\t/** Removes an {@link AnimationSampler} from this Animation. */\n\tpublic removeSampler(sampler: AnimationSampler): this {\n\t\treturn this.removeRef('samplers', sampler);\n\t}\n\n\t/** Lists {@link AnimationSampler}s in this Animation. */\n\tpublic listSamplers(): AnimationSampler[] {\n\t\treturn this.listRefs('samplers');\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\nimport type { AnimationSampler } from './animation-sampler.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { Node } from './node.js';\n\ninterface IAnimationChannel extends IExtensibleProperty {\n\ttargetPath: GLTF.AnimationChannelTargetPath | null;\n\ttargetNode: Node;\n\tsampler: AnimationSampler;\n}\n\n/**\n * *A target-path pair within a larger {@link Animation}, which refers to an\n * {@link AnimationSampler} storing the keyframe data for that pair.*\n *\n * A _target_ is always a {@link Node}, in the core glTF spec. A _path_ is any property of that\n * Node that can be affected by animation: `translation`, `rotation`, `scale`, or `weights`. An\n * {@link Animation} affecting the positions and rotations of several {@link Node}s would contain\n * one channel for each Node-position or Node-rotation pair. The keyframe data for an\n * AnimationChannel is stored in an {@link AnimationSampler}, which must be attached to the same\n * {@link Animation}.\n *\n * Usage:\n *\n * ```ts\n * const node = doc.getRoot()\n * \t.listNodes()\n * \t.find((node) => node.getName() === 'Cog');\n *\n * const channel = doc.createAnimationChannel('cogRotation')\n * \t.setTargetPath('rotation')\n * \t.setTargetNode(node)\n * \t.setSampler(rotateSampler);\n * ```\n *\n * Reference\n * - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n *\n * @category Properties\n */\nexport class AnimationChannel extends ExtensibleProperty<IAnimationChannel> {\n\tpublic declare propertyType: PropertyType.ANIMATION_CHANNEL;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Name of the property to be modified by an animation channel. */\n\tpublic static TargetPath: Record<string, GLTF.AnimationChannelTargetPath> = {\n\t\t/** Channel targets {@link Node.setTranslation}. */\n\t\tTRANSLATION: 'translation',\n\t\t/** Channel targets {@link Node.setRotation}. */\n\t\tROTATION: 'rotation',\n\t\t/** Channel targets {@link Node.setScale}. */\n\t\tSCALE: 'scale',\n\t\t/** Channel targets {@link Node.setWeights}, affecting {@link PrimitiveTarget} weights. */\n\t\tWEIGHTS: 'weights',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ANIMATION_CHANNEL;\n\t}\n\n\tprotected getDefaults(): Nullable<IAnimationChannel> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\ttargetPath: null,\n\t\t\ttargetNode: null,\n\t\t\tsampler: null,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Properties.\n\t */\n\n\t/**\n\t * Path (property) animated on the target {@link Node}. Supported values include:\n\t * `translation`, `rotation`, `scale`, or `weights`.\n\t */\n\tpublic getTargetPath(): GLTF.AnimationChannelTargetPath | null {\n\t\treturn this.get('targetPath');\n\t}\n\n\t/**\n\t * Path (property) animated on the target {@link Node}. Supported values include:\n\t * `translation`, `rotation`, `scale`, or `weights`.\n\t */\n\tpublic setTargetPath(targetPath: GLTF.AnimationChannelTargetPath): this {\n\t\treturn this.set('targetPath', targetPath);\n\t}\n\n\t/** Target {@link Node} animated by the channel. */\n\tpublic getTargetNode(): Node | null {\n\t\treturn this.getRef('targetNode');\n\t}\n\n\t/** Target {@link Node} animated by the channel. */\n\tpublic setTargetNode(targetNode: Node | null): this {\n\t\treturn this.setRef('targetNode', targetNode);\n\t}\n\n\t/**\n\t * Keyframe data input/output values for the channel. Must be attached to the same\n\t * {@link Animation}.\n\t */\n\tpublic getSampler(): AnimationSampler | null {\n\t\treturn this.getRef('sampler');\n\t}\n\n\t/**\n\t * Keyframe data input/output values for the channel. Must be attached to the same\n\t * {@link Animation}.\n\t */\n\tpublic setSampler(sampler: AnimationSampler | null): this {\n\t\treturn this.setRef('sampler', sampler);\n\t}\n}\n", "import { BufferViewUsage, Nullable, PropertyType } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\nimport type { Accessor } from './accessor.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\n\ninterface IAnimationSampler extends IExtensibleProperty {\n\tinterpolation: GLTF.AnimationSamplerInterpolation;\n\tinput: Accessor;\n\toutput: Accessor;\n}\n\n/**\n * *Reusable collection of keyframes affecting particular property of an object.*\n *\n * Each AnimationSampler refers to an input and an output {@link Accessor}. Input contains times\n * (in seconds) for each keyframe. Output contains values (of any {@link Accessor.Type}) for the\n * animated property at each keyframe. Samplers using `CUBICSPLINE` interpolation will also contain\n * in/out tangents in the output, with the layout:\n *\n * in<sub>1</sub>, value<sub>1</sub>, out<sub>1</sub>,\n * in<sub>2</sub>, value<sub>2</sub>, out<sub>2</sub>,\n * in<sub>3</sub>, value<sub>3</sub>, out<sub>3</sub>, ...\n *\n * Usage:\n *\n * ```ts\n * // Create accessor containing input times, in seconds.\n * const input = doc.createAccessor('bounceTimes')\n * \t.setArray(new Float32Array([0, 1, 2]))\n * \t.setType(Accessor.Type.SCALAR);\n *\n * // Create accessor containing output values, in local units.\n * const output = doc.createAccessor('bounceValues')\n * \t.setArray(new Float32Array([\n * \t\t0, 0, 0, // y = 0\n * \t\t0, 1, 0, // y = 1\n * \t\t0, 0, 0, // y = 0\n * \t]))\n * \t.setType(Accessor.Type.VEC3);\n *\n * // Create sampler.\n * const sampler = doc.createAnimationSampler('bounce')\n * \t.setInput(input)\n * \t.setOutput(output)\n * \t.setInterpolation('LINEAR');\n * ```\n *\n * Reference\n * - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n *\n * @category Properties\n */\nexport class AnimationSampler extends ExtensibleProperty<IAnimationSampler> {\n\tpublic declare propertyType: PropertyType.ANIMATION_SAMPLER;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Interpolation method. */\n\tpublic static Interpolation: Record<string, GLTF.AnimationSamplerInterpolation> = {\n\t\t/** Animated values are linearly interpolated between keyframes. */\n\t\tLINEAR: 'LINEAR',\n\t\t/** Animated values remain constant from one keyframe until the next keyframe. */\n\t\tSTEP: 'STEP',\n\t\t/** Animated values are interpolated according to given cubic spline tangents. */\n\t\tCUBICSPLINE: 'CUBICSPLINE',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ANIMATION_SAMPLER;\n\t}\n\n\tprotected getDefaultAttributes(): Nullable<IAnimationSampler> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tinterpolation: AnimationSampler.Interpolation.LINEAR,\n\t\t\tinput: null,\n\t\t\toutput: null,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Static.\n\t */\n\n\t/** Interpolation mode: `STEP`, `LINEAR`, or `CUBICSPLINE`. */\n\tpublic getInterpolation(): GLTF.AnimationSamplerInterpolation {\n\t\treturn this.get('interpolation');\n\t}\n\n\t/** Interpolation mode: `STEP`, `LINEAR`, or `CUBICSPLINE`. */\n\tpublic setInterpolation(interpolation: GLTF.AnimationSamplerInterpolation): this {\n\t\treturn this.set('interpolation', interpolation);\n\t}\n\n\t/** Times for each keyframe, in seconds. */\n\tpublic getInput(): Accessor | null {\n\t\treturn this.getRef('input');\n\t}\n\n\t/** Times for each keyframe, in seconds. */\n\tpublic setInput(input: Accessor | null): this {\n\t\treturn this.setRef('input', input, { usage: BufferViewUsage.OTHER });\n\t}\n\n\t/**\n\t * Values for each keyframe. For `CUBICSPLINE` interpolation, output also contains in/out\n\t * tangents.\n\t */\n\tpublic getOutput(): Accessor | null {\n\t\treturn this.getRef('output');\n\t}\n\n\t/**\n\t * Values for each keyframe. For `CUBICSPLINE` interpolation, output also contains in/out\n\t * tangents.\n\t */\n\tpublic setOutput(output: Accessor | null): this {\n\t\treturn this.setRef('output', output, { usage: BufferViewUsage.OTHER });\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\n\ninterface IBuffer extends IExtensibleProperty {\n\turi: string;\n}\n\n/**\n * *Buffers are low-level storage units for binary data.*\n *\n * glTF 2.0 has three concepts relevant to binary storage: accessors, buffer views, and buffers.\n * In glTF Transform, an {@link Accessor} is referenced by any property that requires numeric typed\n * array data. Meshes, Primitives, and Animations all reference Accessors. Buffers define how that\n * data is organized into transmitted file(s). A `.glb` file has only a single Buffer, and when\n * exporting to `.glb` your resources should be grouped accordingly. A `.gltf` file may reference\n * one or more `.bin` files — each `.bin` is a Buffer — and grouping Accessors under different\n * Buffers allow you to specify that structure.\n *\n * For engines that can dynamically load portions of a glTF file, splitting data into separate\n * buffers can allow you to avoid loading data until it is needed. For example, you might put\n * binary data for specific meshes into a different `.bin` buffer, or put each animation's binary\n * payload into its own `.bin`.\n *\n * Buffer Views define how Accessors are organized within a given Buffer. glTF Transform creates an\n * efficient Buffer View layout automatically at export: there is no Buffer View property exposed\n * by the glTF Transform API, simplifying data management.\n *\n * Usage:\n *\n * ```ts\n * // Create two buffers with custom filenames.\n * const buffer1 = doc.createBuffer('buffer1')\n * \t.setURI('part1.bin');\n * const buffer2 = doc.createBuffer('buffer2')\n * \t.setURI('part2.bin');\n *\n * // Assign the attributes of two meshes to different buffers. If the meshes\n * // had indices or morph target attributes, you would also want to relocate\n * // those accessors.\n * mesh1\n * \t.listPrimitives()\n * \t.forEach((primitive) => primitive.listAttributes()\n * \t\t.forEach((attribute) => attribute.setBuffer(buffer1)));\n * mesh2\n * \t.listPrimitives()\n * \t.forEach((primitive) => primitive.listAttributes()\n * \t\t.forEach((attribute) => attribute.setBuffer(buffer2)));\n *\n * // Write to disk. Each mesh's binary data will be in a separate binary file;\n * // any remaining accessors will be in a third (default) buffer.\n * await new NodeIO().write('scene.gltf', doc);\n * // → scene.gltf, part1.bin, part2.bin\n * ```\n *\n * References:\n * - [glTF → Buffers and Buffer Views](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#buffers-and-buffer-views)\n * - [glTF → Accessors](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#accessors)\n *\n * @category Properties\n */\nexport class Buffer extends ExtensibleProperty<IBuffer> {\n\tpublic declare propertyType: PropertyType.BUFFER;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.BUFFER;\n\t}\n\n\tprotected getDefaults(): Nullable<IBuffer> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { uri: '' });\n\t}\n\n\t/**\n\t * Returns the URI (or filename) of this buffer (e.g. 'myBuffer.bin'). URIs are strongly\n\t * encouraged to be relative paths, rather than absolute. Use of a protocol (like `file://`)\n\t * is possible for custom applications, but will limit the compatibility of the asset with most\n\t * tools.\n\t *\n\t * Buffers commonly use the extension `.bin`, though this is not required.\n\t */\n\tpublic getURI(): string {\n\t\treturn this.get('uri');\n\t}\n\n\t/**\n\t * Sets the URI (or filename) of this buffer (e.g. 'myBuffer.bin'). URIs are strongly\n\t * encouraged to be relative paths, rather than absolute. Use of a protocol (like `file://`)\n\t * is possible for custom applications, but will limit the compatibility of the asset with most\n\t * tools.\n\t *\n\t * Buffers commonly use the extension `.bin`, though this is not required.\n\t */\n\tpublic setURI(uri: string): this {\n\t\treturn this.set('uri', uri);\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\n\ninterface ICamera extends IExtensibleProperty {\n\ttype: GLTF.CameraType;\n\tznear: number;\n\tzfar: number;\n\taspectRatio: number | null;\n\tyfov: number;\n\txmag: number;\n\tymag: number;\n}\n\n/**\n * *Cameras are perspectives through which the {@link Scene} may be viewed.*\n *\n * Projection can be perspective or orthographic. Cameras are contained in nodes and thus can be\n * transformed. The camera is defined such that the local +X axis is to the right, the lens looks\n * towards the local -Z axis, and the top of the camera is aligned with the local +Y axis. If no\n * transformation is specified, the location of the camera is at the origin.\n *\n * Usage:\n *\n * ```typescript\n * const camera = doc.createCamera('myCamera')\n * \t.setType(GLTF.CameraType.PERSPECTIVE)\n * \t.setZNear(0.1)\n * \t.setZFar(100)\n * \t.setYFov(Math.PI / 4)\n * \t.setAspectRatio(1.5);\n *\n * node.setCamera(camera);\n * ```\n *\n * References:\n * - [glTF → Cameras](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#cameras)\n *\n * @category Properties\n */\nexport class Camera extends ExtensibleProperty<ICamera> {\n\tpublic declare propertyType: PropertyType.CAMERA;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\tpublic static Type: Record<string, GLTF.CameraType> = {\n\t\t/** A perspective camera representing a perspective projection matrix. */\n\t\tPERSPECTIVE: 'perspective',\n\t\t/** An orthographic camera representing an orthographic projection matrix. */\n\t\tORTHOGRAPHIC: 'orthographic',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.CAMERA;\n\t}\n\n\tprotected getDefaults(): Nullable<ICamera> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\t// Common.\n\t\t\ttype: Camera.Type.PERSPECTIVE,\n\t\t\tznear: 0.1,\n\t\t\tzfar: 100,\n\t\t\t// Perspective.\n\t\t\taspectRatio: null,\n\t\t\tyfov: (Math.PI * 2 * 50) / 360, // 50º\n\t\t\t// Orthographic.\n\t\t\txmag: 1,\n\t\t\tymag: 1,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Common.\n\t */\n\n\t/** Specifies if the camera uses a perspective or orthographic projection. */\n\tpublic getType(): GLTF.CameraType {\n\t\treturn this.get('type');\n\t}\n\n\t/** Specifies if the camera uses a perspective or orthographic projection. */\n\tpublic setType(type: GLTF.CameraType): this {\n\t\treturn this.set('type', type);\n\t}\n\n\t/** Floating-point distance to the near clipping plane. */\n\tpublic getZNear(): number {\n\t\treturn this.get('znear');\n\t}\n\n\t/** Floating-point distance to the near clipping plane. */\n\tpublic setZNear(znear: number): this {\n\t\treturn this.set('znear', znear);\n\t}\n\n\t/**\n\t * Floating-point distance to the far clipping plane. When defined, zfar must be greater than\n\t * znear. If zfar is undefined, runtime must use infinite projection matrix.\n\t */\n\tpublic getZFar(): number {\n\t\treturn this.get('zfar');\n\t}\n\n\t/**\n\t * Floating-point distance to the far clipping plane. When defined, zfar must be greater than\n\t * znear. If zfar is undefined, runtime must use infinite projection matrix.\n\t */\n\tpublic setZFar(zfar: number): this {\n\t\treturn this.set('zfar', zfar);\n\t}\n\n\t/**********************************************************************************************\n\t * Perspective.\n\t */\n\n\t/**\n\t * Floating-point aspect ratio of the field of view. When undefined, the aspect ratio of the\n\t * canvas is used.\n\t */\n\tpublic getAspectRatio(): number | null {\n\t\treturn this.get('aspectRatio');\n\t}\n\n\t/**\n\t * Floating-point aspect ratio of the field of view. When undefined, the aspect ratio of the\n\t * canvas is used.\n\t */\n\tpublic setAspectRatio(aspectRatio: number | null): this {\n\t\treturn this.set('aspectRatio', aspectRatio);\n\t}\n\n\t/** Floating-point vertical field of view in radians. */\n\tpublic getYFov(): number {\n\t\treturn this.get('yfov');\n\t}\n\n\t/** Floating-point vertical field of view in radians. */\n\tpublic setYFov(yfov: number): this {\n\t\treturn this.set('yfov', yfov);\n\t}\n\n\t/**********************************************************************************************\n\t * Orthographic.\n\t */\n\n\t/**\n\t * Floating-point horizontal magnification of the view, and half the view's width\n\t * in world units.\n\t */\n\tpublic getXMag(): number {\n\t\treturn this.get('xmag');\n\t}\n\n\t/**\n\t * Floating-point horizontal magnification of the view, and half the view's width\n\t * in world units.\n\t */\n\tpublic setXMag(xmag: number): this {\n\t\treturn this.set('xmag', xmag);\n\t}\n\n\t/**\n\t * Floating-point vertical magnification of the view, and half the view's height\n\t * in world units.\n\t */\n\tpublic getYMag(): number {\n\t\treturn this.get('ymag');\n\t}\n\n\t/**\n\t * Floating-point vertical magnification of the view, and half the view's height\n\t * in world units.\n\t */\n\tpublic setYMag(ymag: number): this {\n\t\treturn this.set('ymag', ymag);\n\t}\n}\n", "import type { ExtensibleProperty } from './extensible-property.js';\nimport { Property, IProperty } from './property.js';\n\n/**\n * *Base class for all {@link Property} types that can be attached by an {@link Extension}.*\n *\n * After an {@link Extension} is attached to a glTF {@link Document}, the Extension may be used to\n * construct ExtensionProperty instances, to be referenced throughout the document as prescribed by\n * the Extension. For example, the `KHR_materials_clearcoat` Extension defines a `Clearcoat`\n * ExtensionProperty, which is referenced by {@link Material} Properties in the Document, and may\n * contain references to {@link Texture} properties of its own.\n *\n * For more information on available extensions and their usage, see [Extensions](/extensions).\n *\n * Reference:\n * - [glTF → Extensions](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#specifying-extensions)\n *\n * @category Properties\n */\nexport abstract class ExtensionProperty<T extends IProperty = IProperty> extends Property<T> {\n\tpublic static EXTENSION_NAME: string;\n\tpublic abstract readonly extensionName: string;\n\n\t/** List of supported {@link Property} types. */\n\tpublic abstract readonly parentTypes: string[];\n\n\t/** @hidden */\n\tpublic _validateParent(parent: ExtensibleProperty): void {\n\t\tif (!this.parentTypes.includes(parent.propertyType)) {\n\t\t\tthrow new Error(`Parent \"${parent.propertyType}\" invalid for child \"${this.propertyType}\".`);\n\t\t}\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\n\ninterface ITextureInfo extends IExtensibleProperty {\n\ttexCoord: number;\n\n\t// Sampler properties are also attached to TextureInfo, for simplicity.\n\tmagFilter: GLTF.TextureMagFilter | null;\n\tminFilter: GLTF.TextureMinFilter | null;\n\twrapS: GLTF.TextureWrapMode;\n\twrapT: GLTF.TextureWrapMode;\n}\n\n/**\n * *Settings associated with a particular use of a {@link Texture}.*\n *\n * Different materials may reuse the same texture but with different texture coordinates,\n * minFilter/magFilter, or wrapS/wrapT settings. The TextureInfo class contains settings\n * derived from both the \"TextureInfo\" and \"Sampler\" properties in the glTF specification,\n * consolidated here for simplicity.\n *\n * TextureInfo properties cannot be directly created. For any material texture slot, such as\n * baseColorTexture, there will be a corresponding method to obtain the TextureInfo for that slot.\n * For example, see {@link Material.getBaseColorTextureInfo}.\n *\n * References:\n * - [glTF → Texture Info](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#reference-textureinfo)\n *\n * @category Properties\n */\nexport class TextureInfo extends ExtensibleProperty<ITextureInfo> {\n\tpublic declare propertyType: PropertyType.TEXTURE_INFO;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** UV wrapping mode. Values correspond to WebGL enums. */\n\tpublic static WrapMode: Record<string, GLTF.TextureWrapMode> = {\n\t\t/** */\n\t\tCLAMP_TO_EDGE: 33071,\n\t\t/** */\n\t\tMIRRORED_REPEAT: 33648,\n\t\t/** */\n\t\tREPEAT: 10497,\n\t};\n\n\t/** Magnification filter. Values correspond to WebGL enums. */\n\tpublic static MagFilter: Record<string, GLTF.TextureMagFilter> = {\n\t\t/** */\n\t\tNEAREST: 9728,\n\t\t/** */\n\t\tLINEAR: 9729,\n\t};\n\n\t/** Minification filter. Values correspond to WebGL enums. */\n\tpublic static MinFilter: Record<string, GLTF.TextureMinFilter> = {\n\t\t/** */\n\t\tNEAREST: 9728,\n\t\t/** */\n\t\tLINEAR: 9729,\n\t\t/** */\n\t\tNEAREST_MIPMAP_NEAREST: 9984,\n\t\t/** */\n\t\tLINEAR_MIPMAP_NEAREST: 9985,\n\t\t/** */\n\t\tNEAREST_MIPMAP_LINEAR: 9986,\n\t\t/** */\n\t\tLINEAR_MIPMAP_LINEAR: 9987,\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.TEXTURE_INFO;\n\t}\n\n\tprotected getDefaults(): Nullable<ITextureInfo> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\ttexCoord: 0,\n\t\t\tmagFilter: null,\n\t\t\tminFilter: null,\n\t\t\twrapS: TextureInfo.WrapMode.REPEAT,\n\t\t\twrapT: TextureInfo.WrapMode.REPEAT,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Texture coordinates.\n\t */\n\n\t/** Returns the texture coordinate (UV set) index for the texture. */\n\tpublic getTexCoord(): number {\n\t\treturn this.get('texCoord');\n\t}\n\n\t/** Sets the texture coordinate (UV set) index for the texture. */\n\tpublic setTexCoord(texCoord: number): this {\n\t\treturn this.set('texCoord', texCoord);\n\t}\n\n\t/**********************************************************************************************\n\t * Min/mag filter.\n\t */\n\n\t/** Returns the magnification filter applied to the texture. */\n\tpublic getMagFilter(): GLTF.TextureMagFilter | null {\n\t\treturn this.get('magFilter');\n\t}\n\n\t/** Sets the magnification filter applied to the texture. */\n\tpublic setMagFilter(magFilter: GLTF.TextureMagFilter | null): this {\n\t\treturn this.set('magFilter', magFilter);\n\t}\n\n\t/** Sets the minification filter applied to the texture. */\n\tpublic getMinFilter(): GLTF.TextureMinFilter | null {\n\t\treturn this.get('minFilter');\n\t}\n\n\t/** Returns the minification filter applied to the texture. */\n\tpublic setMinFilter(minFilter: GLTF.TextureMinFilter | null): this {\n\t\treturn this.set('minFilter', minFilter);\n\t}\n\n\t/**********************************************************************************************\n\t * UV wrapping.\n\t */\n\n\t/** Returns the S (U) wrapping mode for UVs used by the texture. */\n\tpublic getWrapS(): GLTF.TextureWrapMode {\n\t\treturn this.get('wrapS');\n\t}\n\n\t/** Sets the S (U) wrapping mode for UVs used by the texture. */\n\tpublic setWrapS(wrapS: GLTF.TextureWrapMode): this {\n\t\treturn this.set('wrapS', wrapS);\n\t}\n\n\t/** Returns the T (V) wrapping mode for UVs used by the texture. */\n\tpublic getWrapT(): GLTF.TextureWrapMode {\n\t\treturn this.get('wrapT');\n\t}\n\n\t/** Sets the T (V) wrapping mode for UVs used by the texture. */\n\tpublic setWrapT(wrapT: GLTF.TextureWrapMode): this {\n\t\treturn this.set('wrapT', wrapT);\n\t}\n}\n", "import { Nullable, PropertyType, TextureChannel, vec3, vec4 } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { Texture } from './texture.js';\nimport { TextureInfo } from './texture-info.js';\n\nconst { R, G, B, A } = TextureChannel;\n\ninterface IMaterial extends IExtensibleProperty {\n\talphaMode: GLTF.MaterialAlphaMode;\n\talphaCutoff: number;\n\tdoubleSided: boolean;\n\tbaseColorFactor: vec4;\n\tbaseColorTexture: Texture;\n\tbaseColorTextureInfo: TextureInfo;\n\temissiveFactor: vec3;\n\temissiveTexture: Texture;\n\temissiveTextureInfo: TextureInfo;\n\tnormalScale: number;\n\tnormalTexture: Texture;\n\tnormalTextureInfo: TextureInfo;\n\tocclusionStrength: number;\n\tocclusionTexture: Texture;\n\tocclusionTextureInfo: TextureInfo;\n\troughnessFactor: number;\n\tmetallicFactor: number;\n\tmetallicRoughnessTexture: Texture;\n\tmetallicRoughnessTextureInfo: TextureInfo;\n}\n\n/**\n * *Materials describe a surface's appearance and response to light.*\n *\n * Each {@link Primitive} within a {@link Mesh} may be assigned a single Material. The number of\n * GPU draw calls typically increases with both the numbers of Primitives and of Materials in an\n * asset; Materials should be reused wherever possible. Techniques like texture atlasing and vertex\n * colors allow objects to have varied appearances while technically sharing a single Material.\n *\n * Material properties are modified by both scalars (like `baseColorFactor`) and textures (like\n * `baseColorTexture`). When both are available, factors are considered linear multipliers against\n * textures of the same name. In the case of base color, vertex colors (`COLOR_0` attributes) are\n * also multiplied.\n *\n * Textures containing color data (`baseColorTexture`, `emissiveTexture`) are sRGB. All other\n * textures are linear. Like other resources, textures should be reused when possible.\n *\n * Usage:\n *\n * ```typescript\n * const material = doc.createMaterial('myMaterial')\n * \t.setBaseColorFactor([1, 0.5, 0.5, 1]) // RGBA\n * \t.setOcclusionTexture(aoTexture)\n * \t.setOcclusionStrength(0.5);\n *\n * mesh.listPrimitives()\n * \t.forEach((prim) => prim.setMaterial(material));\n * ```\n *\n * @category Properties\n */\nexport class Material extends ExtensibleProperty<IMaterial> {\n\tpublic declare propertyType: PropertyType.MATERIAL;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\tpublic static AlphaMode: Record<string, GLTF.MaterialAlphaMode> = {\n\t\t/**\n\t\t * The alpha value is ignored and the rendered output is fully opaque\n\t\t */\n\t\tOPAQUE: 'OPAQUE',\n\t\t/**\n\t\t * The rendered output is either fully opaque or fully transparent depending on the alpha\n\t\t * value and the specified alpha cutoff value\n\t\t */\n\t\tMASK: 'MASK',\n\t\t/**\n\t\t * The alpha value is used to composite the source and destination areas. The rendered\n\t\t * output is combined with the background using the normal painting operation (i.e. the\n\t\t * Porter and Duff over operator)\n\t\t */\n\t\tBLEND: 'BLEND',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.MATERIAL;\n\t}\n\n\tprotected getDefaults(): Nullable<IMaterial> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\talphaMode: Material.AlphaMode.OPAQUE,\n\t\t\talphaCutoff: 0.5,\n\t\t\tdoubleSided: false,\n\t\t\tbaseColorFactor: [1, 1, 1, 1] as vec4,\n\t\t\tbaseColorTexture: null,\n\t\t\tbaseColorTextureInfo: new TextureInfo(this.graph, 'baseColorTextureInfo'),\n\t\t\temissiveFactor: [0, 0, 0] as vec3,\n\t\t\temissiveTexture: null,\n\t\t\temissiveTextureInfo: new TextureInfo(this.graph, 'emissiveTextureInfo'),\n\t\t\tnormalScale: 1,\n\t\t\tnormalTexture: null,\n\t\t\tnormalTextureInfo: new TextureInfo(this.graph, 'normalTextureInfo'),\n\t\t\tocclusionStrength: 1,\n\t\t\tocclusionTexture: null,\n\t\t\tocclusionTextureInfo: new TextureInfo(this.graph, 'occlusionTextureInfo'),\n\t\t\troughnessFactor: 1,\n\t\t\tmetallicFactor: 1,\n\t\t\tmetallicRoughnessTexture: null,\n\t\t\tmetallicRoughnessTextureInfo: new TextureInfo(this.graph, 'metallicRoughnessTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Double-sided / culling.\n\t */\n\n\t/** Returns true when both sides of triangles should be rendered. May impact performance. */\n\tpublic getDoubleSided(): boolean {\n\t\treturn this.get('doubleSided');\n\t}\n\n\t/** Sets whether to render both sides of triangles. May impact performance. */\n\tpublic setDoubleSided(doubleSided: boolean): this {\n\t\treturn this.set('doubleSided', doubleSided);\n\t}\n\n\t/**********************************************************************************************\n\t * Alpha.\n\t */\n\n\t/** Returns material alpha, equivalent to baseColorFactor[3]. */\n\tpublic getAlpha(): number {\n\t\treturn this.get('baseColorFactor')[3];\n\t}\n\n\t/** Sets material alpha, equivalent to baseColorFactor[3]. */\n\tpublic setAlpha(alpha: number): this {\n\t\tconst baseColorFactor = this.get('baseColorFactor').slice() as vec4;\n\t\tbaseColorFactor[3] = alpha;\n\t\treturn this.set('baseColorFactor', baseColorFactor);\n\t}\n\n\t/**\n\t * Returns the mode of the material's alpha channels, which are provided by `baseColorFactor`\n\t * and `baseColorTexture`.\n\t *\n\t * - `OPAQUE`: Alpha value is ignored and the rendered output is fully opaque.\n\t * - `BLEND`: Alpha value is used to determine the transparency each pixel on a surface, and\n\t * \tthe fraction of surface vs. background color in the final result. Alpha blending creates\n\t *\tsignificant edge cases in realtime renderers, and some care when structuring the model is\n\t * \tnecessary for good results. In particular, transparent geometry should be kept in separate\n\t * \tmeshes or primitives from opaque geometry. The `depthWrite` or `zWrite` settings in engines\n\t * \tshould usually be disabled on transparent materials.\n\t * - `MASK`: Alpha value is compared against `alphaCutoff` threshold for each pixel on a\n\t * \tsurface, and the pixel is either fully visible or fully discarded based on that cutoff.\n\t * \tThis technique is useful for things like leafs/foliage, grass, fabric meshes, and other\n\t * \tsurfaces where no semitransparency is needed. With a good choice of `alphaCutoff`, surfaces\n\t * \tthat don't require semitransparency can avoid the performance penalties and visual issues\n\t * \tinvolved with `BLEND` transparency.\n\t *\n\t * Reference:\n\t * - [glTF → material.alphaMode](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialalphamode)\n\t */\n\tpublic getAlphaMode(): GLTF.MaterialAlphaMode {\n\t\treturn this.get('alphaMode');\n\t}\n\n\t/** Sets the mode of the material's alpha channels. See {@link Material.getAlphaMode getAlphaMode} for details. */\n\tpublic setAlphaMode(alphaMode: GLTF.MaterialAlphaMode): this {\n\t\treturn this.set('alphaMode', alphaMode);\n\t}\n\n\t/** Returns the visibility threshold; applied only when `.alphaMode='MASK'`. */\n\tpublic getAlphaCutoff(): number {\n\t\treturn this.get('alphaCutoff');\n\t}\n\n\t/** Sets the visibility threshold; applied only when `.alphaMode='MASK'`. */\n\tpublic setAlphaCutoff(alphaCutoff: number): this {\n\t\treturn this.set('alphaCutoff', alphaCutoff);\n\t}\n\n\t/**********************************************************************************************\n\t * Base color.\n\t */\n\n\t/**\n\t * Base color / albedo factor; Linear-sRGB components.\n\t * See {@link Material.getBaseColorTexture getBaseColorTexture}.\n\t */\n\tpublic getBaseColorFactor(): vec4 {\n\t\treturn this.get('baseColorFactor');\n\t}\n\n\t/**\n\t * Base color / albedo factor; Linear-sRGB components.\n\t * See {@link Material.getBaseColorTexture getBaseColorTexture}.\n\t */\n\tpublic setBaseColorFactor(baseColorFactor: vec4): this {\n\t\treturn this.set('baseColorFactor', baseColorFactor);\n\t}\n\n\t/**\n\t * Base color / albedo. The visible color of a non-metallic surface under constant ambient\n\t * light would be a linear combination (multiplication) of its vertex colors, base color\n\t * factor, and base color texture. Lighting, and reflections in metallic or smooth surfaces,\n\t * also effect the final color. The alpha (`.a`) channel of base color factors and textures\n\t * will have varying effects, based on the setting of {@link Material.getAlphaMode getAlphaMode}.\n\t *\n\t * Reference:\n\t * - [glTF → material.pbrMetallicRoughness.baseColorFactor](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#pbrmetallicroughnessbasecolorfactor)\n\t */\n\tpublic getBaseColorTexture(): Texture | null {\n\t\treturn this.getRef('baseColorTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its base color texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getBaseColorTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('baseColorTexture') ? this.getRef('baseColorTextureInfo') : null;\n\t}\n\n\t/** Sets base color / albedo texture. See {@link Material.getBaseColorTexture getBaseColorTexture}. */\n\tpublic setBaseColorTexture(texture: Texture | null): this {\n\t\treturn this.setRef('baseColorTexture', texture, { channels: R | G | B | A, isColor: true });\n\t}\n\n\t/**********************************************************************************************\n\t * Emissive.\n\t */\n\n\t/** Emissive color; Linear-sRGB components. See {@link Material.getEmissiveTexture getEmissiveTexture}. */\n\tpublic getEmissiveFactor(): vec3 {\n\t\treturn this.get('emissiveFactor');\n\t}\n\n\t/** Emissive color; Linear-sRGB components. See {@link Material.getEmissiveTexture getEmissiveTexture}. */\n\tpublic setEmissiveFactor(emissiveFactor: vec3): this {\n\t\treturn this.set('emissiveFactor', emissiveFactor);\n\t}\n\n\t/**\n\t * Emissive texture. Emissive color is added to any base color of the material, after any\n\t * lighting/shadowing are applied. An emissive color does not inherently \"glow\", or affect\n\t * objects around it at all. To create that effect, most viewers must also enable a\n\t * post-processing effect called \"bloom\".\n\t *\n\t * Reference:\n\t * - [glTF → material.emissiveTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialemissivetexture)\n\t */\n\tpublic getEmissiveTexture(): Texture | null {\n\t\treturn this.getRef('emissiveTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its emissive texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getEmissiveTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('emissiveTexture') ? this.getRef('emissiveTextureInfo') : null;\n\t}\n\n\t/** Sets emissive texture. See {@link Material.getEmissiveTexture getEmissiveTexture}. */\n\tpublic setEmissiveTexture(texture: Texture | null): this {\n\t\treturn this.setRef('emissiveTexture', texture, { channels: R | G | B, isColor: true });\n\t}\n\n\t/**********************************************************************************************\n\t * Normal.\n\t */\n\n\t/** Normal (surface detail) factor; linear multiplier. Affects `.normalTexture`. */\n\tpublic getNormalScale(): number {\n\t\treturn this.get('normalScale');\n\t}\n\n\t/** Normal (surface detail) factor; linear multiplier. Affects `.normalTexture`. */\n\tpublic setNormalScale(scale: number): this {\n\t\treturn this.set('normalScale', scale);\n\t}\n\n\t/**\n\t * Normal (surface detail) texture.\n\t *\n\t * A tangent space normal map. The texture contains RGB components. Each texel represents the\n\t * XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1].\n\t * Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal\n\t * vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer.\n\t *\n\t * Reference:\n\t * - [glTF → material.normalTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialnormaltexture)\n\t */\n\tpublic getNormalTexture(): Texture | null {\n\t\treturn this.getRef('normalTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its normal texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getNormalTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('normalTexture') ? this.getRef('normalTextureInfo') : null;\n\t}\n\n\t/** Sets normal (surface detail) texture. See {@link Material.getNormalTexture getNormalTexture}. */\n\tpublic setNormalTexture(texture: Texture | null): this {\n\t\treturn this.setRef('normalTexture', texture, { channels: R | G | B });\n\t}\n\n\t/**********************************************************************************************\n\t * Occlusion.\n\t */\n\n\t/** (Ambient) Occlusion factor; linear multiplier. Affects `.occlusionTexture`. */\n\tpublic getOcclusionStrength(): number {\n\t\treturn this.get('occlusionStrength');\n\t}\n\n\t/** Sets (ambient) occlusion factor; linear multiplier. Affects `.occlusionTexture`. */\n\tpublic setOcclusionStrength(strength: number): this {\n\t\treturn this.set('occlusionStrength', strength);\n\t}\n\n\t/**\n\t * (Ambient) Occlusion texture, generally used for subtle 'baked' shadowing effects that are\n\t * independent of an object's position, such as shading in inset areas and corners. Direct\n\t * lighting is not affected by occlusion, so at least one indirect light source must be present\n\t * in the scene for occlusion effects to be visible.\n\t *\n\t * The occlusion values are sampled from the R channel. Higher values indicate areas that\n\t * should receive full indirect lighting and lower values indicate no indirect lighting.\n\t *\n\t * Reference:\n\t * - [glTF → material.occlusionTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialocclusiontexture)\n\t */\n\tpublic getOcclusionTexture(): Texture | null {\n\t\treturn this.getRef('occlusionTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its occlusion texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getOcclusionTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('occlusionTexture') ? this.getRef('occlusionTextureInfo') : null;\n\t}\n\n\t/** Sets (ambient) occlusion texture. See {@link Material.getOcclusionTexture getOcclusionTexture}. */\n\tpublic setOcclusionTexture(texture: Texture | null): this {\n\t\treturn this.setRef('occlusionTexture', texture, { channels: R });\n\t}\n\n\t/**********************************************************************************************\n\t * Metallic / roughness.\n\t */\n\n\t/**\n\t * Roughness factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link Material.getMetallicRoughnessTexture getMetallicRoughnessTexture}.\n\t */\n\tpublic getRoughnessFactor(): number {\n\t\treturn this.get('roughnessFactor');\n\t}\n\n\t/**\n\t * Sets roughness factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link Material.getMetallicRoughnessTexture getMetallicRoughnessTexture}.\n\t */\n\tpublic setRoughnessFactor(factor: number): this {\n\t\treturn this.set('roughnessFactor', factor);\n\t}\n\n\t/**\n\t * Metallic factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link Material.getMetallicRoughnessTexture getMetallicRoughnessTexture}.\n\t */\n\tpublic getMetallicFactor(): number {\n\t\treturn this.get('metallicFactor');\n\t}\n\n\t/**\n\t * Sets metallic factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link Material.getMetallicRoughnessTexture getMetallicRoughnessTexture}.\n\t */\n\tpublic setMetallicFactor(factor: number): this {\n\t\treturn this.set('metallicFactor', factor);\n\t}\n\n\t/**\n\t * Metallic roughness texture. The metalness values are sampled from the B channel. The\n\t * roughness values are sampled from the G channel. When a material is fully metallic,\n\t * or nearly so, it may require image-based lighting (i.e. an environment map) or global\n\t * illumination to appear well-lit.\n\t *\n\t * Reference:\n\t * - [glTF → material.pbrMetallicRoughness.metallicRoughnessTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#pbrmetallicroughnessmetallicroughnesstexture)\n\t */\n\tpublic getMetallicRoughnessTexture(): Texture | null {\n\t\treturn this.getRef('metallicRoughnessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its metallic/roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getMetallicRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('metallicRoughnessTexture') ? this.getRef('metallicRoughnessTextureInfo') : null;\n\t}\n\n\t/**\n\t * Sets metallic/roughness texture.\n\t * See {@link Material.getMetallicRoughnessTexture getMetallicRoughnessTexture}.\n\t */\n\tpublic setMetallicRoughnessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('metallicRoughnessTexture', texture, { channels: G | B });\n\t}\n}\n", "import { RefSet } from 'property-graph';\nimport { Nullable, PropertyType } from '../constants.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { Primitive } from './primitive.js';\n\ninterface IMesh extends IExtensibleProperty {\n\tweights: number[];\n\tprimitives: RefSet<Primitive>;\n}\n\n/**\n * *Meshes define reusable geometry (triangles, lines, or points) and are instantiated by\n * {@link Node}s.*\n *\n * Each draw call required to render a mesh is represented as a {@link Primitive}. Meshes typically\n * have only a single {@link Primitive}, but may have more for various reasons. A mesh manages only\n * a list of primitives — materials, morph targets, and other properties are managed on a per-\n * primitive basis.\n *\n * When the same geometry and material should be rendered at multiple places in the scene, reuse\n * the same Mesh instance and attach it to multiple nodes for better efficiency. Where the geometry\n * is shared but the material is not, reusing {@link Accessor}s under different meshes and\n * primitives can similarly improve transmission efficiency, although some rendering efficiency is\n * lost as the number of materials in a scene increases.\n *\n * Usage:\n *\n * ```ts\n * const primitive = doc.createPrimitive()\n * \t.setAttribute('POSITION', positionAccessor)\n * \t.setAttribute('TEXCOORD_0', uvAccessor);\n * const mesh = doc.createMesh('myMesh')\n * \t.addPrimitive(primitive);\n * node.setMesh(mesh);\n * ```\n *\n * References:\n * - [glTF → Geometry](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#geometry)\n *\n * @category Properties\n */\nexport class Mesh extends ExtensibleProperty<IMesh> {\n\tpublic declare propertyType: PropertyType.MESH;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.MESH;\n\t}\n\n\tprotected getDefaults(): Nullable<IMesh> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tweights: [],\n\t\t\tprimitives: new RefSet<Primitive>(),\n\t\t});\n\t}\n\n\t/** Adds a {@link Primitive} to the mesh's draw call list. */\n\tpublic addPrimitive(primitive: Primitive): this {\n\t\treturn this.addRef('primitives', primitive);\n\t}\n\n\t/** Removes a {@link Primitive} from the mesh's draw call list. */\n\tpublic removePrimitive(primitive: Primitive): this {\n\t\treturn this.removeRef('primitives', primitive);\n\t}\n\n\t/** Lists {@link Primitive} draw calls of the mesh. */\n\tpublic listPrimitives(): Primitive[] {\n\t\treturn this.listRefs('primitives');\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} on this mesh. Each {@link Primitive} must\n\t * have the same number of targets. Most engines only support 4-8 active morph targets at a\n\t * time.\n\t */\n\tpublic getWeights(): number[] {\n\t\treturn this.get('weights');\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} on this mesh. Each {@link Primitive} must\n\t * have the same number of targets. Most engines only support 4-8 active morph targets at a\n\t * time.\n\t */\n\tpublic setWeights(weights: number[]): this {\n\t\treturn this.set('weights', weights);\n\t}\n}\n", "import { multiply } from 'gl-matrix/mat4';\nimport { RefSet } from 'property-graph';\nimport { PropertyType, mat4, vec3, vec4, Nullable } from '../constants.js';\nimport { MathUtils } from '../utils/index.js';\nimport type { Camera } from './camera.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { Mesh } from './mesh.js';\nimport { COPY_IDENTITY } from './property.js';\nimport type { Skin } from './skin.js';\nimport type { Scene } from './scene.js';\n\ninterface INode extends IExtensibleProperty {\n\ttranslation: vec3;\n\trotation: vec4;\n\tscale: vec3;\n\tweights: number[];\n\tcamera: Camera;\n\tmesh: Mesh;\n\tskin: Skin;\n\tchildren: RefSet<Node>;\n}\n\n/**\n * *Nodes are the objects that comprise a {@link Scene}.*\n *\n * Each Node may have one or more children, and a transform (position, rotation, and scale) that\n * applies to all of its descendants. A Node may also reference (or \"instantiate\") other resources\n * at its location, including {@link Mesh}, Camera, Light, and Skin properties. A Node cannot be\n * part of more than one {@link Scene}.\n *\n * A Node's local transform is represented with array-like objects, intended to be compatible with\n * [gl-matrix](https://github.com/toji/gl-matrix), or with the `toArray`/`fromArray` methods of\n * libraries like three.js and babylon.js.\n *\n * Usage:\n *\n * ```ts\n * const node = doc.createNode('myNode')\n * \t.setMesh(mesh)\n * \t.setTranslation([0, 0, 0])\n * \t.addChild(otherNode);\n * ```\n *\n * References:\n * - [glTF → Nodes and Hierarchy](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#nodes-and-hierarchy)\n *\n * @category Properties\n */\nexport class Node extends ExtensibleProperty<INode> {\n\tpublic declare propertyType: PropertyType.NODE;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.NODE;\n\t}\n\n\tprotected getDefaults(): Nullable<INode> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\ttranslation: [0, 0, 0] as vec3,\n\t\t\trotation: [0, 0, 0, 1] as vec4,\n\t\t\tscale: [1, 1, 1] as vec3,\n\t\t\tweights: [],\n\t\t\tcamera: null,\n\t\t\tmesh: null,\n\t\t\tskin: null,\n\t\t\tchildren: new RefSet<Node>(),\n\t\t});\n\t}\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\t// Node cannot be copied, only cloned. Copying is shallow, but Nodes cannot have more than\n\t\t// one parent. Rather than leaving one of the two Nodes without children, throw an error here.\n\t\tif (resolve === COPY_IDENTITY) throw new Error('Node cannot be copied.');\n\t\treturn super.copy(other, resolve);\n\t}\n\n\t/**********************************************************************************************\n\t * Local transform.\n\t */\n\n\t/** Returns the translation (position) of this Node in local space. */\n\tpublic getTranslation(): vec3 {\n\t\treturn this.get('translation');\n\t}\n\n\t/** Returns the rotation (quaternion) of this Node in local space. */\n\tpublic getRotation(): vec4 {\n\t\treturn this.get('rotation');\n\t}\n\n\t/** Returns the scale of this Node in local space. */\n\tpublic getScale(): vec3 {\n\t\treturn this.get('scale');\n\t}\n\n\t/** Sets the translation (position) of this Node in local space. */\n\tpublic setTranslation(translation: vec3): this {\n\t\treturn this.set('translation', translation);\n\t}\n\n\t/** Sets the rotation (quaternion) of this Node in local space. */\n\tpublic setRotation(rotation: vec4): this {\n\t\treturn this.set('rotation', rotation);\n\t}\n\n\t/** Sets the scale of this Node in local space. */\n\tpublic setScale(scale: vec3): this {\n\t\treturn this.set('scale', scale);\n\t}\n\n\t/** Returns the local matrix of this Node. */\n\tpublic getMatrix(): mat4 {\n\t\treturn MathUtils.compose(\n\t\t\tthis.get('translation'),\n\t\t\tthis.get('rotation'),\n\t\t\tthis.get('scale'),\n\t\t\t[] as unknown as mat4,\n\t\t);\n\t}\n\n\t/** Sets the local matrix of this Node. Matrix will be decomposed to TRS properties. */\n\tpublic setMatrix(matrix: mat4): this {\n\t\tconst translation = this.get('translation').slice() as vec3;\n\t\tconst rotation = this.get('rotation').slice() as vec4;\n\t\tconst scale = this.get('scale').slice() as vec3;\n\t\tMathUtils.decompose(matrix, translation, rotation, scale);\n\t\treturn this.set('translation', translation).set('rotation', rotation).set('scale', scale);\n\t}\n\n\t/**********************************************************************************************\n\t * World transform.\n\t */\n\n\t/** Returns the translation (position) of this Node in world space. */\n\tpublic getWorldTranslation(): vec3 {\n\t\tconst t = [0, 0, 0] as vec3;\n\t\tMathUtils.decompose(this.getWorldMatrix(), t, [0, 0, 0, 1], [1, 1, 1]);\n\t\treturn t;\n\t}\n\n\t/** Returns the rotation (quaternion) of this Node in world space. */\n\tpublic getWorldRotation(): vec4 {\n\t\tconst r = [0, 0, 0, 1] as vec4;\n\t\tMathUtils.decompose(this.getWorldMatrix(), [0, 0, 0], r, [1, 1, 1]);\n\t\treturn r;\n\t}\n\n\t/** Returns the scale of this Node in world space. */\n\tpublic getWorldScale(): vec3 {\n\t\tconst s = [1, 1, 1] as vec3;\n\t\tMathUtils.decompose(this.getWorldMatrix(), [0, 0, 0], [0, 0, 0, 1], s);\n\t\treturn s;\n\t}\n\n\t/** Returns the world matrix of this Node. */\n\tpublic getWorldMatrix(): mat4 {\n\t\t// Build ancestor chain.\n\t\tconst ancestors: Node[] = [];\n\t\tfor (let node: Node | null = this; node != null; node = node.getParentNode()) {\n\t\t\tancestors.push(node);\n\t\t}\n\n\t\t// Compute world matrix.\n\t\tlet ancestor: Node | undefined;\n\t\tconst worldMatrix = ancestors.pop()!.getMatrix();\n\t\twhile ((ancestor = ancestors.pop())) {\n\t\t\tmultiply(worldMatrix, worldMatrix, ancestor.getMatrix());\n\t\t}\n\n\t\treturn worldMatrix;\n\t}\n\n\t/**********************************************************************************************\n\t * Scene hierarchy.\n\t */\n\n\t/**\n\t * Adds the given Node as a child of this Node.\n\t *\n\t * Requirements:\n\t *\n\t * 1. Nodes MAY be root children of multiple {@link Scene Scenes}\n\t * 2. Nodes MUST NOT be children of >1 Node\n\t * 3. Nodes MUST NOT be children of both Nodes and {@link Scene Scenes}\n\t *\n\t * The `addChild` method enforces these restrictions automatically, and will\n\t * remove the new child from previous parents where needed. This behavior\n\t * may change in future major releases of the library.\n\t */\n\tpublic addChild(child: Node): this {\n\t\t// Remove existing parents.\n\t\tconst parentNode = child.getParentNode();\n\t\tif (parentNode) parentNode.removeChild(child);\n\t\tfor (const parent of child.listParents()) {\n\t\t\tif (parent.propertyType === PropertyType.SCENE) {\n\t\t\t\t(parent as Scene).removeChild(child);\n\t\t\t}\n\t\t}\n\n\t\treturn this.addRef('children', child);\n\t}\n\n\t/** Removes a Node from this Node's child Node list. */\n\tpublic removeChild(child: Node): this {\n\t\treturn this.removeRef('children', child);\n\t}\n\n\t/** Lists all child Nodes of this Node. */\n\tpublic listChildren(): Node[] {\n\t\treturn this.listRefs('children');\n\t}\n\n\t/**\n\t * Returns the Node's unique parent Node within the scene graph. If the\n\t * Node has no parents, or is a direct child of the {@link Scene}\n\t * (\"root node\"), this method returns null.\n\t *\n\t * Unrelated to {@link Property.listParents}, which lists all resource\n\t * references from properties of any type ({@link Skin}, {@link Root}, ...).\n\t */\n\tpublic getParentNode(): Node | null {\n\t\tfor (const parent of this.listParents()) {\n\t\t\tif (parent.propertyType === PropertyType.NODE) {\n\t\t\t\treturn parent as Node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**********************************************************************************************\n\t * Attachments.\n\t */\n\n\t/** Returns the {@link Mesh}, if any, instantiated at this Node. */\n\tpublic getMesh(): Mesh | null {\n\t\treturn this.getRef('mesh');\n\t}\n\n\t/**\n\t * Sets a {@link Mesh} to be instantiated at this Node. A single mesh may be instatiated by\n\t * multiple Nodes; reuse of this sort is strongly encouraged.\n\t */\n\tpublic setMesh(mesh: Mesh | null): this {\n\t\treturn this.setRef('mesh', mesh);\n\t}\n\n\t/** Returns the {@link Camera}, if any, instantiated at this Node. */\n\tpublic getCamera(): Camera | null {\n\t\treturn this.getRef('camera');\n\t}\n\n\t/** Sets a {@link Camera} to be instantiated at this Node. */\n\tpublic setCamera(camera: Camera | null): this {\n\t\treturn this.setRef('camera', camera);\n\t}\n\n\t/** Returns the {@link Skin}, if any, instantiated at this Node. */\n\tpublic getSkin(): Skin | null {\n\t\treturn this.getRef('skin');\n\t}\n\n\t/** Sets a {@link Skin} to be instantiated at this Node. */\n\tpublic setSkin(skin: Skin | null): this {\n\t\treturn this.setRef('skin', skin);\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} for the mesh instance at this Node.\n\t * Most engines only support 4-8 active morph targets at a time.\n\t */\n\tpublic getWeights(): number[] {\n\t\treturn this.get('weights');\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} for the mesh instance at this Node.\n\t * Most engines only support 4-8 active morph targets at a time.\n\t */\n\tpublic setWeights(weights: number[]): this {\n\t\treturn this.set('weights', weights);\n\t}\n\n\t/**********************************************************************************************\n\t * Helpers.\n\t */\n\n\t/** Visits this {@link Node} and its descendants, top-down. */\n\tpublic traverse(fn: (node: Node) => void): this {\n\t\tfn(this);\n\t\tfor (const child of this.listChildren()) child.traverse(fn);\n\t\treturn this;\n\t}\n}\n", "import { RefMap, RefSet } from 'property-graph';\nimport { BufferViewUsage, Nullable, PropertyType } from '../constants.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { Accessor } from './accessor.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { Material } from './material.js';\nimport type { PrimitiveTarget } from './primitive-target.js';\n\ninterface IPrimitive extends IExtensibleProperty {\n\tmode: GLTF.MeshPrimitiveMode;\n\tmaterial: Material;\n\tindices: Accessor;\n\tattributes: RefMap<Accessor>;\n\ttargets: RefSet<PrimitiveTarget>;\n}\n\n/**\n * *Primitives are individual GPU draw calls comprising a {@link Mesh}.*\n *\n * Meshes typically have only a single Primitive, although various cases may require more. Each\n * primitive may be assigned vertex attributes, morph target attributes, and a material. Any of\n * these properties should be reused among multiple primitives where feasible.\n *\n * Primitives cannot be moved independently of other primitives within the same mesh, except\n * through the use of morph targets and skinning. If independent movement or other runtime\n * behavior is necessary (like raycasting or collisions) prefer to assign each primitive to a\n * different mesh. The number of GPU draw calls is typically not affected by grouping or\n * ungrouping primitives to a mesh.\n *\n * Each primitive may optionally be deformed by one or more morph targets, stored in a\n * {@link PrimitiveTarget}.\n *\n * Usage:\n *\n * ```ts\n * const primitive = doc.createPrimitive()\n * \t.setAttribute('POSITION', positionAccessor)\n * \t.setAttribute('TEXCOORD_0', uvAccessor)\n * \t.setMaterial(material);\n * mesh.addPrimitive(primitive);\n * node.setMesh(mesh);\n * ```\n *\n * References:\n * - [glTF → Geometry](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#geometry)\n *\n * @category Properties\n */\nexport class Primitive extends ExtensibleProperty<IPrimitive> {\n\tpublic declare propertyType: PropertyType.PRIMITIVE;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Type of primitives to render. All valid values correspond to WebGL enums. */\n\tpublic static Mode: Record<string, GLTF.MeshPrimitiveMode> = {\n\t\t/** Draw single points. */\n\t\tPOINTS: 0,\n\t\t/** Draw lines. Each vertex connects to the one after it. */\n\t\tLINES: 1,\n\t\t/**\n\t\t * Draw lines. Each set of two vertices is treated as a separate line segment.\n\t\t * @deprecated See {@link https://github.com/KhronosGroup/glTF/issues/1883 KhronosGroup/glTF#1883}.\n\t\t */\n\t\tLINE_LOOP: 2,\n\t\t/** Draw a connected group of line segments from the first vertex to the last,  */\n\t\tLINE_STRIP: 3,\n\t\t/** Draw triangles. Each set of three vertices creates a separate triangle. */\n\t\tTRIANGLES: 4,\n\t\t/** Draw a connected strip of triangles. */\n\t\tTRIANGLE_STRIP: 5,\n\t\t/**\n\t\t * Draw a connected group of triangles. Each vertex connects to the previous and the first\n\t\t * vertex in the fan.\n\t\t * @deprecated See {@link https://github.com/KhronosGroup/glTF/issues/1883 KhronosGroup/glTF#1883}.\n\t\t */\n\t\tTRIANGLE_FAN: 6,\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.PRIMITIVE;\n\t}\n\n\tprotected getDefaults(): Nullable<IPrimitive> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tmode: Primitive.Mode.TRIANGLES,\n\t\t\tmaterial: null,\n\t\t\tindices: null,\n\t\t\tattributes: new RefMap<Accessor>(),\n\t\t\ttargets: new RefSet<PrimitiveTarget>(),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Primitive data.\n\t */\n\n\t/** Returns an {@link Accessor} with indices of vertices to be drawn. */\n\tpublic getIndices(): Accessor | null {\n\t\treturn this.getRef('indices');\n\t}\n\n\t/**\n\t * Sets an {@link Accessor} with indices of vertices to be drawn. In `TRIANGLES` draw mode,\n\t * each set of three indices define a triangle. The front face has a counter-clockwise (CCW)\n\t * winding order.\n\t */\n\tpublic setIndices(indices: Accessor | null): this {\n\t\treturn this.setRef('indices', indices, { usage: BufferViewUsage.ELEMENT_ARRAY_BUFFER });\n\t}\n\n\t/** Returns a vertex attribute as an {@link Accessor}. */\n\tpublic getAttribute(semantic: string): Accessor | null {\n\t\treturn this.getRefMap('attributes', semantic);\n\t}\n\n\t/**\n\t * Sets a vertex attribute to an {@link Accessor}. All attributes must have the same vertex\n\t * count.\n\t */\n\tpublic setAttribute(semantic: string, accessor: Accessor | null): this {\n\t\treturn this.setRefMap('attributes', semantic, accessor, { usage: BufferViewUsage.ARRAY_BUFFER });\n\t}\n\n\t/**\n\t * Lists all vertex attribute {@link Accessor}s associated with the primitive, excluding any\n\t * attributes used for morph targets. For example, `[positionAccessor, normalAccessor,\n\t * uvAccessor]`. Order will be consistent with the order returned by {@link .listSemantics}().\n\t */\n\tpublic listAttributes(): Accessor[] {\n\t\treturn this.listRefMapValues('attributes');\n\t}\n\n\t/**\n\t * Lists all vertex attribute semantics associated with the primitive, excluding any semantics\n\t * used for morph targets. For example, `['POSITION', 'NORMAL', 'TEXCOORD_0']`. Order will be\n\t * consistent with the order returned by {@link .listAttributes}().\n\t */\n\tpublic listSemantics(): string[] {\n\t\treturn this.listRefMapKeys('attributes');\n\t}\n\n\t/** Returns the material used to render the primitive. */\n\tpublic getMaterial(): Material | null {\n\t\treturn this.getRef('material');\n\t}\n\n\t/** Sets the material used to render the primitive. */\n\tpublic setMaterial(material: Material | null): this {\n\t\treturn this.setRef('material', material);\n\t}\n\n\t/**********************************************************************************************\n\t * Mode.\n\t */\n\n\t/**\n\t * Returns the GPU draw mode (`TRIANGLES`, `LINES`, `POINTS`...) as a WebGL enum value.\n\t *\n\t * Reference:\n\t * - [glTF → `primitive.mode`](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#primitivemode)\n\t */\n\tpublic getMode(): GLTF.MeshPrimitiveMode {\n\t\treturn this.get('mode');\n\t}\n\n\t/**\n\t * Sets the GPU draw mode (`TRIANGLES`, `LINES`, `POINTS`...) as a WebGL enum value.\n\t *\n\t * Reference:\n\t * - [glTF → `primitive.mode`](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#primitivemode)\n\t */\n\tpublic setMode(mode: GLTF.MeshPrimitiveMode): this {\n\t\treturn this.set('mode', mode);\n\t}\n\n\t/**********************************************************************************************\n\t * Morph targets.\n\t */\n\n\t/** Lists all morph targets associated with the primitive. */\n\tpublic listTargets(): PrimitiveTarget[] {\n\t\treturn this.listRefs('targets');\n\t}\n\n\t/**\n\t * Adds a morph target to the primitive. All primitives in the same mesh must have the same\n\t * number of targets.\n\t */\n\tpublic addTarget(target: PrimitiveTarget): this {\n\t\treturn this.addRef('targets', target);\n\t}\n\n\t/**\n\t * Removes a morph target from the primitive. All primitives in the same mesh must have the same\n\t * number of targets.\n\t */\n\tpublic removeTarget(target: PrimitiveTarget): this {\n\t\treturn this.removeRef('targets', target);\n\t}\n}\n", "import { RefMap } from 'property-graph';\nimport { BufferViewUsage, Nullable, PropertyType } from '../constants.js';\nimport { Accessor } from './accessor.js';\nimport type { IExtensibleProperty } from './extensible-property.js';\nimport { Property } from './property.js';\n\ninterface IPrimitiveTarget extends IExtensibleProperty {\n\tattributes: RefMap<Accessor>;\n}\n\n/**\n * *Morph target or shape key used to deform one {@link Primitive} in a {@link Mesh}.*\n *\n * A PrimitiveTarget contains a `POSITION` attribute (and optionally `NORMAL` and `TANGENT`) that\n * can additively deform the base attributes on a {@link Mesh} {@link Primitive}. Vertex values\n * of `0, 0, 0` in the target will have no effect, whereas a value of `0, 1, 0` would offset that\n * vertex in the base geometry by y+=1. Morph targets can be fully or partially applied: their\n * default state is controlled by {@link Mesh.getWeights}, which can also be overridden for a\n * particular instantiation of a {@link Mesh}, using {@link Node.getWeights}.\n *\n * Reference:\n * - [glTF → Morph Targets](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#morph-targets)\n *\n * @category Properties\n */\nexport class PrimitiveTarget extends Property<IPrimitiveTarget> {\n\tpublic declare propertyType: PropertyType.PRIMITIVE_TARGET;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.PRIMITIVE_TARGET;\n\t}\n\n\tprotected getDefaults(): Nullable<IPrimitiveTarget> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { attributes: new RefMap<Accessor>() });\n\t}\n\n\t/** Returns a morph target vertex attribute as an {@link Accessor}. */\n\tpublic getAttribute(semantic: string): Accessor | null {\n\t\treturn this.getRefMap('attributes', semantic);\n\t}\n\n\t/**\n\t * Sets a morph target vertex attribute to an {@link Accessor}.\n\t */\n\tpublic setAttribute(semantic: string, accessor: Accessor | null): this {\n\t\treturn this.setRefMap('attributes', semantic, accessor, { usage: BufferViewUsage.ARRAY_BUFFER });\n\t}\n\n\t/**\n\t * Lists all morph target vertex attribute {@link Accessor}s associated. Order will be\n\t * consistent with the order returned by {@link .listSemantics}().\n\t */\n\tpublic listAttributes(): Accessor[] {\n\t\treturn this.listRefMapValues('attributes');\n\t}\n\n\t/**\n\t * Lists all morph target vertex attribute semantics associated. Order will be\n\t * consistent with the order returned by {@link .listAttributes}().\n\t */\n\tpublic listSemantics(): string[] {\n\t\treturn this.listRefMapKeys('attributes');\n\t}\n}\n", "import { RefSet } from 'property-graph';\nimport { Nullable, PropertyType } from '../constants.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { Node } from './node.js';\nimport { COPY_IDENTITY } from './property.js';\n\ninterface IScene extends IExtensibleProperty {\n\tchildren: RefSet<Node>;\n}\n\n/**\n * *Scenes represent a set of visual objects to render.*\n *\n * Typically a glTF file contains only a single Scene, although more are allowed and useful in some\n * cases. No particular meaning is associated with additional Scenes, except as defined by the\n * application. Scenes reference {@link Node}s, and a single Node cannot be a member of more than\n * one Scene.\n *\n * References:\n * - [glTF → Scenes](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#scenes)\n * - [glTF → Coordinate System and Units](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#coordinate-system-and-units)\n *\n * @category Properties\n */\nexport class Scene extends ExtensibleProperty<IScene> {\n\tpublic declare propertyType: PropertyType.SCENE;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.SCENE;\n\t}\n\n\tprotected getDefaults(): Nullable<IScene> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { children: new RefSet<Node>() });\n\t}\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\t// Scene cannot be copied, only cloned. Copying is shallow, but nodes cannot have more than\n\t\t// one parent. Rather than leaving one of the two Scenes without children, throw an error here.\n\t\tif (resolve === COPY_IDENTITY) throw new Error('Scene cannot be copied.');\n\t\treturn super.copy(other, resolve);\n\t}\n\n\t/**\n\t * Adds a {@link Node} to the Scene.\n\t *\n\t * Requirements:\n\t *\n\t * 1. Nodes MAY be root children of multiple {@link Scene Scenes}\n\t * 2. Nodes MUST NOT be children of >1 Node\n\t * 3. Nodes MUST NOT be children of both Nodes and {@link Scene Scenes}\n\t *\n\t * The `addChild` method enforces these restrictions automatically, and will\n\t * remove the new child from previous parents where needed. This behavior\n\t * may change in future major releases of the library.\n\t */\n\tpublic addChild(node: Node): this {\n\t\t// Remove existing parent.\n\t\tconst parentNode = node.getParentNode();\n\t\tif (parentNode) parentNode.removeChild(node);\n\t\treturn this.addRef('children', node);\n\t}\n\n\t/** Removes a {@link Node} from the Scene. */\n\tpublic removeChild(node: Node): this {\n\t\treturn this.removeRef('children', node);\n\t}\n\n\t/**\n\t * Lists all direct child {@link Node Nodes} in the Scene. Indirect\n\t * descendants (children of children) are not returned, but may be\n\t * reached recursively or with {@link Scene.traverse} instead.\n\t */\n\tpublic listChildren(): Node[] {\n\t\treturn this.listRefs('children');\n\t}\n\n\t/** Visits each {@link Node} in the Scene, including descendants, top-down. */\n\tpublic traverse(fn: (node: Node) => void): this {\n\t\tfor (const node of this.listChildren()) node.traverse(fn);\n\t\treturn this;\n\t}\n}\n", "import { RefSet } from 'property-graph';\nimport { BufferViewUsage, Nullable, PropertyType } from '../constants.js';\nimport type { Accessor } from './accessor.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { Node } from './node.js';\n\ninterface ISkin extends IExtensibleProperty {\n\tskeleton: Node;\n\tinverseBindMatrices: Accessor;\n\tjoints: RefSet<Node>;\n}\n\n/**\n * *Collection of {@link Node} joints and inverse bind matrices used with skinned {@link Mesh}\n * instances.*\n *\n * Reference\n * - [glTF → Skins](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#skins)\n *\n * @category Properties\n */\nexport class Skin extends ExtensibleProperty<ISkin> {\n\tpublic declare propertyType: PropertyType.SKIN;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.SKIN;\n\t}\n\n\tprotected getDefaults(): Nullable<ISkin> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tskeleton: null,\n\t\t\tinverseBindMatrices: null,\n\t\t\tjoints: new RefSet<Node>(),\n\t\t});\n\t}\n\n\t/**\n\t * {@link Node} used as a skeleton root. The node must be the closest common root of the joints\n\t * hierarchy or a direct or indirect parent node of the closest common root.\n\t */\n\tpublic getSkeleton(): Node | null {\n\t\treturn this.getRef('skeleton');\n\t}\n\n\t/**\n\t * {@link Node} used as a skeleton root. The node must be the closest common root of the joints\n\t * hierarchy or a direct or indirect parent node of the closest common root.\n\t */\n\tpublic setSkeleton(skeleton: Node | null): this {\n\t\treturn this.setRef('skeleton', skeleton);\n\t}\n\n\t/**\n\t * {@link Accessor} containing the floating-point 4x4 inverse-bind matrices. The default is\n\t * that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were\n\t * pre-applied.\n\t */\n\tpublic getInverseBindMatrices(): Accessor | null {\n\t\treturn this.getRef('inverseBindMatrices');\n\t}\n\n\t/**\n\t * {@link Accessor} containing the floating-point 4x4 inverse-bind matrices. The default is\n\t * that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were\n\t * pre-applied.\n\t */\n\tpublic setInverseBindMatrices(inverseBindMatrices: Accessor | null): this {\n\t\treturn this.setRef('inverseBindMatrices', inverseBindMatrices, {\n\t\t\tusage: BufferViewUsage.INVERSE_BIND_MATRICES,\n\t\t});\n\t}\n\n\t/** Adds a joint {@link Node} to this {@link Skin}. */\n\tpublic addJoint(joint: Node): this {\n\t\treturn this.addRef('joints', joint);\n\t}\n\n\t/** Removes a joint {@link Node} from this {@link Skin}. */\n\tpublic removeJoint(joint: Node): this {\n\t\treturn this.removeRef('joints', joint);\n\t}\n\n\t/** Lists joints ({@link Node}s used as joints or bones) in this {@link Skin}. */\n\tpublic listJoints(): Node[] {\n\t\treturn this.listRefs('joints');\n\t}\n}\n", "import { Nullable, PropertyType, vec2 } from '../constants.js';\nimport { BufferUtils, FileUtils, ImageUtils } from '../utils/index.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\n\ninterface ITexture extends IExtensibleProperty {\n\timage: Uint8Array | null;\n\tmimeType: string;\n\turi: string;\n}\n\n/**\n * *Texture, or images, referenced by {@link Material} properties.*\n *\n * Textures in glTF Transform are a combination of glTF's `texture` and `image` properties, and\n * should be unique within a document, such that no other texture contains the same\n * {@link Texture.getImage getImage()} data. Where duplicates may already exist, the `dedup({textures: true})`\n * transform can remove them. A {@link Document} with N texture properties will be exported to a\n * glTF file with N `image` properties, and the minimum number of `texture` properties necessary\n * for the materials that use it.\n *\n * For properties associated with a particular _use_ of a texture, see {@link TextureInfo}.\n *\n * Reference:\n * - [glTF → Textures](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#textures)\n * - [glTF → Images](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#images)\n *\n * @category Properties\n */\nexport class Texture extends ExtensibleProperty<ITexture> {\n\tpublic declare propertyType: PropertyType.TEXTURE;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.TEXTURE;\n\t}\n\n\tprotected getDefaults(): Nullable<ITexture> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { image: null, mimeType: '', uri: '' });\n\t}\n\n\t/**********************************************************************************************\n\t * MIME type / format.\n\t */\n\n\t/** Returns the MIME type for this texture ('image/jpeg' or 'image/png'). */\n\tpublic getMimeType(): string {\n\t\treturn this.get('mimeType') || ImageUtils.extensionToMimeType(FileUtils.extension(this.get('uri')));\n\t}\n\n\t/**\n\t * Sets the MIME type for this texture ('image/jpeg' or 'image/png'). If the texture does not\n\t * have a URI, a MIME type is required for correct export.\n\t */\n\tpublic setMimeType(mimeType: string): this {\n\t\treturn this.set('mimeType', mimeType);\n\t}\n\n\t/**********************************************************************************************\n\t * URI / filename.\n\t */\n\n\t/** Returns the URI (e.g. 'path/to/file.png') for this texture. */\n\tpublic getURI(): string {\n\t\treturn this.get('uri');\n\t}\n\n\t/**\n\t * Sets the URI (e.g. 'path/to/file.png') for this texture. If the texture does not have a MIME\n\t * type, a URI is required for correct export.\n\t */\n\tpublic setURI(uri: string): this {\n\t\tthis.set('uri', uri);\n\t\tconst mimeType = ImageUtils.extensionToMimeType(FileUtils.extension(uri));\n\t\tif (mimeType) this.set('mimeType', mimeType);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Image data.\n\t */\n\n\t/** Returns the raw image data for this texture. */\n\tpublic getImage(): Uint8Array | null {\n\t\treturn this.get('image');\n\t}\n\n\t/** Sets the raw image data for this texture. */\n\tpublic setImage(image: Uint8Array): this {\n\t\treturn this.set('image', BufferUtils.assertView(image));\n\t}\n\n\t/** Returns the size, in pixels, of this texture. */\n\tpublic getSize(): vec2 | null {\n\t\tconst image = this.get('image');\n\t\tif (!image) return null;\n\t\treturn ImageUtils.getSize(image, this.getMimeType());\n\t}\n}\n", "import { Nullable, PropertyType, VERSION } from '../constants.js';\nimport type { Extension } from '../extension.js';\nimport type { Graph } from 'property-graph';\nimport { RefSet } from 'property-graph';\nimport { Accessor } from './accessor.js';\nimport { Animation } from './animation.js';\nimport { Buffer } from './buffer.js';\nimport { Camera } from './camera.js';\nimport { Material } from './material.js';\nimport { Mesh } from './mesh.js';\nimport { Node } from './node.js';\nimport { COPY_IDENTITY, Property } from './property.js';\nimport { Scene } from './scene.js';\nimport { Skin } from './skin.js';\nimport { Texture } from './texture.js';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property.js';\nimport type { ExtensionProperty } from './extension-property.js';\n\ninterface IAsset {\n\tversion: string;\n\tminVersion?: string;\n\tgenerator?: string;\n\tcopyright?: string;\n\t[key: string]: unknown;\n}\n\ninterface IRoot extends IExtensibleProperty {\n\tasset: IAsset;\n\tdefaultScene: Scene;\n\n\taccessors: RefSet<Accessor>;\n\tanimations: RefSet<Animation>;\n\tbuffers: RefSet<Buffer>;\n\tcameras: RefSet<Camera>;\n\tmaterials: RefSet<Material>;\n\tmeshes: RefSet<Mesh>;\n\tnodes: RefSet<Node>;\n\tscenes: RefSet<Scene>;\n\tskins: RefSet<Skin>;\n\ttextures: RefSet<Texture>;\n}\n\n/**\n * *Root property of a glTF asset.*\n *\n * Any properties to be exported with a particular asset must be referenced (directly or\n * indirectly) by the root. Metadata about the asset's license, generator, and glTF specification\n * version are stored in the asset, accessible with {@link Root.getAsset}.\n *\n * Properties are added to the root with factory methods on its {@link Document}, and removed by\n * calling {@link Property.dispose}() on the resource. Any properties that have been created but\n * not disposed will be included when calling the various `root.list*()` methods.\n *\n * A document's root cannot be removed, and no other root may be created. Unlike other\n * {@link Property} types, the `.dispose()`, `.detach()` methods have no useful function on a\n * Root property.\n *\n * Usage:\n *\n * ```ts\n * const root = document.getRoot();\n * const scene = document.createScene('myScene');\n * const node = document.createNode('myNode');\n * scene.addChild(node);\n *\n * console.log(root.listScenes()); // → [scene x 1]\n * ```\n *\n * Reference: [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Properties\n */\nexport class Root extends ExtensibleProperty<IRoot> {\n\tpublic declare propertyType: PropertyType.ROOT;\n\n\tprivate readonly _extensions: Set<Extension> = new Set();\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ROOT;\n\t}\n\n\tprotected getDefaults(): Nullable<IRoot> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tasset: {\n\t\t\t\tgenerator: `glTF-Transform ${VERSION}`,\n\t\t\t\tversion: '2.0',\n\t\t\t},\n\t\t\tdefaultScene: null,\n\t\t\taccessors: new RefSet<Accessor>(),\n\t\t\tanimations: new RefSet<Animation>(),\n\t\t\tbuffers: new RefSet<Buffer>(),\n\t\t\tcameras: new RefSet<Camera>(),\n\t\t\tmaterials: new RefSet<Material>(),\n\t\t\tmeshes: new RefSet<Mesh>(),\n\t\t\tnodes: new RefSet<Node>(),\n\t\t\tscenes: new RefSet<Scene>(),\n\t\t\tskins: new RefSet<Skin>(),\n\t\t\ttextures: new RefSet<Texture>(),\n\t\t});\n\t}\n\n\t/** @internal */\n\tconstructor(graph: Graph<Property>) {\n\t\tsuper(graph);\n\t\tgraph.addEventListener('node:create', (event) => {\n\t\t\tthis._addChildOfRoot(event.target as Property);\n\t\t});\n\t}\n\n\tpublic clone(): this {\n\t\tthrow new Error('Root cannot be cloned.');\n\t}\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\t// Root cannot be cloned in isolation: only with its Document. Extensions are managed by\n\t\t// the Document during cloning. The Root, and only the Root, should keep existing\n\t\t// references while copying to avoid overwriting during a merge.\n\t\tif (resolve === COPY_IDENTITY) throw new Error('Root cannot be copied.');\n\n\t\t// IMPORTANT: Root cannot call super.copy(), which removes existing references.\n\n\t\tthis.set('asset', { ...other.get('asset') });\n\t\tthis.setName(other.getName());\n\t\tthis.setExtras({ ...other.getExtras() });\n\t\tthis.setDefaultScene(other.getDefaultScene() ? resolve(other.getDefaultScene()!) : null);\n\n\t\tfor (const extensionName of other.listRefMapKeys('extensions')) {\n\t\t\tconst otherExtension = other.getExtension(extensionName) as ExtensionProperty;\n\t\t\tthis.setExtension(extensionName, resolve(otherExtension));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprivate _addChildOfRoot(child: Property): this {\n\t\tif (child instanceof Scene) {\n\t\t\tthis.addRef('scenes', child);\n\t\t} else if (child instanceof Node) {\n\t\t\tthis.addRef('nodes', child);\n\t\t} else if (child instanceof Camera) {\n\t\t\tthis.addRef('cameras', child);\n\t\t} else if (child instanceof Skin) {\n\t\t\tthis.addRef('skins', child);\n\t\t} else if (child instanceof Mesh) {\n\t\t\tthis.addRef('meshes', child);\n\t\t} else if (child instanceof Material) {\n\t\t\tthis.addRef('materials', child);\n\t\t} else if (child instanceof Texture) {\n\t\t\tthis.addRef('textures', child);\n\t\t} else if (child instanceof Animation) {\n\t\t\tthis.addRef('animations', child);\n\t\t} else if (child instanceof Accessor) {\n\t\t\tthis.addRef('accessors', child);\n\t\t} else if (child instanceof Buffer) {\n\t\t\tthis.addRef('buffers', child);\n\t\t}\n\t\t// No error for untracked property types.\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the `asset` object, which specifies the target glTF version of the asset. Additional\n\t * metadata can be stored in optional properties such as `generator` or `copyright`.\n\t *\n\t * Reference: [glTF → Asset](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#asset)\n\t */\n\tpublic getAsset(): IAsset {\n\t\treturn this.get('asset');\n\t}\n\n\t/**********************************************************************************************\n\t * Extensions.\n\t */\n\n\t/** Lists all {@link Extension Extensions} enabled for this root. */\n\tpublic listExtensionsUsed(): Extension[] {\n\t\treturn Array.from(this._extensions);\n\t}\n\n\t/** Lists all {@link Extension Extensions} enabled and required for this root. */\n\tpublic listExtensionsRequired(): Extension[] {\n\t\treturn this.listExtensionsUsed().filter((extension) => extension.isRequired());\n\t}\n\n\t/** @internal */\n\tpublic _enableExtension(extension: Extension): this {\n\t\tthis._extensions.add(extension);\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tpublic _disableExtension(extension: Extension): this {\n\t\tthis._extensions.delete(extension);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Properties.\n\t */\n\n\t/** Lists all {@link Scene} properties associated with this root. */\n\tpublic listScenes(): Scene[] {\n\t\treturn this.listRefs('scenes');\n\t}\n\n\t/** Default {@link Scene} associated with this root. */\n\tpublic setDefaultScene(defaultScene: Scene | null): this {\n\t\treturn this.setRef('defaultScene', defaultScene);\n\t}\n\n\t/** Default {@link Scene} associated with this root. */\n\tpublic getDefaultScene(): Scene | null {\n\t\treturn this.getRef('defaultScene');\n\t}\n\n\t/** Lists all {@link Node} properties associated with this root. */\n\tpublic listNodes(): Node[] {\n\t\treturn this.listRefs('nodes');\n\t}\n\n\t/** Lists all {@link Camera} properties associated with this root. */\n\tpublic listCameras(): Camera[] {\n\t\treturn this.listRefs('cameras');\n\t}\n\n\t/** Lists all {@link Skin} properties associated with this root. */\n\tpublic listSkins(): Skin[] {\n\t\treturn this.listRefs('skins');\n\t}\n\n\t/** Lists all {@link Mesh} properties associated with this root. */\n\tpublic listMeshes(): Mesh[] {\n\t\treturn this.listRefs('meshes');\n\t}\n\n\t/** Lists all {@link Material} properties associated with this root. */\n\tpublic listMaterials(): Material[] {\n\t\treturn this.listRefs('materials');\n\t}\n\n\t/** Lists all {@link Texture} properties associated with this root. */\n\tpublic listTextures(): Texture[] {\n\t\treturn this.listRefs('textures');\n\t}\n\n\t/** Lists all {@link Animation} properties associated with this root. */\n\tpublic listAnimations(): Animation[] {\n\t\treturn this.listRefs('animations');\n\t}\n\n\t/** Lists all {@link Accessor} properties associated with this root. */\n\tpublic listAccessors(): Accessor[] {\n\t\treturn this.listRefs('accessors');\n\t}\n\n\t/** Lists all {@link Buffer} properties associated with this root. */\n\tpublic listBuffers(): Buffer[] {\n\t\treturn this.listRefs('buffers');\n\t}\n}\n", "import type { Extension } from './extension.js';\nimport { Graph } from 'property-graph';\nimport {\n\tAccessor,\n\tAnimation,\n\tAnimationChannel,\n\tAnimationSampler,\n\tBuffer,\n\tCamera,\n\tMaterial,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tRoot,\n\tScene,\n\tSkin,\n\tTexture,\n} from './properties/index.js';\nimport { ILogger, Logger } from './utils/index.js';\n\nexport interface TransformContext {\n\tstack: string[];\n}\n\nexport type Transform = (doc: Document, context?: TransformContext) => void;\n\n/**\n * *Wraps a glTF asset and its resources for easier modification.*\n *\n * Documents manage glTF assets and the relationships among dependencies. The document wrapper\n * allow tools to read and write changes without dealing with array indices or byte offsets, which\n * would otherwise require careful management over the course of a file modification. An internal\n * graph structure allows any property in the glTF file to maintain references to its dependencies,\n * and makes it easy to determine where a particular property dependency is being used. For\n * example, finding a list of materials that use a particular texture is as simple as calling\n * {@link Texture.listParents}().\n *\n * A new resource {@link Property} (e.g. a {@link Mesh} or {@link Material}) is created by calling\n * 'create' methods on the document. Resources are destroyed by calling {@link Property.dispose}().\n *\n * ```ts\n * import fs from 'fs/promises';\n * import { Document } from '@gltf-transform/core';\n * import { dedup } from '@gltf-transform/functions';\n *\n * const document = new Document();\n *\n * const texture1 = document.createTexture('myTexture')\n * \t.setImage(await fs.readFile('path/to/image.png'))\n * \t.setMimeType('image/png');\n * const texture2 = document.createTexture('myTexture2')\n * \t.setImage(await fs.readFile('path/to/image2.png'))\n * \t.setMimeType('image/png');\n *\n * // Document containing duplicate copies of the same texture.\n * document.getRoot().listTextures(); // → [texture x 2]\n *\n * await document.transform(\n * \tdedup({textures: true}),\n * \t// ...\n * );\n *\n * // Document with duplicate textures removed.\n * document.getRoot().listTextures(); // → [texture x 1]\n * ```\n *\n * Reference:\n * - [glTF → Basics](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#gltf-basics)\n * - [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Documents\n */\nexport class Document {\n\tprivate _graph: Graph<Property> = new Graph<Property>();\n\tprivate _root: Root = new Root(this._graph);\n\tprivate _logger: ILogger = Logger.DEFAULT_INSTANCE;\n\n\t/**\n\t * Enables lookup of a Document from its Graph. For internal use, only.\n\t * @internal\n\t * @experimental\n\t */\n\tprivate static _GRAPH_DOCUMENTS = new WeakMap<Graph<Property>, Document>();\n\n\t/**\n\t * Returns the Document associated with a given Graph, if any.\n\t * @hidden\n\t * @experimental\n\t */\n\tpublic static fromGraph(graph: Graph<Property>): Document | null {\n\t\treturn Document._GRAPH_DOCUMENTS.get(graph) || null;\n\t}\n\n\t/** Creates a new Document, representing an empty glTF asset. */\n\tpublic constructor() {\n\t\tDocument._GRAPH_DOCUMENTS.set(this._graph, this);\n\t}\n\n\t/** Returns the glTF {@link Root} property. */\n\tpublic getRoot(): Root {\n\t\treturn this._root;\n\t}\n\n\t/**\n\t * Returns the {@link Graph} representing connectivity of resources within this document.\n\t * @hidden\n\t */\n\tpublic getGraph(): Graph<Property> {\n\t\treturn this._graph;\n\t}\n\n\t/** Returns the {@link Logger} instance used for any operations performed on this document. */\n\tpublic getLogger(): ILogger {\n\t\treturn this._logger;\n\t}\n\n\t/**\n\t * Overrides the {@link Logger} instance used for any operations performed on this document.\n\t *\n\t * Usage:\n\t *\n\t * ```ts\n\t * doc\n\t * \t.setLogger(new Logger(Logger.Verbosity.SILENT))\n\t * \t.transform(dedup(), weld());\n\t * ```\n\t */\n\tpublic setLogger(logger: ILogger): Document {\n\t\tthis._logger = logger;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clones this Document, copying all resources within it.\n\t * @deprecated Use 'cloneDocument(document)' from '@gltf-transform/functions'.\n\t * @hidden\n\t * @internal\n\t */\n\tpublic clone(): Document {\n\t\tthrow new Error(`Use 'cloneDocument(source)' from '@gltf-transform/functions'.`);\n\t}\n\n\t/**\n\t * Merges the content of another Document into this one, without affecting the original.\n\t * @deprecated Use 'mergeDocuments(target, source)' from '@gltf-transform/functions'.\n\t * @hidden\n\t * @internal\n\t */\n\tpublic merge(_other: Document): this {\n\t\tthrow new Error(`Use 'mergeDocuments(target, source)' from '@gltf-transform/functions'.`);\n\t}\n\n\t/**\n\t * Applies a series of modifications to this document. Each transformation is asynchronous,\n\t * takes the {@link Document} as input, and returns nothing. Transforms are applied in the\n\t * order given, which may affect the final result.\n\t *\n\t * Usage:\n\t *\n\t * ```ts\n\t * await doc.transform(\n\t * \tdedup(),\n\t * \tprune()\n\t * );\n\t * ```\n\t *\n\t * @param transforms List of synchronous transformation functions to apply.\n\t */\n\tpublic async transform(...transforms: Transform[]): Promise<this> {\n\t\tconst stack = transforms.map((fn) => fn.name);\n\t\tfor (const transform of transforms) {\n\t\t\tawait transform(this, { stack });\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Extension factory method.\n\t */\n\n\t/**\n\t * Creates a new {@link Extension}, for the extension type of the given constructor. If the\n\t * extension is already enabled for this Document, the previous Extension reference is reused.\n\t */\n\tcreateExtension<T extends Extension>(ctor: new (doc: Document) => T): T {\n\t\tconst extensionName = (ctor as unknown as { EXTENSION_NAME: 'string' }).EXTENSION_NAME;\n\t\tconst prevExtension = this.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.find((ext) => ext.extensionName === extensionName);\n\t\treturn (prevExtension || new ctor(this)) as T;\n\t}\n\n\t/**********************************************************************************************\n\t * Property factory methods.\n\t */\n\n\t/** Creates a new {@link Scene} attached to this document's {@link Root}. */\n\tcreateScene(name = ''): Scene {\n\t\treturn new Scene(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Node} attached to this document's {@link Root}. */\n\tcreateNode(name = ''): Node {\n\t\treturn new Node(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Camera} attached to this document's {@link Root}. */\n\tcreateCamera(name = ''): Camera {\n\t\treturn new Camera(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Skin} attached to this document's {@link Root}. */\n\tcreateSkin(name = ''): Skin {\n\t\treturn new Skin(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Mesh} attached to this document's {@link Root}. */\n\tcreateMesh(name = ''): Mesh {\n\t\treturn new Mesh(this._graph, name);\n\t}\n\n\t/**\n\t * Creates a new {@link Primitive}. Primitives must be attached to a {@link Mesh}\n\t * for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreatePrimitive(): Primitive {\n\t\treturn new Primitive(this._graph);\n\t}\n\n\t/**\n\t * Creates a new {@link PrimitiveTarget}, or morph target. Targets must be attached to a\n\t * {@link Primitive} for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreatePrimitiveTarget(name = ''): PrimitiveTarget {\n\t\treturn new PrimitiveTarget(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Material} attached to this document's {@link Root}. */\n\tcreateMaterial(name = ''): Material {\n\t\treturn new Material(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Texture} attached to this document's {@link Root}. */\n\tcreateTexture(name = ''): Texture {\n\t\treturn new Texture(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Animation} attached to this document's {@link Root}. */\n\tcreateAnimation(name = ''): Animation {\n\t\treturn new Animation(this._graph, name);\n\t}\n\n\t/**\n\t * Creates a new {@link AnimationChannel}. Channels must be attached to an {@link Animation}\n\t * for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreateAnimationChannel(name = ''): AnimationChannel {\n\t\treturn new AnimationChannel(this._graph, name);\n\t}\n\n\t/**\n\t * Creates a new {@link AnimationSampler}. Samplers must be attached to an {@link Animation}\n\t * for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreateAnimationSampler(name = ''): AnimationSampler {\n\t\treturn new AnimationSampler(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Accessor} attached to this document's {@link Root}. */\n\tcreateAccessor(name = '', buffer: Buffer | null = null): Accessor {\n\t\tif (!buffer) {\n\t\t\tbuffer = this.getRoot().listBuffers()[0];\n\t\t}\n\t\treturn new Accessor(this._graph, name).setBuffer(buffer);\n\t}\n\n\t/** Creates a new {@link Buffer} attached to this document's {@link Root}. */\n\tcreateBuffer(name = ''): Buffer {\n\t\treturn new Buffer(this._graph, name);\n\t}\n}\n", "import type { GraphEdgeEvent, GraphEvent, GraphNodeEvent } from 'property-graph';\nimport type { PropertyType } from './constants.js';\nimport type { Document } from './document.js';\nimport type { ReaderContext, WriterContext } from './io/index.js';\nimport { ExtensionProperty } from './properties/index.js';\n\n/**\n * *Base class for all Extensions.*\n *\n * Extensions enhance a glTF {@link Document} with additional features and schema, beyond the core\n * glTF specification. Common extensions may be imported from the `@gltf-transform/extensions`\n * package, or custom extensions may be created by extending this base class.\n *\n * An extension is added to a Document by calling {@link Document.createExtension} with the\n * extension constructor. The extension object may then be used to construct\n * {@link ExtensionProperty} instances, which are attached to properties throughout the Document\n * as prescribed by the extension itself.\n *\n * For more information on available extensions and their usage, see [Extensions](/extensions).\n *\n * Reference:\n * - [glTF → Extensions](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#specifying-extensions)\n * - [glTF Extension Registry](https://github.com/KhronosGroup/gltf/blob/main/extensions)\n *\n * @category Extensions\n */\nexport abstract class Extension {\n\t/** Official name of the extension. */\n\tpublic static EXTENSION_NAME: string;\n\t/** Official name of the extension. */\n\tpublic readonly extensionName: string = '';\n\t/**\n\t * Before reading, extension should be called for these {@link Property} types. *Most\n\t * extensions don't need to implement this.*\n\t * @hidden\n\t */\n\tpublic readonly prereadTypes: PropertyType[] = [];\n\t/**\n\t * Before writing, extension should be called for these {@link Property} types. *Most\n\t * extensions don't need to implement this.*\n\t * @hidden\n\t */\n\tpublic readonly prewriteTypes: PropertyType[] = [];\n\n\t/** @hidden Dependency IDs needed to read this extension, to be installed before I/O. */\n\tpublic readonly readDependencies: string[] = [];\n\t/** @hidden Dependency IDs needed to write this extension, to be installed before I/O. */\n\tpublic readonly writeDependencies: string[] = [];\n\n\t/** @hidden */\n\tprotected readonly document: Document;\n\n\t/** @hidden */\n\tprotected required = false;\n\n\t/** @hidden */\n\tprotected properties: Set<ExtensionProperty> = new Set();\n\n\t/** @hidden */\n\tprivate _listener: (event: unknown) => void;\n\n\t/** @hidden */\n\tconstructor(document: Document) {\n\t\tthis.document = document;\n\n\t\tdocument.getRoot()._enableExtension(this);\n\n\t\tthis._listener = (_event: unknown): void => {\n\t\t\tconst event = _event as GraphNodeEvent | GraphEdgeEvent | GraphEvent;\n\t\t\tconst target = event.target as ExtensionProperty | unknown;\n\t\t\tif (target instanceof ExtensionProperty && target.extensionName === this.extensionName) {\n\t\t\t\tif (event.type === 'node:create') this._addExtensionProperty(target);\n\t\t\t\tif (event.type === 'node:dispose') this._removeExtensionProperty(target);\n\t\t\t}\n\t\t};\n\n\t\tconst graph = document.getGraph();\n\t\tgraph.addEventListener('node:create', this._listener);\n\t\tgraph.addEventListener('node:dispose', this._listener);\n\t}\n\n\t/** Disables and removes the extension from the Document. */\n\tpublic dispose(): void {\n\t\tthis.document.getRoot()._disableExtension(this);\n\t\tconst graph = this.document.getGraph();\n\t\tgraph.removeEventListener('node:create', this._listener);\n\t\tgraph.removeEventListener('node:dispose', this._listener);\n\t\tfor (const property of this.properties) {\n\t\t\tproperty.dispose();\n\t\t}\n\t}\n\n\t/** @hidden Performs first-time setup for the extension. Must be idempotent. */\n\tpublic static register(): void {}\n\n\t/**\n\t * Indicates to the client whether it is OK to load the asset when this extension is not\n\t * recognized. Optional extensions are generally preferred, if there is not a good reason\n\t * to require a client to completely fail when an extension isn't known.\n\t */\n\tpublic isRequired(): boolean {\n\t\treturn this.required;\n\t}\n\n\t/**\n\t * Indicates to the client whether it is OK to load the asset when this extension is not\n\t * recognized. Optional extensions are generally preferred, if there is not a good reason\n\t * to require a client to completely fail when an extension isn't known.\n\t */\n\tpublic setRequired(required: boolean): this {\n\t\tthis.required = required;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lists all {@link ExtensionProperty} instances associated with, or created by, this\n\t * extension. Includes only instances that are attached to the Document's graph; detached\n\t * instances will be excluded.\n\t */\n\tpublic listProperties(): ExtensionProperty[] {\n\t\treturn Array.from(this.properties);\n\t}\n\n\t/**********************************************************************************************\n\t * ExtensionProperty management.\n\t */\n\n\t/** @internal */\n\tprivate _addExtensionProperty(property: ExtensionProperty): this {\n\t\tthis.properties.add(property);\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tprivate _removeExtensionProperty(property: ExtensionProperty): this {\n\t\tthis.properties.delete(property);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * I/O implementation.\n\t */\n\n\t/** @hidden Installs dependencies required by the extension. */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic install(key: string, dependency: unknown): this {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when reading a glTF asset. This method may\n\t * optionally be implemented by an extension, and should then support any property type\n\t * declared by the Extension's {@link Extension.prereadTypes} list. The Extension will\n\t * be given a ReaderContext instance, and is expected to update either the context or its\n\t * {@link JSONDocument} with resources known to the Extension. *Most extensions don't need to\n\t * implement this.*\n\t * @hidden\n\t */\n\tpublic preread(_readerContext: ReaderContext, _propertyType: PropertyType): this {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when writing a glTF asset. This method may\n\t * optionally be implemented by an extension, and should then support any property type\n\t * declared by the Extension's {@link Extension.prewriteTypes} list. The Extension will\n\t * be given a WriterContext instance, and is expected to update either the context or its\n\t * {@link JSONDocument} with resources known to the Extension. *Most extensions don't need to\n\t * implement this.*\n\t * @hidden\n\t */\n\tpublic prewrite(_writerContext: WriterContext, _propertyType: PropertyType): this {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when reading a glTF asset. This method must be\n\t * implemented by each extension in order to support reading files. The extension will be\n\t * given a ReaderContext instance, and should update the current {@link Document} accordingly.\n\t * @hidden\n\t */\n\tpublic abstract read(readerContext: ReaderContext): this;\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when writing a glTF asset. This method must be\n\t * implemented by each extension in order to support writing files. The extension will be\n\t * given a WriterContext instance, and should modify the {@link JSONDocument} output\n\t * accordingly. Adding the extension name to the `extensionsUsed` and `extensionsRequired` list\n\t * is done automatically, and should not be included here.\n\t * @hidden\n\t */\n\tpublic abstract write(writerContext: WriterContext): this;\n}\n", "import type { JSONDocument } from '../json-document.js';\nimport type {\n\tAccessor,\n\tAnimation,\n\tBuffer,\n\tCamera,\n\tMaterial,\n\tMesh,\n\tNode,\n\tScene,\n\tSkin,\n\tTexture,\n\tTextureInfo,\n} from '../properties/index.js';\nimport type { GLTF } from '../types/gltf.js';\n\n/**\n * Model class providing glTF Transform objects representing each definition in the glTF file, used\n * by a {@link GLTFReader} and its {@link Extension} implementations. Indices of all properties will be\n * consistent with the glTF file.\n *\n * @hidden\n */\nexport class ReaderContext {\n\tpublic buffers: Buffer[] = [];\n\tpublic bufferViews: Uint8Array[] = [];\n\tpublic bufferViewBuffers: Buffer[] = [];\n\tpublic accessors: Accessor[] = [];\n\tpublic textures: Texture[] = [];\n\tpublic textureInfos: Map<TextureInfo, GLTF.ITextureInfo> = new Map();\n\tpublic materials: Material[] = [];\n\tpublic meshes: Mesh[] = [];\n\tpublic cameras: Camera[] = [];\n\tpublic nodes: Node[] = [];\n\tpublic skins: Skin[] = [];\n\tpublic animations: Animation[] = [];\n\tpublic scenes: Scene[] = [];\n\n\tconstructor(public readonly jsonDoc: JSONDocument) {}\n\n\tpublic setTextureInfo(textureInfo: TextureInfo, textureInfoDef: GLTF.ITextureInfo): void {\n\t\tthis.textureInfos.set(textureInfo, textureInfoDef);\n\n\t\tif (textureInfoDef.texCoord !== undefined) {\n\t\t\ttextureInfo.setTexCoord(textureInfoDef.texCoord);\n\t\t}\n\t\tif (textureInfoDef.extras !== undefined) {\n\t\t\ttextureInfo.setExtras(textureInfoDef.extras);\n\t\t}\n\n\t\tconst textureDef = this.jsonDoc.json.textures![textureInfoDef.index];\n\n\t\tif (textureDef.sampler === undefined) return;\n\n\t\tconst samplerDef = this.jsonDoc.json.samplers![textureDef.sampler];\n\n\t\tif (samplerDef.magFilter !== undefined) {\n\t\t\ttextureInfo.setMagFilter(samplerDef.magFilter);\n\t\t}\n\t\tif (samplerDef.minFilter !== undefined) {\n\t\t\ttextureInfo.setMinFilter(samplerDef.minFilter);\n\t\t}\n\t\tif (samplerDef.wrapS !== undefined) {\n\t\t\ttextureInfo.setWrapS(samplerDef.wrapS);\n\t\t}\n\t\tif (samplerDef.wrapT !== undefined) {\n\t\t\ttextureInfo.setWrapT(samplerDef.wrapT);\n\t\t}\n\t}\n}\n", "import { GLB_BUFFER, PropertyType, TypedArray, mat4, vec3, vec4, ComponentTypeToTypedArray } from '../constants.js';\nimport { Document } from '../document.js';\nimport type { Extension } from '../extension.js';\nimport type { JSONDocument } from '../json-document.js';\nimport { Accessor, AnimationSampler, Camera } from '../properties/index.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { BufferUtils, FileUtils, ILogger, ImageUtils, Logger, MathUtils } from '../utils/index.js';\nimport { ReaderContext } from './reader-context.js';\n\nexport interface ReaderOptions {\n\tlogger?: ILogger;\n\textensions: (typeof Extension)[];\n\tdependencies: { [key: string]: unknown };\n}\n\nconst DEFAULT_OPTIONS: ReaderOptions = {\n\tlogger: Logger.DEFAULT_INSTANCE,\n\textensions: [],\n\tdependencies: {},\n};\n\nconst SUPPORTED_PREREAD_TYPES = new Set<PropertyType>([\n\tPropertyType.BUFFER,\n\tPropertyType.TEXTURE,\n\tPropertyType.MATERIAL,\n\tPropertyType.MESH,\n\tPropertyType.PRIMITIVE,\n\tPropertyType.NODE,\n\tPropertyType.SCENE,\n]);\n\n/** @internal */\nexport class GLTFReader {\n\tpublic static read(jsonDoc: JSONDocument, _options: ReaderOptions = DEFAULT_OPTIONS): Document {\n\t\tconst options = { ...DEFAULT_OPTIONS, ..._options } as Required<ReaderOptions>;\n\t\tconst { json } = jsonDoc;\n\t\tconst document = new Document().setLogger(options.logger);\n\n\t\tthis.validate(jsonDoc, options);\n\n\t\t/* Reader context. */\n\n\t\tconst context = new ReaderContext(jsonDoc);\n\n\t\t/** Asset. */\n\n\t\tconst assetDef = json.asset;\n\t\tconst asset = document.getRoot().getAsset();\n\n\t\tif (assetDef.copyright) asset.copyright = assetDef.copyright;\n\t\tif (assetDef.extras) asset.extras = assetDef.extras;\n\n\t\tif (json.extras !== undefined) {\n\t\t\tdocument.getRoot().setExtras({ ...json.extras });\n\t\t}\n\n\t\t/** Extensions (1/2). */\n\n\t\tconst extensionsUsed = json.extensionsUsed || [];\n\t\tconst extensionsRequired = json.extensionsRequired || [];\n\n\t\toptions.extensions.sort((a, b) => (a.EXTENSION_NAME > b.EXTENSION_NAME ? 1 : -1));\n\n\t\tfor (const Extension of options.extensions) {\n\t\t\tif (extensionsUsed.includes(Extension.EXTENSION_NAME)) {\n\t\t\t\t// Create extension.\n\t\t\t\tconst extension = document\n\t\t\t\t\t.createExtension(Extension as unknown as new (doc: Document) => Extension)\n\t\t\t\t\t.setRequired(extensionsRequired.includes(Extension.EXTENSION_NAME));\n\n\t\t\t\t// Warn on unsupported preread hooks.\n\t\t\t\tconst unsupportedHooks = extension.prereadTypes.filter((type) => !SUPPORTED_PREREAD_TYPES.has(type));\n\t\t\t\tif (unsupportedHooks.length) {\n\t\t\t\t\toptions.logger.warn(\n\t\t\t\t\t\t`Preread hooks for some types (${unsupportedHooks.join()}), requested by extension ` +\n\t\t\t\t\t\t\t`${extension.extensionName}, are unsupported. Please file an issue or a PR.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Install dependencies.\n\t\t\t\tfor (const key of extension.readDependencies) {\n\t\t\t\t\textension.install(key, options.dependencies[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/** Buffers. */\n\n\t\tconst bufferDefs = json.buffers || [];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.BUFFER))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.BUFFER));\n\t\tcontext.buffers = bufferDefs.map((bufferDef) => {\n\t\t\tconst buffer = document.createBuffer(bufferDef.name);\n\n\t\t\tif (bufferDef.extras) buffer.setExtras(bufferDef.extras);\n\n\t\t\tif (bufferDef.uri && bufferDef.uri.indexOf('__') !== 0) {\n\t\t\t\tbuffer.setURI(bufferDef.uri);\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t});\n\n\t\t/** Buffer views. */\n\n\t\tconst bufferViewDefs = json.bufferViews || [];\n\t\tcontext.bufferViewBuffers = bufferViewDefs.map((bufferViewDef, index) => {\n\t\t\tif (!context.bufferViews[index]) {\n\t\t\t\tconst bufferDef = jsonDoc.json.buffers![bufferViewDef.buffer];\n\t\t\t\tconst resource = bufferDef.uri ? jsonDoc.resources[bufferDef.uri] : jsonDoc.resources[GLB_BUFFER];\n\t\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\tcontext.bufferViews[index] = BufferUtils.toView(resource, byteOffset, bufferViewDef.byteLength);\n\t\t\t}\n\n\t\t\treturn context.buffers[bufferViewDef.buffer];\n\t\t});\n\n\t\t/** Accessors. */\n\n\t\t// Accessor .count and .componentType properties are inferred dynamically.\n\t\tconst accessorDefs = json.accessors || [];\n\t\tcontext.accessors = accessorDefs.map((accessorDef) => {\n\t\t\tconst buffer = context.bufferViewBuffers[accessorDef.bufferView!];\n\t\t\tconst accessor = document.createAccessor(accessorDef.name, buffer).setType(accessorDef.type);\n\n\t\t\tif (accessorDef.extras) accessor.setExtras(accessorDef.extras);\n\n\t\t\tif (accessorDef.normalized !== undefined) {\n\t\t\t\taccessor.setNormalized(accessorDef.normalized);\n\t\t\t}\n\n\t\t\t// Sparse accessors, KHR_draco_mesh_compression, and EXT_meshopt_compression.\n\t\t\tif (accessorDef.bufferView === undefined) return accessor;\n\n\t\t\t// NOTICE: We mark sparse accessors at the end of the I/O reading process. Consider an\n\t\t\t// accessor to be 'sparse' if it (A) includes sparse value overrides, or (B) does not\n\t\t\t// define .bufferView _and_ no extension provides that data.\n\n\t\t\taccessor.setArray(getAccessorArray(accessorDef, context));\n\t\t\treturn accessor;\n\t\t});\n\n\t\t/** Textures. */\n\n\t\t// glTF Transform's \"Texture\" properties correspond 1:1 with glTF \"Image\" properties, and\n\t\t// with image files. The glTF file may contain more one texture per image, where images\n\t\t// are reused with different sampler properties.\n\t\tconst imageDefs = json.images || [];\n\t\tconst textureDefs = json.textures || [];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.TEXTURE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.TEXTURE));\n\t\tcontext.textures = imageDefs.map((imageDef) => {\n\t\t\tconst texture = document.createTexture(imageDef.name);\n\n\t\t\t// glTF Image corresponds 1:1 with glTF Transform Texture. See `writer.ts`.\n\t\t\tif (imageDef.extras) texture.setExtras(imageDef.extras);\n\n\t\t\tif (imageDef.bufferView !== undefined) {\n\t\t\t\tconst bufferViewDef = json.bufferViews![imageDef.bufferView];\n\t\t\t\tconst bufferDef = jsonDoc.json.buffers![bufferViewDef.buffer];\n\t\t\t\tconst bufferData = bufferDef.uri ? jsonDoc.resources[bufferDef.uri] : jsonDoc.resources[GLB_BUFFER];\n\t\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\tconst byteLength = bufferViewDef.byteLength;\n\t\t\t\tconst imageData = bufferData.slice(byteOffset, byteOffset + byteLength);\n\t\t\t\ttexture.setImage(imageData);\n\t\t\t} else if (imageDef.uri !== undefined) {\n\t\t\t\ttexture.setImage(jsonDoc.resources[imageDef.uri]);\n\t\t\t\tif (imageDef.uri.indexOf('__') !== 0) {\n\t\t\t\t\ttexture.setURI(imageDef.uri);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (imageDef.mimeType !== undefined) {\n\t\t\t\ttexture.setMimeType(imageDef.mimeType);\n\t\t\t} else if (imageDef.uri) {\n\t\t\t\tconst extension = FileUtils.extension(imageDef.uri);\n\t\t\t\ttexture.setMimeType(ImageUtils.extensionToMimeType(extension));\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t});\n\n\t\t/** Materials. */\n\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.MATERIAL))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.MATERIAL));\n\n\t\tconst materialDefs = json.materials || [];\n\t\tcontext.materials = materialDefs.map((materialDef) => {\n\t\t\tconst material = document.createMaterial(materialDef.name);\n\n\t\t\tif (materialDef.extras) material.setExtras(materialDef.extras);\n\n\t\t\t// Program state & blending.\n\n\t\t\tif (materialDef.alphaMode !== undefined) {\n\t\t\t\tmaterial.setAlphaMode(materialDef.alphaMode);\n\t\t\t}\n\n\t\t\tif (materialDef.alphaCutoff !== undefined) {\n\t\t\t\tmaterial.setAlphaCutoff(materialDef.alphaCutoff);\n\t\t\t}\n\n\t\t\tif (materialDef.doubleSided !== undefined) {\n\t\t\t\tmaterial.setDoubleSided(materialDef.doubleSided);\n\t\t\t}\n\n\t\t\t// Factors.\n\n\t\t\tconst pbrDef = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tif (pbrDef.baseColorFactor !== undefined) {\n\t\t\t\tmaterial.setBaseColorFactor(pbrDef.baseColorFactor as vec4);\n\t\t\t}\n\n\t\t\tif (materialDef.emissiveFactor !== undefined) {\n\t\t\t\tmaterial.setEmissiveFactor(materialDef.emissiveFactor as vec3);\n\t\t\t}\n\n\t\t\tif (pbrDef.metallicFactor !== undefined) {\n\t\t\t\tmaterial.setMetallicFactor(pbrDef.metallicFactor);\n\t\t\t}\n\n\t\t\tif (pbrDef.roughnessFactor !== undefined) {\n\t\t\t\tmaterial.setRoughnessFactor(pbrDef.roughnessFactor);\n\t\t\t}\n\n\t\t\t// Textures.\n\n\t\t\tif (pbrDef.baseColorTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = pbrDef.baseColorTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setBaseColorTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getBaseColorTextureInfo()!, textureInfoDef);\n\t\t\t}\n\n\t\t\tif (materialDef.emissiveTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = materialDef.emissiveTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setEmissiveTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getEmissiveTextureInfo()!, textureInfoDef);\n\t\t\t}\n\n\t\t\tif (materialDef.normalTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = materialDef.normalTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setNormalTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getNormalTextureInfo()!, textureInfoDef);\n\t\t\t\tif (materialDef.normalTexture.scale !== undefined) {\n\t\t\t\t\tmaterial.setNormalScale(materialDef.normalTexture.scale);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (materialDef.occlusionTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = materialDef.occlusionTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setOcclusionTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getOcclusionTextureInfo()!, textureInfoDef);\n\t\t\t\tif (materialDef.occlusionTexture.strength !== undefined) {\n\t\t\t\t\tmaterial.setOcclusionStrength(materialDef.occlusionTexture.strength);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (pbrDef.metallicRoughnessTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = pbrDef.metallicRoughnessTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setMetallicRoughnessTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getMetallicRoughnessTextureInfo()!, textureInfoDef);\n\t\t\t}\n\n\t\t\treturn material;\n\t\t});\n\n\t\t/** Meshes. */\n\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.MESH))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.MESH));\n\n\t\tconst meshDefs = json.meshes || [];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.PRIMITIVE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.PRIMITIVE));\n\t\tcontext.meshes = meshDefs.map((meshDef) => {\n\t\t\tconst mesh = document.createMesh(meshDef.name);\n\n\t\t\tif (meshDef.extras) mesh.setExtras(meshDef.extras);\n\n\t\t\tif (meshDef.weights !== undefined) {\n\t\t\t\tmesh.setWeights(meshDef.weights);\n\t\t\t}\n\n\t\t\tconst primitiveDefs = meshDef.primitives || [];\n\t\t\tprimitiveDefs.forEach((primitiveDef) => {\n\t\t\t\tconst primitive = document.createPrimitive();\n\n\t\t\t\tif (primitiveDef.extras) primitive.setExtras(primitiveDef.extras);\n\n\t\t\t\tif (primitiveDef.material !== undefined) {\n\t\t\t\t\tprimitive.setMaterial(context.materials[primitiveDef.material]);\n\t\t\t\t}\n\n\t\t\t\tif (primitiveDef.mode !== undefined) {\n\t\t\t\t\tprimitive.setMode(primitiveDef.mode);\n\t\t\t\t}\n\n\t\t\t\tfor (const [semantic, index] of Object.entries(primitiveDef.attributes || {})) {\n\t\t\t\t\tprimitive.setAttribute(semantic, context.accessors[index]);\n\t\t\t\t}\n\n\t\t\t\tif (primitiveDef.indices !== undefined) {\n\t\t\t\t\tprimitive.setIndices(context.accessors[primitiveDef.indices]);\n\t\t\t\t}\n\n\t\t\t\tconst targetNames: string[] = (meshDef.extras && (meshDef.extras.targetNames as string[])) || [];\n\t\t\t\tconst targetDefs = primitiveDef.targets || [];\n\t\t\t\ttargetDefs.forEach((targetDef, targetIndex) => {\n\t\t\t\t\tconst targetName = targetNames[targetIndex] || targetIndex.toString();\n\t\t\t\t\tconst target = document.createPrimitiveTarget(targetName);\n\n\t\t\t\t\tfor (const [semantic, accessorIndex] of Object.entries(targetDef)) {\n\t\t\t\t\t\ttarget.setAttribute(semantic, context.accessors[accessorIndex]);\n\t\t\t\t\t}\n\n\t\t\t\t\tprimitive.addTarget(target);\n\t\t\t\t});\n\n\t\t\t\tmesh.addPrimitive(primitive);\n\t\t\t});\n\n\t\t\treturn mesh;\n\t\t});\n\n\t\t/** Cameras. */\n\n\t\tconst cameraDefs = json.cameras || [];\n\t\tcontext.cameras = cameraDefs.map((cameraDef) => {\n\t\t\tconst camera = document.createCamera(cameraDef.name).setType(cameraDef.type);\n\n\t\t\tif (cameraDef.extras) camera.setExtras(cameraDef.extras);\n\n\t\t\tif (cameraDef.type === Camera.Type.PERSPECTIVE) {\n\t\t\t\tconst perspectiveDef = cameraDef.perspective!;\n\t\t\t\tcamera.setYFov(perspectiveDef.yfov);\n\t\t\t\tcamera.setZNear(perspectiveDef.znear);\n\t\t\t\tif (perspectiveDef.zfar !== undefined) {\n\t\t\t\t\tcamera.setZFar(perspectiveDef.zfar);\n\t\t\t\t}\n\t\t\t\tif (perspectiveDef.aspectRatio !== undefined) {\n\t\t\t\t\tcamera.setAspectRatio(perspectiveDef.aspectRatio);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst orthoDef = cameraDef.orthographic!;\n\t\t\t\tcamera.setZNear(orthoDef.znear).setZFar(orthoDef.zfar).setXMag(orthoDef.xmag).setYMag(orthoDef.ymag);\n\t\t\t}\n\t\t\treturn camera;\n\t\t});\n\n\t\t/** Nodes. */\n\n\t\tconst nodeDefs = json.nodes || [];\n\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.NODE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.NODE));\n\n\t\tcontext.nodes = nodeDefs.map((nodeDef) => {\n\t\t\tconst node = document.createNode(nodeDef.name);\n\n\t\t\tif (nodeDef.extras) node.setExtras(nodeDef.extras);\n\n\t\t\tif (nodeDef.translation !== undefined) {\n\t\t\t\tnode.setTranslation(nodeDef.translation as vec3);\n\t\t\t}\n\n\t\t\tif (nodeDef.rotation !== undefined) {\n\t\t\t\tnode.setRotation(nodeDef.rotation as vec4);\n\t\t\t}\n\n\t\t\tif (nodeDef.scale !== undefined) {\n\t\t\t\tnode.setScale(nodeDef.scale as vec3);\n\t\t\t}\n\n\t\t\tif (nodeDef.matrix !== undefined) {\n\t\t\t\tconst translation = [0, 0, 0] as vec3;\n\t\t\t\tconst rotation = [0, 0, 0, 1] as vec4;\n\t\t\t\tconst scale = [1, 1, 1] as vec3;\n\n\t\t\t\tMathUtils.decompose(nodeDef.matrix as mat4, translation, rotation, scale);\n\n\t\t\t\tnode.setTranslation(translation);\n\t\t\t\tnode.setRotation(rotation);\n\t\t\t\tnode.setScale(scale);\n\t\t\t}\n\n\t\t\tif (nodeDef.weights !== undefined) {\n\t\t\t\tnode.setWeights(nodeDef.weights);\n\t\t\t}\n\n\t\t\t// Attachments (mesh, camera, skin) defined later in reading process.\n\n\t\t\treturn node;\n\t\t});\n\n\t\t/** Skins. */\n\n\t\tconst skinDefs = json.skins || [];\n\t\tcontext.skins = skinDefs.map((skinDef) => {\n\t\t\tconst skin = document.createSkin(skinDef.name);\n\n\t\t\tif (skinDef.extras) skin.setExtras(skinDef.extras);\n\n\t\t\tif (skinDef.inverseBindMatrices !== undefined) {\n\t\t\t\tskin.setInverseBindMatrices(context.accessors[skinDef.inverseBindMatrices]);\n\t\t\t}\n\n\t\t\tif (skinDef.skeleton !== undefined) {\n\t\t\t\tskin.setSkeleton(context.nodes[skinDef.skeleton]);\n\t\t\t}\n\n\t\t\tfor (const nodeIndex of skinDef.joints) {\n\t\t\t\tskin.addJoint(context.nodes[nodeIndex]);\n\t\t\t}\n\n\t\t\treturn skin;\n\t\t});\n\n\t\t/** Node attachments. */\n\n\t\tnodeDefs.map((nodeDef, nodeIndex) => {\n\t\t\tconst node = context.nodes[nodeIndex];\n\n\t\t\tconst children = nodeDef.children || [];\n\t\t\tchildren.forEach((childIndex) => node.addChild(context.nodes[childIndex]));\n\n\t\t\tif (nodeDef.mesh !== undefined) node.setMesh(context.meshes[nodeDef.mesh]);\n\n\t\t\tif (nodeDef.camera !== undefined) node.setCamera(context.cameras[nodeDef.camera]);\n\n\t\t\tif (nodeDef.skin !== undefined) node.setSkin(context.skins[nodeDef.skin]);\n\t\t});\n\n\t\t/** Animations. */\n\n\t\tconst animationDefs = json.animations || [];\n\t\tcontext.animations = animationDefs.map((animationDef) => {\n\t\t\tconst animation = document.createAnimation(animationDef.name);\n\n\t\t\tif (animationDef.extras) animation.setExtras(animationDef.extras);\n\n\t\t\tconst samplerDefs = animationDef.samplers || [];\n\t\t\tconst samplers = samplerDefs.map((samplerDef) => {\n\t\t\t\tconst sampler = document\n\t\t\t\t\t.createAnimationSampler()\n\t\t\t\t\t.setInput(context.accessors[samplerDef.input])\n\t\t\t\t\t.setOutput(context.accessors[samplerDef.output])\n\t\t\t\t\t.setInterpolation(samplerDef.interpolation || AnimationSampler.Interpolation.LINEAR);\n\n\t\t\t\tif (samplerDef.extras) sampler.setExtras(samplerDef.extras);\n\n\t\t\t\tanimation.addSampler(sampler);\n\t\t\t\treturn sampler;\n\t\t\t});\n\n\t\t\tconst channels = animationDef.channels || [];\n\t\t\tchannels.forEach((channelDef) => {\n\t\t\t\tconst channel = document\n\t\t\t\t\t.createAnimationChannel()\n\t\t\t\t\t.setSampler(samplers[channelDef.sampler])\n\t\t\t\t\t.setTargetPath(channelDef.target.path);\n\n\t\t\t\tif (channelDef.target.node !== undefined) channel.setTargetNode(context.nodes[channelDef.target.node]);\n\t\t\t\tif (channelDef.extras) channel.setExtras(channelDef.extras);\n\n\t\t\t\tanimation.addChannel(channel);\n\t\t\t});\n\n\t\t\treturn animation;\n\t\t});\n\n\t\t/** Scenes. */\n\n\t\tconst sceneDefs = json.scenes || [];\n\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.SCENE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.SCENE));\n\n\t\tcontext.scenes = sceneDefs.map((sceneDef) => {\n\t\t\tconst scene = document.createScene(sceneDef.name);\n\n\t\t\tif (sceneDef.extras) scene.setExtras(sceneDef.extras);\n\n\t\t\tconst children = sceneDef.nodes || [];\n\n\t\t\tchildren.map((nodeIndex) => context.nodes[nodeIndex]).forEach((node) => scene.addChild(node));\n\n\t\t\treturn scene;\n\t\t});\n\n\t\tif (json.scene !== undefined) {\n\t\t\tdocument.getRoot().setDefaultScene(context.scenes[json.scene]);\n\t\t}\n\n\t\t/** Extensions (2/2). */\n\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.forEach((extension) => extension.read(context));\n\n\t\t/** Post-processing. */\n\n\t\t// Consider an accessor to be 'sparse' if it (A) includes sparse value overrides,\n\t\t// or (B) does not define .bufferView _and_ no extension provides that data. Case\n\t\t// (B) represents a zero-filled accessor.\n\t\taccessorDefs.forEach((accessorDef, index) => {\n\t\t\tconst accessor = context.accessors[index];\n\t\t\tconst hasSparseValues = !!accessorDef.sparse;\n\t\t\tconst isZeroFilled = !accessorDef.bufferView && !accessor.getArray();\n\t\t\tif (hasSparseValues || isZeroFilled) {\n\t\t\t\taccessor.setSparse(true).setArray(getSparseArray(accessorDef, context));\n\t\t\t}\n\t\t});\n\n\t\treturn document;\n\t}\n\n\tprivate static validate(jsonDoc: JSONDocument, options: Required<ReaderOptions>): void {\n\t\tconst json = jsonDoc.json;\n\n\t\tif (json.asset.version !== '2.0') {\n\t\t\tthrow new Error(`Unsupported glTF version, \"${json.asset.version}\".`);\n\t\t}\n\n\t\tif (json.extensionsRequired) {\n\t\t\tfor (const extensionName of json.extensionsRequired) {\n\t\t\t\tif (!options.extensions.find((extension) => extension.EXTENSION_NAME === extensionName)) {\n\t\t\t\t\tthrow new Error(`Missing required extension, \"${extensionName}\".`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (json.extensionsUsed) {\n\t\t\tfor (const extensionName of json.extensionsUsed) {\n\t\t\t\tif (!options.extensions.find((extension) => extension.EXTENSION_NAME === extensionName)) {\n\t\t\t\t\toptions.logger.warn(`Missing optional extension, \"${extensionName}\".`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Returns the contents of an interleaved accessor, as a typed array.\n * @internal\n */\nfunction getInterleavedArray(accessorDef: GLTF.IAccessor, context: ReaderContext): TypedArray {\n\tconst jsonDoc = context.jsonDoc;\n\tconst bufferView = context.bufferViews[accessorDef.bufferView!];\n\tconst bufferViewDef = jsonDoc.json.bufferViews![accessorDef.bufferView!];\n\n\tconst TypedArray = ComponentTypeToTypedArray[accessorDef.componentType];\n\tconst elementSize = Accessor.getElementSize(accessorDef.type);\n\tconst componentSize = TypedArray.BYTES_PER_ELEMENT;\n\tconst accessorByteOffset = accessorDef.byteOffset || 0;\n\n\tconst array = new TypedArray(accessorDef.count * elementSize);\n\tconst view = new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n\tconst byteStride = bufferViewDef.byteStride!;\n\n\tfor (let i = 0; i < accessorDef.count; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tconst byteOffset = accessorByteOffset + i * byteStride + j * componentSize;\n\t\t\tlet value: number;\n\t\t\tswitch (accessorDef.componentType) {\n\t\t\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\t\t\tvalue = view.getFloat32(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\t\t\tvalue = view.getUint32(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\t\t\tvalue = view.getUint16(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\t\t\tvalue = view.getUint8(byteOffset);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.SHORT:\n\t\t\t\t\tvalue = view.getInt16(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.BYTE:\n\t\t\t\t\tvalue = view.getInt8(byteOffset);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unexpected componentType \"${accessorDef.componentType}\".`);\n\t\t\t}\n\t\t\tarray[i * elementSize + j] = value;\n\t\t}\n\t}\n\n\treturn array;\n}\n\n/**\n * Returns the contents of an accessor, as a typed array.\n * @internal\n */\nfunction getAccessorArray(accessorDef: GLTF.IAccessor, context: ReaderContext): TypedArray {\n\tconst jsonDoc = context.jsonDoc;\n\tconst bufferView = context.bufferViews[accessorDef.bufferView!];\n\tconst bufferViewDef = jsonDoc.json.bufferViews![accessorDef.bufferView!];\n\n\tconst TypedArray = ComponentTypeToTypedArray[accessorDef.componentType];\n\tconst elementSize = Accessor.getElementSize(accessorDef.type);\n\tconst componentSize = TypedArray.BYTES_PER_ELEMENT;\n\tconst elementStride = elementSize * componentSize;\n\n\t// Interleaved buffer view.\n\tif (bufferViewDef.byteStride !== undefined && bufferViewDef.byteStride !== elementStride) {\n\t\treturn getInterleavedArray(accessorDef, context);\n\t}\n\n\tconst byteOffset = bufferView.byteOffset + (accessorDef.byteOffset || 0);\n\tconst byteLength = accessorDef.count * elementSize * componentSize;\n\n\t// Might optimize this to avoid deep copy later, but it's useful for now and not a known\n\t// bottleneck. See https://github.com/donmccurdy/glTF-Transform/issues/256.\n\treturn new TypedArray(bufferView.buffer.slice(byteOffset, byteOffset + byteLength));\n}\n\n/**\n * Returns the contents of a sparse accessor, as a typed array.\n * @internal\n */\nfunction getSparseArray(accessorDef: GLTF.IAccessor, context: ReaderContext): TypedArray {\n\tconst TypedArray = ComponentTypeToTypedArray[accessorDef.componentType];\n\tconst elementSize = Accessor.getElementSize(accessorDef.type);\n\n\tlet array: TypedArray;\n\tif (accessorDef.bufferView !== undefined) {\n\t\tarray = getAccessorArray(accessorDef, context);\n\t} else {\n\t\tarray = new TypedArray(accessorDef.count * elementSize);\n\t}\n\n\tconst sparseDef = accessorDef.sparse;\n\tif (!sparseDef) return array; // Zero-filled accessor.\n\n\tconst count = sparseDef.count;\n\tconst indicesDef = { ...accessorDef, ...sparseDef.indices, count, type: 'SCALAR' };\n\tconst valuesDef = { ...accessorDef, ...sparseDef.values, count };\n\tconst indices = getAccessorArray(indicesDef as GLTF.IAccessor, context);\n\tconst values = getAccessorArray(valuesDef, context);\n\n\t// Override indices given in the sparse data.\n\tfor (let i = 0; i < indicesDef.count; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tarray[indices[i] * elementSize + j] = values[i * elementSize + j];\n\t\t}\n\t}\n\n\treturn array;\n}\n", "import { BufferViewUsage, Format, PropertyType } from '../constants.js';\nimport type { Document } from '../document.js';\nimport type { JSONDocument } from '../json-document.js';\nimport type {\n\tAccessor,\n\tAnimation,\n\tBuffer,\n\tCamera,\n\tMaterial,\n\tMesh,\n\tNode,\n\tProperty,\n\tScene,\n\tSkin,\n\tTexture,\n\tTextureInfo,\n} from '../properties/index.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { ILogger, ImageUtils } from '../utils/index.js';\nimport type { WriterOptions } from './writer.js';\n\ntype PropertyDef = GLTF.IScene | GLTF.INode | GLTF.IMaterial | GLTF.ISkin | GLTF.ITexture;\n\nenum BufferViewTarget {\n\tARRAY_BUFFER = 34962,\n\tELEMENT_ARRAY_BUFFER = 34963,\n}\n\n/**\n * Model class providing writing state to a {@link GLTFWriter} and its {@link Extension}\n * implementations.\n *\n * @hidden\n */\nexport class WriterContext {\n\t/** Explicit buffer view targets defined by glTF specification. */\n\tpublic static readonly BufferViewTarget = BufferViewTarget;\n\t/**\n\t * Implicit buffer view usage, not required by glTF specification, but nonetheless useful for\n\t * proper grouping of accessors into buffer views. Additional usages are defined by extensions,\n\t * like `EXT_mesh_gpu_instancing`.\n\t */\n\tpublic static readonly BufferViewUsage = BufferViewUsage;\n\t/** Maps usage type to buffer view target. Usages not mapped have undefined targets. */\n\tpublic static readonly USAGE_TO_TARGET: { [key: string]: BufferViewTarget | undefined } = {\n\t\t[BufferViewUsage.ARRAY_BUFFER]: BufferViewTarget.ARRAY_BUFFER,\n\t\t[BufferViewUsage.ELEMENT_ARRAY_BUFFER]: BufferViewTarget.ELEMENT_ARRAY_BUFFER,\n\t};\n\n\tpublic readonly accessorIndexMap = new Map<Accessor, number>();\n\tpublic readonly animationIndexMap = new Map<Animation, number>();\n\tpublic readonly bufferIndexMap = new Map<Buffer, number>();\n\tpublic readonly cameraIndexMap = new Map<Camera, number>();\n\tpublic readonly skinIndexMap = new Map<Skin, number>();\n\tpublic readonly materialIndexMap = new Map<Material, number>();\n\tpublic readonly meshIndexMap = new Map<Mesh, number>();\n\tpublic readonly nodeIndexMap = new Map<Node, number>();\n\tpublic readonly imageIndexMap = new Map<Texture, number>();\n\tpublic readonly textureDefIndexMap = new Map<string, number>(); // textureDef JSON -> index\n\tpublic readonly textureInfoDefMap = new Map<TextureInfo, GLTF.ITextureInfo>();\n\tpublic readonly samplerDefIndexMap = new Map<string, number>(); // samplerDef JSON -> index\n\tpublic readonly sceneIndexMap = new Map<Scene, number>();\n\n\tpublic readonly imageBufferViews: Uint8Array[] = [];\n\tpublic readonly otherBufferViews = new Map<Buffer, Uint8Array[]>();\n\tpublic readonly otherBufferViewsIndexMap = new Map<Uint8Array, number>();\n\tpublic readonly extensionData: { [key: string]: unknown } = {};\n\n\tpublic bufferURIGenerator: UniqueURIGenerator<Buffer>;\n\tpublic imageURIGenerator: UniqueURIGenerator<Texture>;\n\tpublic logger: ILogger;\n\n\tprivate readonly _accessorUsageMap = new Map<Accessor, BufferViewUsage | string>();\n\tpublic readonly accessorUsageGroupedByParent = new Set<string>(['ARRAY_BUFFER']);\n\tpublic readonly accessorParents = new Map<Accessor, Property>();\n\n\tconstructor(\n\t\tprivate readonly _doc: Document,\n\t\tpublic readonly jsonDoc: JSONDocument,\n\t\tpublic readonly options: Required<WriterOptions>,\n\t) {\n\t\tconst root = _doc.getRoot();\n\t\tconst numBuffers = root.listBuffers().length;\n\t\tconst numImages = root.listTextures().length;\n\t\tthis.bufferURIGenerator = new UniqueURIGenerator(numBuffers > 1, () => options.basename || 'buffer');\n\t\tthis.imageURIGenerator = new UniqueURIGenerator(\n\t\t\tnumImages > 1,\n\t\t\t(texture) => getSlot(_doc, texture) || options.basename || 'texture',\n\t\t);\n\t\tthis.logger = _doc.getLogger();\n\t}\n\n\t/**\n\t * Creates a TextureInfo definition, and any Texture or Sampler definitions it requires. If\n\t * possible, Texture and Sampler definitions are shared.\n\t */\n\tpublic createTextureInfoDef(texture: Texture, textureInfo: TextureInfo): GLTF.ITextureInfo {\n\t\tconst samplerDef = {\n\t\t\tmagFilter: textureInfo.getMagFilter() || undefined,\n\t\t\tminFilter: textureInfo.getMinFilter() || undefined,\n\t\t\twrapS: textureInfo.getWrapS(),\n\t\t\twrapT: textureInfo.getWrapT(),\n\t\t} as GLTF.ISampler;\n\n\t\tconst samplerKey = JSON.stringify(samplerDef);\n\t\tif (!this.samplerDefIndexMap.has(samplerKey)) {\n\t\t\tthis.samplerDefIndexMap.set(samplerKey, this.jsonDoc.json.samplers!.length);\n\t\t\tthis.jsonDoc.json.samplers!.push(samplerDef);\n\t\t}\n\n\t\tconst textureDef = {\n\t\t\tsource: this.imageIndexMap.get(texture),\n\t\t\tsampler: this.samplerDefIndexMap.get(samplerKey),\n\t\t} as GLTF.ITexture;\n\n\t\tconst textureKey = JSON.stringify(textureDef);\n\t\tif (!this.textureDefIndexMap.has(textureKey)) {\n\t\t\tthis.textureDefIndexMap.set(textureKey, this.jsonDoc.json.textures!.length);\n\t\t\tthis.jsonDoc.json.textures!.push(textureDef);\n\t\t}\n\n\t\tconst textureInfoDef = {\n\t\t\tindex: this.textureDefIndexMap.get(textureKey),\n\t\t} as GLTF.ITextureInfo;\n\n\t\tif (textureInfo.getTexCoord() !== 0) {\n\t\t\ttextureInfoDef.texCoord = textureInfo.getTexCoord();\n\t\t}\n\t\tif (Object.keys(textureInfo.getExtras()).length > 0) {\n\t\t\ttextureInfoDef.extras = textureInfo.getExtras();\n\t\t}\n\n\t\tthis.textureInfoDefMap.set(textureInfo, textureInfoDef);\n\n\t\treturn textureInfoDef;\n\t}\n\n\tpublic createPropertyDef(property: Property): PropertyDef {\n\t\tconst def = {} as PropertyDef;\n\t\tif (property.getName()) {\n\t\t\tdef.name = property.getName();\n\t\t}\n\t\tif (Object.keys(property.getExtras()).length > 0) {\n\t\t\tdef.extras = property.getExtras();\n\t\t}\n\t\treturn def;\n\t}\n\n\tpublic createAccessorDef(accessor: Accessor): GLTF.IAccessor {\n\t\tconst accessorDef = this.createPropertyDef(accessor) as GLTF.IAccessor;\n\t\taccessorDef.type = accessor.getType();\n\t\taccessorDef.componentType = accessor.getComponentType();\n\t\taccessorDef.count = accessor.getCount();\n\n\t\tconst needsBounds = this._doc\n\t\t\t.getGraph()\n\t\t\t.listParentEdges(accessor)\n\t\t\t.some(\n\t\t\t\t(edge) =>\n\t\t\t\t\t(edge.getName() === 'attributes' && edge.getAttributes().key === 'POSITION') ||\n\t\t\t\t\tedge.getName() === 'input',\n\t\t\t);\n\t\tif (needsBounds) {\n\t\t\taccessorDef.max = accessor.getMax([]).map(Math.fround);\n\t\t\taccessorDef.min = accessor.getMin([]).map(Math.fround);\n\t\t}\n\n\t\tif (accessor.getNormalized()) {\n\t\t\taccessorDef.normalized = accessor.getNormalized();\n\t\t}\n\n\t\treturn accessorDef;\n\t}\n\n\tpublic createImageData(imageDef: GLTF.IImage, data: Uint8Array, texture: Texture): void {\n\t\tif (this.options.format === Format.GLB) {\n\t\t\tthis.imageBufferViews.push(data);\n\t\t\timageDef.bufferView = this.jsonDoc.json.bufferViews!.length;\n\t\t\tthis.jsonDoc.json.bufferViews!.push({\n\t\t\t\tbuffer: 0,\n\t\t\t\tbyteOffset: -1, // determined while iterating buffers, in Writer.ts.\n\t\t\t\tbyteLength: data.byteLength,\n\t\t\t});\n\t\t} else {\n\t\t\tconst extension = ImageUtils.mimeTypeToExtension(texture.getMimeType());\n\t\t\timageDef.uri = this.imageURIGenerator.createURI(texture, extension);\n\t\t\tthis.jsonDoc.resources[imageDef.uri] = data;\n\t\t}\n\t}\n\n\t/**\n\t * Returns implicit usage type of the given accessor, related to grouping accessors into\n\t * buffer views. Usage is a superset of buffer view target, including ARRAY_BUFFER and\n\t * ELEMENT_ARRAY_BUFFER, but also usages that do not match GPU buffer view targets such as\n\t * IBMs. Additional usages are defined by extensions, like `EXT_mesh_gpu_instancing`.\n\t */\n\tpublic getAccessorUsage(accessor: Accessor): BufferViewUsage | string {\n\t\tconst cachedUsage = this._accessorUsageMap.get(accessor);\n\t\tif (cachedUsage) return cachedUsage;\n\n\t\tif (accessor.getSparse()) return BufferViewUsage.SPARSE;\n\n\t\tfor (const edge of this._doc.getGraph().listParentEdges(accessor)) {\n\t\t\tconst { usage } = edge.getAttributes() as { usage: BufferViewUsage | undefined };\n\n\t\t\tif (usage) return usage;\n\n\t\t\tif (edge.getParent().propertyType !== PropertyType.ROOT) {\n\t\t\t\tthis.logger.warn(`Missing attribute \".usage\" on edge, \"${edge.getName()}\".`);\n\t\t\t}\n\t\t}\n\n\t\t// Group accessors with no specified usage into a miscellaneous buffer view.\n\t\treturn BufferViewUsage.OTHER;\n\t}\n\n\t/**\n\t * Sets usage for the given accessor. Some accessor types must be grouped into\n\t * buffer views with like accessors. This includes the specified buffer view \"targets\", but\n\t * also implicit usage like IBMs or instanced mesh attributes. If unspecified, an accessor\n\t * will be grouped with other accessors of unspecified usage.\n\t */\n\tpublic addAccessorToUsageGroup(accessor: Accessor, usage: BufferViewUsage | string): this {\n\t\tconst prevUsage = this._accessorUsageMap.get(accessor);\n\t\tif (prevUsage && prevUsage !== usage) {\n\t\t\tthrow new Error(`Accessor with usage \"${prevUsage}\" cannot be reused as \"${usage}\".`);\n\t\t}\n\t\tthis._accessorUsageMap.set(accessor, usage);\n\t\treturn this;\n\t}\n}\n\nexport class UniqueURIGenerator<T extends Texture | Buffer> {\n\tprivate counter = {} as Record<string, number>;\n\n\tconstructor(\n\t\tprivate readonly multiple: boolean,\n\t\tprivate readonly basename: (t: T) => string,\n\t) {}\n\n\tpublic createURI(object: T, extension: string): string {\n\t\tif (object.getURI()) {\n\t\t\treturn object.getURI();\n\t\t} else if (!this.multiple) {\n\t\t\treturn `${this.basename(object)}.${extension}`;\n\t\t} else {\n\t\t\tconst basename = this.basename(object);\n\t\t\tthis.counter[basename] = this.counter[basename] || 1;\n\t\t\treturn `${basename}_${this.counter[basename]++}.${extension}`;\n\t\t}\n\t}\n}\n\n/** Returns the first slot (by name) to which the texture is assigned. */\nfunction getSlot(document: Document, texture: Texture): string {\n\tconst edge = document\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.find((edge) => edge.getParent() !== document.getRoot());\n\treturn edge ? edge.getName().replace(/texture$/i, '') : '';\n}\n", "import {\n\tComponentTypeToTypedArray,\n\tFormat,\n\tGLB_BUFFER,\n\tPropertyType,\n\tTypedArray,\n\tVERSION,\n\tVertexLayout,\n} from '../constants.js';\nimport type { Document } from '../document.js';\nimport type { Extension } from '../extension.js';\nimport type { JSONDocument } from '../json-document.js';\nimport { Accessor, AnimationSampler, Camera, Material } from '../properties/index.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { BufferUtils, Logger, MathUtils } from '../utils/index.js';\nimport { WriterContext } from './writer-context.js';\n\nconst { BufferViewUsage } = WriterContext;\nconst { UNSIGNED_INT, UNSIGNED_SHORT, UNSIGNED_BYTE } = Accessor.ComponentType;\n\nexport interface WriterOptions {\n\tformat: Format;\n\tlogger?: Logger;\n\tbasename?: string;\n\tvertexLayout?: VertexLayout;\n\tdependencies?: { [key: string]: unknown };\n\textensions?: (typeof Extension)[];\n}\n\nconst SUPPORTED_PREWRITE_TYPES = new Set<PropertyType>([\n\tPropertyType.ACCESSOR,\n\tPropertyType.BUFFER,\n\tPropertyType.MATERIAL,\n\tPropertyType.MESH,\n]);\n\n/**\n * @internal\n * @hidden\n */\nexport class GLTFWriter {\n\tpublic static write(doc: Document, options: Required<WriterOptions>): JSONDocument {\n\t\tconst graph = doc.getGraph();\n\t\tconst root = doc.getRoot();\n\t\tconst json = {\n\t\t\tasset: { generator: `glTF-Transform ${VERSION}`, ...root.getAsset() },\n\t\t\textras: { ...root.getExtras() },\n\t\t} as GLTF.IGLTF;\n\t\tconst jsonDoc = { json, resources: {} } as JSONDocument;\n\n\t\tconst context = new WriterContext(doc, jsonDoc, options);\n\t\tconst logger = options.logger || Logger.DEFAULT_INSTANCE;\n\n\t\t/* Extensions (1/2). */\n\n\t\t// Extensions present on the Document are not written unless they are also registered with\n\t\t// the I/O class. This ensures that setup in `extension.register()` is completed, and\n\t\t// allows a Document to be written with specific extensions disabled.\n\t\tconst extensionsRegistered = new Set(options.extensions.map((ext) => ext.EXTENSION_NAME));\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((ext) => extensionsRegistered.has(ext.extensionName))\n\t\t\t.sort((a, b) => (a.extensionName > b.extensionName ? 1 : -1));\n\t\tconst extensionsRequired = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsRequired()\n\t\t\t.filter((ext) => extensionsRegistered.has(ext.extensionName))\n\t\t\t.sort((a, b) => (a.extensionName > b.extensionName ? 1 : -1));\n\t\tif (extensionsUsed.length < doc.getRoot().listExtensionsUsed().length) {\n\t\t\tlogger.warn('Some extensions were not registered for I/O, and will not be written.');\n\t\t}\n\n\t\tfor (const extension of extensionsUsed) {\n\t\t\t// Warn on unsupported prewrite hooks.\n\t\t\tconst unsupportedHooks = extension.prewriteTypes.filter((type) => !SUPPORTED_PREWRITE_TYPES.has(type));\n\t\t\tif (unsupportedHooks.length) {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t`Prewrite hooks for some types (${unsupportedHooks.join()}), requested by extension ` +\n\t\t\t\t\t\t`${extension.extensionName}, are unsupported. Please file an issue or a PR.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Install dependencies.\n\t\t\tfor (const key of extension.writeDependencies) {\n\t\t\t\textension.install(key, options.dependencies[key]);\n\t\t\t}\n\t\t}\n\n\t\t/* Utilities. */\n\n\t\tinterface BufferViewResult {\n\t\t\tbyteLength: number;\n\t\t\tbuffers: Uint8Array[];\n\t\t}\n\n\t\t/**\n\t\t * Pack a group of accessors into a sequential buffer view. Appends accessor and buffer view\n\t\t * definitions to the root JSON lists.\n\t\t *\n\t\t * @param accessors Accessors to be included.\n\t\t * @param bufferIndex Buffer to write to.\n\t\t * @param bufferByteOffset Current offset into the buffer, accounting for other buffer views.\n\t\t * @param bufferViewTarget (Optional) target use of the buffer view.\n\t\t */\n\t\tfunction concatAccessors(\n\t\t\taccessors: Accessor[],\n\t\t\tbufferIndex: number,\n\t\t\tbufferByteOffset: number,\n\t\t\tbufferViewTarget?: number,\n\t\t): BufferViewResult {\n\t\t\tconst buffers: Uint8Array[] = [];\n\t\t\tlet byteLength = 0;\n\n\t\t\t// Create accessor definitions, determining size of final buffer view.\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\t\taccessorDef.bufferView = json.bufferViews!.length;\n\n\t\t\t\tconst accessorArray = accessor.getArray()!;\n\t\t\t\tconst data = BufferUtils.pad(BufferUtils.toView(accessorArray));\n\t\t\t\taccessorDef.byteOffset = byteLength;\n\t\t\t\tbyteLength += data.byteLength;\n\t\t\t\tbuffers.push(data);\n\n\t\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length);\n\t\t\t\tjson.accessors!.push(accessorDef);\n\t\t\t}\n\n\t\t\t// Create buffer view definition.\n\t\t\tconst bufferViewData = BufferUtils.concat(buffers);\n\t\t\tconst bufferViewDef: GLTF.IBufferView = {\n\t\t\t\tbuffer: bufferIndex,\n\t\t\t\tbyteOffset: bufferByteOffset,\n\t\t\t\tbyteLength: bufferViewData.byteLength,\n\t\t\t};\n\t\t\tif (bufferViewTarget) bufferViewDef.target = bufferViewTarget;\n\t\t\tjson.bufferViews!.push(bufferViewDef);\n\n\t\t\treturn { buffers, byteLength };\n\t\t}\n\n\t\t/**\n\t\t * Pack a group of accessors into an interleaved buffer view. Appends accessor and buffer\n\t\t * view definitions to the root JSON lists. Buffer view target is implicitly attribute data.\n\t\t *\n\t\t * References:\n\t\t * - [Apple • Best Practices for Working with Vertex Data](https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html)\n\t\t * - [Khronos • Vertex Specification Best Practices](https://www.khronos.org/opengl/wiki/Vertex_Specification_Best_Practices)\n\t\t *\n\t\t * @param accessors Accessors to be included.\n\t\t * @param bufferIndex Buffer to write to.\n\t\t * @param bufferByteOffset Offset into the buffer, accounting for other buffer views.\n\t\t */\n\t\tfunction interleaveAccessors(\n\t\t\taccessors: Accessor[],\n\t\t\tbufferIndex: number,\n\t\t\tbufferByteOffset: number,\n\t\t): BufferViewResult {\n\t\t\tconst vertexCount = accessors[0].getCount();\n\t\t\tlet byteStride = 0;\n\n\t\t\t// Create accessor definitions, determining size and stride of final buffer view.\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\t\taccessorDef.bufferView = json.bufferViews!.length;\n\t\t\t\taccessorDef.byteOffset = byteStride;\n\n\t\t\t\tconst elementSize = accessor.getElementSize();\n\t\t\t\tconst componentSize = accessor.getComponentSize();\n\t\t\t\tbyteStride += BufferUtils.padNumber(elementSize * componentSize);\n\n\t\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length);\n\t\t\t\tjson.accessors!.push(accessorDef);\n\t\t\t}\n\n\t\t\t// Allocate interleaved buffer view.\n\t\t\tconst byteLength = vertexCount * byteStride;\n\t\t\tconst buffer = new ArrayBuffer(byteLength);\n\t\t\tconst view = new DataView(buffer);\n\n\t\t\t// Write interleaved accessor data to the buffer view.\n\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\tlet vertexByteOffset = 0;\n\t\t\t\tfor (const accessor of accessors) {\n\t\t\t\t\tconst elementSize = accessor.getElementSize();\n\t\t\t\t\tconst componentSize = accessor.getComponentSize();\n\t\t\t\t\tconst componentType = accessor.getComponentType();\n\t\t\t\t\tconst array = accessor.getArray()!;\n\t\t\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\t\t\tconst viewByteOffset = i * byteStride + vertexByteOffset + j * componentSize;\n\t\t\t\t\t\tconst value = array[i * elementSize + j];\n\t\t\t\t\t\tswitch (componentType) {\n\t\t\t\t\t\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\t\t\t\t\t\tview.setFloat32(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.BYTE:\n\t\t\t\t\t\t\t\tview.setInt8(viewByteOffset, value);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.SHORT:\n\t\t\t\t\t\t\t\tview.setInt16(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\t\t\t\t\t\tview.setUint8(viewByteOffset, value);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\t\t\t\t\t\tview.setUint16(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\t\t\t\t\t\tview.setUint32(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error('Unexpected component type: ' + componentType);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvertexByteOffset += BufferUtils.padNumber(elementSize * componentSize);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create buffer view definition.\n\t\t\tconst bufferViewDef: GLTF.IBufferView = {\n\t\t\t\tbuffer: bufferIndex,\n\t\t\t\tbyteOffset: bufferByteOffset,\n\t\t\t\tbyteLength: byteLength,\n\t\t\t\tbyteStride: byteStride,\n\t\t\t\ttarget: WriterContext.BufferViewTarget.ARRAY_BUFFER,\n\t\t\t};\n\t\t\tjson.bufferViews!.push(bufferViewDef);\n\n\t\t\treturn { byteLength, buffers: [new Uint8Array(buffer)] };\n\t\t}\n\n\t\t/**\n\t\t * Pack a group of sparse accessors. Appends accessor and buffer view\n\t\t * definitions to the root JSON lists.\n\t\t *\n\t\t * @param accessors Accessors to be included.\n\t\t * @param bufferIndex Buffer to write to.\n\t\t * @param bufferByteOffset Current offset into the buffer, accounting for other buffer views.\n\t\t */\n\t\tfunction concatSparseAccessors(\n\t\t\taccessors: Accessor[],\n\t\t\tbufferIndex: number,\n\t\t\tbufferByteOffset: number,\n\t\t): BufferViewResult {\n\t\t\tconst buffers: Uint8Array[] = [];\n\t\t\tlet byteLength = 0;\n\n\t\t\tinterface SparseData {\n\t\t\t\taccessorDef: GLTF.IAccessor;\n\t\t\t\tcount: number;\n\t\t\t\tindices?: number[];\n\t\t\t\tvalues?: TypedArray;\n\t\t\t\tindicesByteOffset?: number;\n\t\t\t\tvaluesByteOffset?: number;\n\t\t\t}\n\t\t\tconst sparseData = new Map<Accessor, SparseData>();\n\t\t\tlet maxIndex = -Infinity;\n\t\t\tlet needSparseWarning = false;\n\n\t\t\t// (1) Write accessor definitions, gathering indices and values.\n\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\t\tjson.accessors!.push(accessorDef);\n\t\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length - 1);\n\n\t\t\t\tconst indices = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tconst el = [] as number[];\n\t\t\t\tconst base = new Array(accessor.getElementSize()).fill(0);\n\n\t\t\t\tfor (let i = 0, il = accessor.getCount(); i < il; i++) {\n\t\t\t\t\taccessor.getElement(i, el);\n\t\t\t\t\tif (MathUtils.eq(el, base, 0)) continue;\n\n\t\t\t\t\tmaxIndex = Math.max(i, maxIndex);\n\t\t\t\t\tindices.push(i);\n\t\t\t\t\tfor (let j = 0; j < el.length; j++) values.push(el[j]);\n\t\t\t\t}\n\n\t\t\t\tconst count = indices.length;\n\t\t\t\tconst data: SparseData = { accessorDef, count };\n\t\t\t\tsparseData.set(accessor, data);\n\n\t\t\t\tif (count === 0) continue;\n\n\t\t\t\tif (count > accessor.getCount() / 2) {\n\t\t\t\t\tneedSparseWarning = true;\n\t\t\t\t}\n\n\t\t\t\tconst ValueArray = ComponentTypeToTypedArray[accessor.getComponentType()];\n\t\t\t\tdata.indices = indices;\n\t\t\t\tdata.values = new ValueArray(values);\n\t\t\t}\n\n\t\t\t// (2) Early exit if all sparse accessors are just zero-filled arrays.\n\n\t\t\tif (!Number.isFinite(maxIndex)) {\n\t\t\t\treturn { buffers, byteLength };\n\t\t\t}\n\n\t\t\tif (needSparseWarning) {\n\t\t\t\tlogger.warn(`Some sparse accessors have >50% non-zero elements, which may increase file size.`);\n\t\t\t}\n\n\t\t\t// (3) Write index buffer view.\n\n\t\t\tconst IndexArray = maxIndex < 255 ? Uint8Array : maxIndex < 65535 ? Uint16Array : Uint32Array;\n\t\t\tconst IndexComponentType =\n\t\t\t\tmaxIndex < 255 ? UNSIGNED_BYTE : maxIndex < 65535 ? UNSIGNED_SHORT : UNSIGNED_INT;\n\n\t\t\tconst indicesBufferViewDef: GLTF.IBufferView = {\n\t\t\t\tbuffer: bufferIndex,\n\t\t\t\tbyteOffset: bufferByteOffset + byteLength,\n\t\t\t\tbyteLength: 0,\n\t\t\t};\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst data = sparseData.get(accessor)!;\n\t\t\t\tif (data.count === 0) continue;\n\n\t\t\t\tdata.indicesByteOffset = indicesBufferViewDef.byteLength;\n\n\t\t\t\tconst buffer = BufferUtils.pad(BufferUtils.toView(new IndexArray(data.indices!)));\n\t\t\t\tbuffers.push(buffer);\n\t\t\t\tbyteLength += buffer.byteLength;\n\t\t\t\tindicesBufferViewDef.byteLength += buffer.byteLength;\n\t\t\t}\n\t\t\tjson.bufferViews!.push(indicesBufferViewDef);\n\t\t\tconst indicesBufferViewIndex = json.bufferViews!.length - 1;\n\n\t\t\t// (4) Write value buffer view.\n\n\t\t\tconst valuesBufferViewDef: GLTF.IBufferView = {\n\t\t\t\tbuffer: bufferIndex,\n\t\t\t\tbyteOffset: bufferByteOffset + byteLength,\n\t\t\t\tbyteLength: 0,\n\t\t\t};\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst data = sparseData.get(accessor)!;\n\t\t\t\tif (data.count === 0) continue;\n\n\t\t\t\tdata.valuesByteOffset = valuesBufferViewDef.byteLength;\n\n\t\t\t\tconst buffer = BufferUtils.pad(BufferUtils.toView(data.values!));\n\t\t\t\tbuffers.push(buffer);\n\t\t\t\tbyteLength += buffer.byteLength;\n\t\t\t\tvaluesBufferViewDef.byteLength += buffer.byteLength;\n\t\t\t}\n\t\t\tjson.bufferViews!.push(valuesBufferViewDef);\n\t\t\tconst valuesBufferViewIndex = json.bufferViews!.length - 1;\n\n\t\t\t// (5) Write accessor sparse entries.\n\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst data = sparseData.get(accessor) as Required<SparseData>;\n\t\t\t\tif (data.count === 0) continue;\n\n\t\t\t\tdata.accessorDef.sparse = {\n\t\t\t\t\tcount: data.count,\n\t\t\t\t\tindices: {\n\t\t\t\t\t\tbufferView: indicesBufferViewIndex,\n\t\t\t\t\t\tbyteOffset: data.indicesByteOffset,\n\t\t\t\t\t\tcomponentType: IndexComponentType,\n\t\t\t\t\t},\n\t\t\t\t\tvalues: {\n\t\t\t\t\t\tbufferView: valuesBufferViewIndex,\n\t\t\t\t\t\tbyteOffset: data.valuesByteOffset,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn { buffers, byteLength };\n\t\t}\n\n\t\tjson.accessors = [];\n\t\tjson.bufferViews = [];\n\n\t\t/* Textures. */\n\n\t\t// glTF Transform's \"Texture\" properties correspond 1:1 with glTF \"Image\" properties, and\n\t\t// with image files. The glTF file may contain more one texture per image, where images\n\t\t// are reused with different sampler properties.\n\t\tjson.samplers = [];\n\t\tjson.textures = [];\n\t\tjson.images = root.listTextures().map((texture, textureIndex) => {\n\t\t\tconst imageDef = context.createPropertyDef(texture) as GLTF.IImage;\n\n\t\t\tif (texture.getMimeType()) {\n\t\t\t\timageDef.mimeType = texture.getMimeType();\n\t\t\t}\n\n\t\t\tconst image = texture.getImage();\n\t\t\tif (image) {\n\t\t\t\tcontext.createImageData(imageDef, image, texture);\n\t\t\t}\n\n\t\t\tcontext.imageIndexMap.set(texture, textureIndex);\n\t\t\treturn imageDef;\n\t\t});\n\n\t\t/* Accessors. */\n\n\t\textensionsUsed\n\t\t\t.filter((extension) => extension.prewriteTypes.includes(PropertyType.ACCESSOR))\n\t\t\t.forEach((extension) => extension.prewrite(context, PropertyType.ACCESSOR));\n\t\troot.listAccessors().forEach((accessor) => {\n\t\t\t// Attributes are grouped and interleaved in one buffer view per mesh primitive.\n\t\t\t// Indices for all primitives are grouped into a single buffer view. IBMs are grouped\n\t\t\t// into a single buffer view. Other usage (if specified by extensions) also goes into\n\t\t\t// a dedicated buffer view. Everything else goes into a miscellaneous buffer view.\n\n\t\t\t// Certain accessor usage should group data into buffer views by the accessor parent.\n\t\t\t// The `accessorParents` map uses the first parent of each accessor for this purpose.\n\t\t\tconst groupByParent = context.accessorUsageGroupedByParent;\n\t\t\tconst accessorParents = context.accessorParents;\n\n\t\t\t// Skip if already written by an extension.\n\t\t\tif (context.accessorIndexMap.has(accessor)) return;\n\n\t\t\t// Assign usage for core accessor usage types (explicit targets and implicit usage).\n\t\t\tconst usage = context.getAccessorUsage(accessor);\n\t\t\tcontext.addAccessorToUsageGroup(accessor, usage);\n\n\t\t\t// For accessor usage that requires grouping by parent (vertex and instance\n\t\t\t// attributes) organize buffer views accordingly.\n\t\t\tif (groupByParent.has(usage)) {\n\t\t\t\tconst parent = graph.listParents(accessor).find((parent) => parent.propertyType !== PropertyType.ROOT)!;\n\t\t\t\taccessorParents.set(accessor, parent);\n\t\t\t}\n\t\t});\n\n\t\t/* Buffers, buffer views. */\n\n\t\textensionsUsed\n\t\t\t.filter((extension) => extension.prewriteTypes.includes(PropertyType.BUFFER))\n\t\t\t.forEach((extension) => extension.prewrite(context, PropertyType.BUFFER));\n\n\t\tconst hasBinaryResources =\n\t\t\troot.listAccessors().length > 0 || root.listTextures().length > 0 || context.otherBufferViews.size > 0;\n\t\tif (hasBinaryResources && root.listBuffers().length === 0) {\n\t\t\tthrow new Error('Buffer required for Document resources, but none was found.');\n\t\t}\n\n\t\tjson.buffers = [];\n\t\troot.listBuffers().forEach((buffer, index) => {\n\t\t\tconst bufferDef = context.createPropertyDef(buffer) as GLTF.IBuffer;\n\t\t\tconst groupByParent = context.accessorUsageGroupedByParent;\n\n\t\t\tconst accessors = buffer.listParents().filter((property) => property instanceof Accessor) as Accessor[];\n\t\t\tconst uniqueParents = new Set(accessors.map((accessor) => context.accessorParents.get(accessor)));\n\t\t\tconst parentToIndex = new Map(Array.from(uniqueParents).map((parent, index) => [parent, index]));\n\n\t\t\t// Group by usage and (first) parent, including vertex and instance attributes.\n\t\t\ttype AccessorGroup = { usage: string; accessors: Accessor[] };\n\t\t\tconst accessorGroups: Record<string, AccessorGroup> = {};\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\t// Skip if already written by an extension.\n\t\t\t\tif (context.accessorIndexMap.has(accessor)) continue;\n\n\t\t\t\tconst usage = context.getAccessorUsage(accessor);\n\t\t\t\tlet key = usage;\n\t\t\t\tif (groupByParent.has(usage)) {\n\t\t\t\t\tconst parent = context.accessorParents.get(accessor);\n\t\t\t\t\tkey += `:${parentToIndex.get(parent)}`;\n\t\t\t\t}\n\n\t\t\t\taccessorGroups[key] ||= { usage, accessors: [] };\n\t\t\t\taccessorGroups[key].accessors.push(accessor);\n\t\t\t}\n\n\t\t\t// Write accessor groups to buffer views.\n\n\t\t\tconst buffers: Uint8Array[] = [];\n\t\t\tconst bufferIndex = json.buffers!.length;\n\t\t\tlet bufferByteLength = 0;\n\n\t\t\tfor (const { usage, accessors: groupAccessors } of Object.values(accessorGroups)) {\n\t\t\t\tif (usage === BufferViewUsage.ARRAY_BUFFER && options.vertexLayout === VertexLayout.INTERLEAVED) {\n\t\t\t\t\t// (1) Interleaved vertex attributes.\n\t\t\t\t\tconst result = interleaveAccessors(groupAccessors, bufferIndex, bufferByteLength);\n\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t} else if (usage === BufferViewUsage.ARRAY_BUFFER) {\n\t\t\t\t\t// (2) Non-interleaved vertex attributes.\n\t\t\t\t\tfor (const accessor of groupAccessors) {\n\t\t\t\t\t\t// We 'interleave' a single accessor because the method pads to\n\t\t\t\t\t\t// 4-byte boundaries, which concatAccessors() does not.\n\t\t\t\t\t\tconst result = interleaveAccessors([accessor], bufferIndex, bufferByteLength);\n\t\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t\t}\n\t\t\t\t} else if (usage === BufferViewUsage.SPARSE) {\n\t\t\t\t\t// (3) Sparse accessors.\n\t\t\t\t\tconst result = concatSparseAccessors(groupAccessors, bufferIndex, bufferByteLength);\n\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t} else if (usage === BufferViewUsage.ELEMENT_ARRAY_BUFFER) {\n\t\t\t\t\t// (4) Indices.\n\t\t\t\t\tconst target = WriterContext.BufferViewTarget.ELEMENT_ARRAY_BUFFER;\n\t\t\t\t\tconst result = concatAccessors(groupAccessors, bufferIndex, bufferByteLength, target);\n\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t} else {\n\t\t\t\t\t// (5) Other.\n\t\t\t\t\tconst result = concatAccessors(groupAccessors, bufferIndex, bufferByteLength);\n\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We only support embedded images in GLB, where the embedded buffer must be the first.\n\t\t\t// Additional buffers are currently left empty (see EXT_meshopt_compression fallback).\n\t\t\tif (context.imageBufferViews.length && index === 0) {\n\t\t\t\tfor (let i = 0; i < context.imageBufferViews.length; i++) {\n\t\t\t\t\tjson.bufferViews![json.images![i].bufferView!].byteOffset = bufferByteLength;\n\t\t\t\t\tbufferByteLength += context.imageBufferViews[i].byteLength;\n\t\t\t\t\tbuffers.push(context.imageBufferViews[i]);\n\n\t\t\t\t\tif (bufferByteLength % 8) {\n\t\t\t\t\t\t// See: https://github.com/KhronosGroup/glTF/issues/1935\n\t\t\t\t\t\tconst imagePadding = 8 - (bufferByteLength % 8);\n\t\t\t\t\t\tbufferByteLength += imagePadding;\n\t\t\t\t\t\tbuffers.push(new Uint8Array(imagePadding));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.otherBufferViews.has(buffer)) {\n\t\t\t\tfor (const data of context.otherBufferViews.get(buffer)!) {\n\t\t\t\t\tjson.bufferViews!.push({\n\t\t\t\t\t\tbuffer: bufferIndex,\n\t\t\t\t\t\tbyteOffset: bufferByteLength,\n\t\t\t\t\t\tbyteLength: data.byteLength,\n\t\t\t\t\t});\n\t\t\t\t\tcontext.otherBufferViewsIndexMap.set(data, json.bufferViews!.length - 1);\n\t\t\t\t\tbufferByteLength += data.byteLength;\n\t\t\t\t\tbuffers.push(data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bufferByteLength) {\n\t\t\t\t// Assign buffer URI.\n\t\t\t\tlet uri: string;\n\t\t\t\tif (options.format === Format.GLB) {\n\t\t\t\t\turi = GLB_BUFFER;\n\t\t\t\t} else {\n\t\t\t\t\turi = context.bufferURIGenerator.createURI(buffer, 'bin');\n\t\t\t\t\tbufferDef.uri = uri;\n\t\t\t\t}\n\n\t\t\t\t// Write buffer views to buffer.\n\t\t\t\tbufferDef.byteLength = bufferByteLength;\n\t\t\t\tjsonDoc.resources[uri] = BufferUtils.concat(buffers);\n\t\t\t}\n\n\t\t\tjson.buffers!.push(bufferDef);\n\t\t\tcontext.bufferIndexMap.set(buffer, index);\n\t\t});\n\n\t\tif (root.listAccessors().find((a) => !a.getBuffer())) {\n\t\t\tlogger.warn('Skipped writing one or more Accessors: no Buffer assigned.');\n\t\t}\n\n\t\t/* Materials. */\n\n\t\textensionsUsed\n\t\t\t.filter((extension) => extension.prewriteTypes.includes(PropertyType.MATERIAL))\n\t\t\t.forEach((extension) => extension.prewrite(context, PropertyType.MATERIAL));\n\n\t\tjson.materials = root.listMaterials().map((material, index) => {\n\t\t\tconst materialDef = context.createPropertyDef(material) as GLTF.IMaterial;\n\n\t\t\t// Program state & blending.\n\n\t\t\tif (material.getAlphaMode() !== Material.AlphaMode.OPAQUE) {\n\t\t\t\tmaterialDef.alphaMode = material.getAlphaMode();\n\t\t\t}\n\t\t\tif (material.getAlphaMode() === Material.AlphaMode.MASK) {\n\t\t\t\tmaterialDef.alphaCutoff = material.getAlphaCutoff();\n\t\t\t}\n\t\t\tif (material.getDoubleSided()) materialDef.doubleSided = true;\n\n\t\t\t// Factors.\n\n\t\t\tmaterialDef.pbrMetallicRoughness = {};\n\t\t\tif (!MathUtils.eq(material.getBaseColorFactor(), [1, 1, 1, 1])) {\n\t\t\t\tmaterialDef.pbrMetallicRoughness.baseColorFactor = material.getBaseColorFactor();\n\t\t\t}\n\t\t\tif (!MathUtils.eq(material.getEmissiveFactor(), [0, 0, 0])) {\n\t\t\t\tmaterialDef.emissiveFactor = material.getEmissiveFactor();\n\t\t\t}\n\t\t\tif (material.getRoughnessFactor() !== 1) {\n\t\t\t\tmaterialDef.pbrMetallicRoughness.roughnessFactor = material.getRoughnessFactor();\n\t\t\t}\n\t\t\tif (material.getMetallicFactor() !== 1) {\n\t\t\t\tmaterialDef.pbrMetallicRoughness.metallicFactor = material.getMetallicFactor();\n\t\t\t}\n\n\t\t\t// Textures.\n\n\t\t\tif (material.getBaseColorTexture()) {\n\t\t\t\tconst texture = material.getBaseColorTexture()!;\n\t\t\t\tconst textureInfo = material.getBaseColorTextureInfo()!;\n\t\t\t\tmaterialDef.pbrMetallicRoughness.baseColorTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t}\n\n\t\t\tif (material.getEmissiveTexture()) {\n\t\t\t\tconst texture = material.getEmissiveTexture()!;\n\t\t\t\tconst textureInfo = material.getEmissiveTextureInfo()!;\n\t\t\t\tmaterialDef.emissiveTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t}\n\n\t\t\tif (material.getNormalTexture()) {\n\t\t\t\tconst texture = material.getNormalTexture()!;\n\t\t\t\tconst textureInfo = material.getNormalTextureInfo()!;\n\t\t\t\tconst textureInfoDef = context.createTextureInfoDef(\n\t\t\t\t\ttexture,\n\t\t\t\t\ttextureInfo,\n\t\t\t\t) as GLTF.IMaterialNormalTextureInfo;\n\t\t\t\tif (material.getNormalScale() !== 1) {\n\t\t\t\t\ttextureInfoDef.scale = material.getNormalScale();\n\t\t\t\t}\n\t\t\t\tmaterialDef.normalTexture = textureInfoDef;\n\t\t\t}\n\n\t\t\tif (material.getOcclusionTexture()) {\n\t\t\t\tconst texture = material.getOcclusionTexture()!;\n\t\t\t\tconst textureInfo = material.getOcclusionTextureInfo()!;\n\t\t\t\tconst textureInfoDef = context.createTextureInfoDef(\n\t\t\t\t\ttexture,\n\t\t\t\t\ttextureInfo,\n\t\t\t\t) as GLTF.IMaterialOcclusionTextureInfo;\n\t\t\t\tif (material.getOcclusionStrength() !== 1) {\n\t\t\t\t\ttextureInfoDef.strength = material.getOcclusionStrength();\n\t\t\t\t}\n\t\t\t\tmaterialDef.occlusionTexture = textureInfoDef;\n\t\t\t}\n\n\t\t\tif (material.getMetallicRoughnessTexture()) {\n\t\t\t\tconst texture = material.getMetallicRoughnessTexture()!;\n\t\t\t\tconst textureInfo = material.getMetallicRoughnessTextureInfo()!;\n\t\t\t\tmaterialDef.pbrMetallicRoughness.metallicRoughnessTexture = context.createTextureInfoDef(\n\t\t\t\t\ttexture,\n\t\t\t\t\ttextureInfo,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcontext.materialIndexMap.set(material, index);\n\t\t\treturn materialDef;\n\t\t});\n\n\t\t/* Meshes. */\n\n\t\textensionsUsed\n\t\t\t.filter((extension) => extension.prewriteTypes.includes(PropertyType.MESH))\n\t\t\t.forEach((extension) => extension.prewrite(context, PropertyType.MESH));\n\n\t\tjson.meshes = root.listMeshes().map((mesh, index) => {\n\t\t\tconst meshDef = context.createPropertyDef(mesh) as GLTF.IMesh;\n\n\t\t\tlet targetNames: string[] | null = null;\n\n\t\t\tmeshDef.primitives = mesh.listPrimitives().map((primitive) => {\n\t\t\t\tconst primitiveDef: GLTF.IMeshPrimitive = { attributes: {} };\n\n\t\t\t\tprimitiveDef.mode = primitive.getMode();\n\n\t\t\t\tconst material = primitive.getMaterial();\n\t\t\t\tif (material) {\n\t\t\t\t\tprimitiveDef.material = context.materialIndexMap.get(material);\n\t\t\t\t}\n\n\t\t\t\tif (Object.keys(primitive.getExtras()).length) {\n\t\t\t\t\tprimitiveDef.extras = primitive.getExtras();\n\t\t\t\t}\n\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tprimitiveDef.indices = context.accessorIndexMap.get(indices);\n\t\t\t\t}\n\n\t\t\t\tfor (const semantic of primitive.listSemantics()) {\n\t\t\t\t\tprimitiveDef.attributes[semantic] = context.accessorIndexMap.get(\n\t\t\t\t\t\tprimitive.getAttribute(semantic)!,\n\t\t\t\t\t)!;\n\t\t\t\t}\n\n\t\t\t\tfor (const target of primitive.listTargets()) {\n\t\t\t\t\tconst targetDef = {} as { [name: string]: number };\n\n\t\t\t\t\tfor (const semantic of target.listSemantics()) {\n\t\t\t\t\t\ttargetDef[semantic] = context.accessorIndexMap.get(target.getAttribute(semantic)!)!;\n\t\t\t\t\t}\n\n\t\t\t\t\tprimitiveDef.targets = primitiveDef.targets || [];\n\t\t\t\t\tprimitiveDef.targets.push(targetDef);\n\t\t\t\t}\n\n\t\t\t\tif (primitive.listTargets().length && !targetNames) {\n\t\t\t\t\ttargetNames = primitive.listTargets().map((target) => target.getName());\n\t\t\t\t}\n\n\t\t\t\treturn primitiveDef;\n\t\t\t});\n\n\t\t\tif (mesh.getWeights().length) {\n\t\t\t\tmeshDef.weights = mesh.getWeights();\n\t\t\t}\n\n\t\t\tif (targetNames) {\n\t\t\t\tmeshDef.extras = meshDef.extras || {};\n\t\t\t\tmeshDef.extras['targetNames'] = targetNames;\n\t\t\t}\n\n\t\t\tcontext.meshIndexMap.set(mesh, index);\n\t\t\treturn meshDef;\n\t\t});\n\n\t\t/** Cameras. */\n\n\t\tjson.cameras = root.listCameras().map((camera, index) => {\n\t\t\tconst cameraDef = context.createPropertyDef(camera) as GLTF.ICamera;\n\t\t\tcameraDef.type = camera.getType();\n\t\t\tif (cameraDef.type === Camera.Type.PERSPECTIVE) {\n\t\t\t\tcameraDef.perspective = {\n\t\t\t\t\tznear: camera.getZNear(),\n\t\t\t\t\tzfar: camera.getZFar(),\n\t\t\t\t\tyfov: camera.getYFov(),\n\t\t\t\t};\n\t\t\t\tconst aspectRatio = camera.getAspectRatio();\n\t\t\t\tif (aspectRatio !== null) {\n\t\t\t\t\tcameraDef.perspective.aspectRatio = aspectRatio;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcameraDef.orthographic = {\n\t\t\t\t\tznear: camera.getZNear(),\n\t\t\t\t\tzfar: camera.getZFar(),\n\t\t\t\t\txmag: camera.getXMag(),\n\t\t\t\t\tymag: camera.getYMag(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcontext.cameraIndexMap.set(camera, index);\n\t\t\treturn cameraDef;\n\t\t});\n\n\t\t/* Nodes. */\n\n\t\tjson.nodes = root.listNodes().map((node, index) => {\n\t\t\tconst nodeDef = context.createPropertyDef(node) as GLTF.INode;\n\n\t\t\tif (!MathUtils.eq(node.getTranslation(), [0, 0, 0])) {\n\t\t\t\tnodeDef.translation = node.getTranslation();\n\t\t\t}\n\n\t\t\tif (!MathUtils.eq(node.getRotation(), [0, 0, 0, 1])) {\n\t\t\t\tnodeDef.rotation = node.getRotation();\n\t\t\t}\n\n\t\t\tif (!MathUtils.eq(node.getScale(), [1, 1, 1])) {\n\t\t\t\tnodeDef.scale = node.getScale();\n\t\t\t}\n\n\t\t\tif (node.getWeights().length) {\n\t\t\t\tnodeDef.weights = node.getWeights();\n\t\t\t}\n\n\t\t\t// Attachments (mesh, camera, skin) defined later in writing process.\n\n\t\t\tcontext.nodeIndexMap.set(node, index);\n\t\t\treturn nodeDef;\n\t\t});\n\n\t\t/** Skins. */\n\n\t\tjson.skins = root.listSkins().map((skin, index) => {\n\t\t\tconst skinDef = context.createPropertyDef(skin) as GLTF.ISkin;\n\n\t\t\tconst inverseBindMatrices = skin.getInverseBindMatrices();\n\t\t\tif (inverseBindMatrices) {\n\t\t\t\tskinDef.inverseBindMatrices = context.accessorIndexMap.get(inverseBindMatrices);\n\t\t\t}\n\n\t\t\tconst skeleton = skin.getSkeleton();\n\t\t\tif (skeleton) {\n\t\t\t\tskinDef.skeleton = context.nodeIndexMap.get(skeleton);\n\t\t\t}\n\n\t\t\tskinDef.joints = skin.listJoints().map((joint) => context.nodeIndexMap.get(joint)!);\n\n\t\t\tcontext.skinIndexMap.set(skin, index);\n\t\t\treturn skinDef;\n\t\t});\n\n\t\t/** Node attachments. */\n\n\t\troot.listNodes().forEach((node, index) => {\n\t\t\tconst nodeDef = json.nodes![index];\n\n\t\t\tconst mesh = node.getMesh();\n\t\t\tif (mesh) {\n\t\t\t\tnodeDef.mesh = context.meshIndexMap.get(mesh);\n\t\t\t}\n\n\t\t\tconst camera = node.getCamera();\n\t\t\tif (camera) {\n\t\t\t\tnodeDef.camera = context.cameraIndexMap.get(camera);\n\t\t\t}\n\n\t\t\tconst skin = node.getSkin();\n\t\t\tif (skin) {\n\t\t\t\tnodeDef.skin = context.skinIndexMap.get(skin);\n\t\t\t}\n\n\t\t\tif (node.listChildren().length > 0) {\n\t\t\t\tnodeDef.children = node.listChildren().map((node) => context.nodeIndexMap.get(node)!);\n\t\t\t}\n\t\t});\n\n\t\t/** Animations. */\n\n\t\tjson.animations = root.listAnimations().map((animation, index) => {\n\t\t\tconst animationDef = context.createPropertyDef(animation) as GLTF.IAnimation;\n\n\t\t\tconst samplerIndexMap: Map<AnimationSampler, number> = new Map();\n\n\t\t\tanimationDef.samplers = animation.listSamplers().map((sampler, samplerIndex) => {\n\t\t\t\tconst samplerDef = context.createPropertyDef(sampler) as GLTF.IAnimationSampler;\n\t\t\t\tsamplerDef.input = context.accessorIndexMap.get(sampler.getInput()!)!;\n\t\t\t\tsamplerDef.output = context.accessorIndexMap.get(sampler.getOutput()!)!;\n\t\t\t\tsamplerDef.interpolation = sampler.getInterpolation();\n\t\t\t\tsamplerIndexMap.set(sampler, samplerIndex);\n\t\t\t\treturn samplerDef;\n\t\t\t});\n\n\t\t\tanimationDef.channels = animation.listChannels().map((channel) => {\n\t\t\t\tconst channelDef = context.createPropertyDef(channel) as GLTF.IAnimationChannel;\n\t\t\t\tchannelDef.sampler = samplerIndexMap.get(channel.getSampler()!)!;\n\t\t\t\tchannelDef.target = {\n\t\t\t\t\tnode: context.nodeIndexMap.get(channel.getTargetNode()!)!,\n\t\t\t\t\tpath: channel.getTargetPath()!,\n\t\t\t\t};\n\t\t\t\treturn channelDef;\n\t\t\t});\n\n\t\t\tcontext.animationIndexMap.set(animation, index);\n\t\t\treturn animationDef;\n\t\t});\n\n\t\t/* Scenes. */\n\n\t\tjson.scenes = root.listScenes().map((scene, index) => {\n\t\t\tconst sceneDef = context.createPropertyDef(scene) as GLTF.IScene;\n\t\t\tsceneDef.nodes = scene.listChildren().map((node) => context.nodeIndexMap.get(node)!);\n\t\t\tcontext.sceneIndexMap.set(scene, index);\n\t\t\treturn sceneDef;\n\t\t});\n\n\t\tconst defaultScene = root.getDefaultScene();\n\t\tif (defaultScene) {\n\t\t\tjson.scene = root.listScenes().indexOf(defaultScene);\n\t\t}\n\n\t\t/* Extensions (2/2). */\n\n\t\tjson.extensionsUsed = extensionsUsed.map((ext) => ext.extensionName);\n\t\tjson.extensionsRequired = extensionsRequired.map((ext) => ext.extensionName);\n\t\textensionsUsed.forEach((extension) => extension.write(context));\n\n\t\t//\n\n\t\tclean(json as unknown as Record<string, unknown>);\n\n\t\treturn jsonDoc;\n\t}\n}\n\n/**\n * Removes empty and null values from an object.\n * @param object\n * @internal\n */\nfunction clean(object: Record<string, unknown>): void {\n\tconst unused: string[] = [];\n\n\tfor (const key in object) {\n\t\tconst value = object[key];\n\t\tif (Array.isArray(value) && value.length === 0) {\n\t\t\tunused.push(key);\n\t\t} else if (value === null || value === '') {\n\t\t\tunused.push(key);\n\t\t} else if (value && typeof value === 'object' && Object.keys(value).length === 0) {\n\t\t\tunused.push(key);\n\t\t}\n\t}\n\n\tfor (const key of unused) {\n\t\tdelete object[key];\n\t}\n}\n", "import { Format, GLB_BUFFER, VertexLayout } from '../constants.js';\nimport type { Document } from '../document.js';\nimport type { Extension } from '../extension.js';\nimport type { JSONDocument } from '../json-document.js';\nimport type { GLTF } from '../types/gltf.js';\nimport { BufferUtils, FileUtils, ILogger, Logger, uuid } from '../utils/index.js';\nimport { GLTFReader } from './reader.js';\nimport { GLTFWriter, WriterOptions } from './writer.js';\n\nenum ChunkType {\n\tJSON = 0x4e4f534a,\n\tBIN = 0x004e4942,\n}\n\ntype PublicWriterOptions = Partial<Pick<WriterOptions, 'format' | 'basename'>>;\n\n/**\n * *Abstract I/O service.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * For platform-specific implementations, see {@link NodeIO}, {@link WebIO}, and {@link DenoIO}.\n *\n * @category I/O\n */\nexport abstract class PlatformIO {\n\tprotected _logger: ILogger = Logger.DEFAULT_INSTANCE;\n\tprivate _extensions = new Set<typeof Extension>();\n\tprivate _dependencies: { [key: string]: unknown } = {};\n\tprivate _vertexLayout = VertexLayout.INTERLEAVED;\n\n\t/** @hidden */\n\tpublic lastReadBytes = 0;\n\n\t/** @hidden */\n\tpublic lastWriteBytes = 0;\n\n\t/** Sets the {@link Logger} used by this I/O instance. Defaults to Logger.DEFAULT_INSTANCE. */\n\tpublic setLogger(logger: ILogger): this {\n\t\tthis._logger = logger;\n\t\treturn this;\n\t}\n\n\t/** Registers extensions, enabling I/O class to read and write glTF assets requiring them. */\n\tpublic registerExtensions(extensions: (typeof Extension)[]): this {\n\t\tfor (const extension of extensions) {\n\t\t\tthis._extensions.add(extension);\n\t\t\textension.register();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** Registers dependencies used (e.g. by extensions) in the I/O process. */\n\tpublic registerDependencies(dependencies: { [key: string]: unknown }): this {\n\t\tObject.assign(this._dependencies, dependencies);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vertex layout method used by this I/O instance. Defaults to\n\t * VertexLayout.INTERLEAVED.\n\t */\n\tpublic setVertexLayout(layout: VertexLayout): this {\n\t\tthis._vertexLayout = layout;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Abstract.\n\t */\n\n\tprotected abstract readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected abstract readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected abstract readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string>;\n\n\tprotected abstract resolve(base: string, path: string): string;\n\tprotected abstract dirname(uri: string): string;\n\n\t/**********************************************************************************************\n\t * Public Read API.\n\t */\n\n\t/** Reads a {@link Document} from the given URI. */\n\tpublic async read(uri: string): Promise<Document> {\n\t\treturn await this.readJSON(await this.readAsJSON(uri));\n\t}\n\n\t/** Loads a URI and returns a {@link JSONDocument} struct, without parsing. */\n\tpublic async readAsJSON(uri: string): Promise<JSONDocument> {\n\t\tconst view = await this.readURI(uri, 'view');\n\t\tthis.lastReadBytes = view.byteLength;\n\t\tconst jsonDoc = isGLB(view)\n\t\t\t? this._binaryToJSON(view)\n\t\t\t: { json: JSON.parse(BufferUtils.decodeText(view)), resources: {} };\n\t\t// Read external resources first, before Data URIs are replaced.\n\t\tawait this._readResourcesExternal(jsonDoc, this.dirname(uri));\n\t\tthis._readResourcesInternal(jsonDoc);\n\t\treturn jsonDoc;\n\t}\n\n\t/** Converts glTF-formatted JSON and a resource map to a {@link Document}. */\n\tpublic async readJSON(jsonDoc: JSONDocument): Promise<Document> {\n\t\tjsonDoc = this._copyJSON(jsonDoc);\n\t\tthis._readResourcesInternal(jsonDoc);\n\t\treturn GLTFReader.read(jsonDoc, {\n\t\t\textensions: Array.from(this._extensions),\n\t\t\tdependencies: this._dependencies,\n\t\t\tlogger: this._logger,\n\t\t});\n\t}\n\n\t/** Converts a GLB-formatted Uint8Array to a {@link JSONDocument}. */\n\tpublic async binaryToJSON(glb: Uint8Array): Promise<JSONDocument> {\n\t\tconst jsonDoc = this._binaryToJSON(BufferUtils.assertView(glb));\n\t\tthis._readResourcesInternal(jsonDoc);\n\t\tconst json = jsonDoc.json;\n\n\t\t// Check for external references, which can't be resolved by this method.\n\t\tif (json.buffers && json.buffers.some((bufferDef) => isExternalBuffer(jsonDoc, bufferDef))) {\n\t\t\tthrow new Error('Cannot resolve external buffers with binaryToJSON().');\n\t\t} else if (json.images && json.images.some((imageDef) => isExternalImage(jsonDoc, imageDef))) {\n\t\t\tthrow new Error('Cannot resolve external images with binaryToJSON().');\n\t\t}\n\n\t\treturn jsonDoc;\n\t}\n\n\t/** Converts a GLB-formatted Uint8Array to a {@link Document}. */\n\tpublic async readBinary(glb: Uint8Array): Promise<Document> {\n\t\treturn this.readJSON(await this.binaryToJSON(BufferUtils.assertView(glb)));\n\t}\n\n\t/**********************************************************************************************\n\t * Public Write API.\n\t */\n\n\t/** Converts a {@link Document} to glTF-formatted JSON and a resource map. */\n\tpublic async writeJSON(doc: Document, _options: PublicWriterOptions = {}): Promise<JSONDocument> {\n\t\tif (_options.format === Format.GLB && doc.getRoot().listBuffers().length > 1) {\n\t\t\tthrow new Error('GLB must have 0–1 buffers.');\n\t\t}\n\t\treturn GLTFWriter.write(doc, {\n\t\t\tformat: _options.format || Format.GLTF,\n\t\t\tbasename: _options.basename || '',\n\t\t\tlogger: this._logger,\n\t\t\tvertexLayout: this._vertexLayout,\n\t\t\tdependencies: { ...this._dependencies },\n\t\t\textensions: Array.from(this._extensions),\n\t\t} as Required<WriterOptions>);\n\t}\n\n\t/** Converts a {@link Document} to a GLB-formatted Uint8Array. */\n\tpublic async writeBinary(doc: Document): Promise<Uint8Array> {\n\t\tconst { json, resources } = await this.writeJSON(doc, { format: Format.GLB });\n\n\t\tconst header = new Uint32Array([0x46546c67, 2, 12]);\n\n\t\tconst jsonText = JSON.stringify(json);\n\t\tconst jsonChunkData = BufferUtils.pad(BufferUtils.encodeText(jsonText), 0x20);\n\t\tconst jsonChunkHeader = BufferUtils.toView(new Uint32Array([jsonChunkData.byteLength, 0x4e4f534a]));\n\t\tconst jsonChunk = BufferUtils.concat([jsonChunkHeader, jsonChunkData]);\n\t\theader[header.length - 1] += jsonChunk.byteLength;\n\n\t\tconst binBuffer = Object.values(resources)[0];\n\t\tif (!binBuffer || !binBuffer.byteLength) {\n\t\t\treturn BufferUtils.concat([BufferUtils.toView(header), jsonChunk]);\n\t\t}\n\n\t\tconst binChunkData = BufferUtils.pad(binBuffer, 0x00);\n\t\tconst binChunkHeader = BufferUtils.toView(new Uint32Array([binChunkData.byteLength, 0x004e4942]));\n\t\tconst binChunk = BufferUtils.concat([binChunkHeader, binChunkData]);\n\t\theader[header.length - 1] += binChunk.byteLength;\n\n\t\treturn BufferUtils.concat([BufferUtils.toView(header), jsonChunk, binChunk]);\n\t}\n\n\t/**********************************************************************************************\n\t * Internal.\n\t */\n\n\tprivate async _readResourcesExternal(jsonDoc: JSONDocument, base: string): Promise<void> {\n\t\tconst images = jsonDoc.json.images || [];\n\t\tconst buffers = jsonDoc.json.buffers || [];\n\t\tconst pendingResources: Array<Promise<void>> = [...images, ...buffers].map(\n\t\t\tasync (resource: GLTF.IBuffer | GLTF.IImage): Promise<void> => {\n\t\t\t\tconst uri = resource.uri;\n\t\t\t\tif (!uri || uri.match(/data:/)) return Promise.resolve();\n\n\t\t\t\tjsonDoc.resources[uri] = await this.readURI(this.resolve(base, uri), 'view');\n\t\t\t\tthis.lastReadBytes += jsonDoc.resources[uri].byteLength;\n\t\t\t},\n\t\t);\n\t\tawait Promise.all(pendingResources);\n\t}\n\n\tprivate _readResourcesInternal(jsonDoc: JSONDocument): void {\n\t\t// NOTICE: This method may be called more than once during the loading\n\t\t// process (e.g. WebIO.read) and should handle that safely.\n\n\t\tfunction resolveResource(resource: GLTF.IBuffer | GLTF.IImage) {\n\t\t\tif (!resource.uri) return;\n\n\t\t\tif (resource.uri in jsonDoc.resources) {\n\t\t\t\tBufferUtils.assertView(jsonDoc.resources[resource.uri]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resource.uri.match(/data:/)) {\n\t\t\t\t// Rewrite Data URIs to something short and unique.\n\t\t\t\tconst resourceUUID = `__${uuid()}.${FileUtils.extension(resource.uri)}`;\n\t\t\t\tjsonDoc.resources[resourceUUID] = BufferUtils.createBufferFromDataURI(resource.uri);\n\t\t\t\tresource.uri = resourceUUID;\n\t\t\t}\n\t\t}\n\n\t\t// Unpack images.\n\t\tconst images = jsonDoc.json.images || [];\n\t\timages.forEach((image: GLTF.IImage) => {\n\t\t\tif (image.bufferView === undefined && image.uri === undefined) {\n\t\t\t\tthrow new Error('Missing resource URI or buffer view.');\n\t\t\t}\n\n\t\t\tresolveResource(image);\n\t\t});\n\n\t\t// Unpack buffers.\n\t\tconst buffers = jsonDoc.json.buffers || [];\n\t\tbuffers.forEach(resolveResource);\n\t}\n\n\t/**\n\t * Creates a shallow copy of glTF-formatted {@link JSONDocument}.\n\t *\n\t * Images, Buffers, and Resources objects are deep copies so that PlatformIO can safely\n\t * modify them during the parsing process. Other properties are shallow copies, and buffers\n\t * are passed by reference.\n\t */\n\tprivate _copyJSON(jsonDoc: JSONDocument): JSONDocument {\n\t\tconst { images, buffers } = jsonDoc.json;\n\n\t\tjsonDoc = { json: { ...jsonDoc.json }, resources: { ...jsonDoc.resources } };\n\n\t\tif (images) {\n\t\t\tjsonDoc.json.images = images.map((image) => ({ ...image }));\n\t\t}\n\t\tif (buffers) {\n\t\t\tjsonDoc.json.buffers = buffers.map((buffer) => ({ ...buffer }));\n\t\t}\n\n\t\treturn jsonDoc;\n\t}\n\n\t/** Internal version of binaryToJSON; does not warn about external resources. */\n\tprivate _binaryToJSON(glb: Uint8Array): JSONDocument {\n\t\t// Decode and verify GLB header.\n\t\tif (!isGLB(glb)) {\n\t\t\tthrow new Error('Invalid glTF 2.0 binary.');\n\t\t}\n\n\t\t// Decode JSON chunk.\n\n\t\tconst jsonChunkHeader = new Uint32Array(glb.buffer, glb.byteOffset + 12, 2);\n\t\tif (jsonChunkHeader[1] !== ChunkType.JSON) {\n\t\t\tthrow new Error('Missing required GLB JSON chunk.');\n\t\t}\n\n\t\tconst jsonByteOffset = 20;\n\t\tconst jsonByteLength = jsonChunkHeader[0];\n\t\tconst jsonText = BufferUtils.decodeText(BufferUtils.toView(glb, jsonByteOffset, jsonByteLength));\n\t\tconst json = JSON.parse(jsonText) as GLTF.IGLTF;\n\n\t\t// Decode BIN chunk.\n\n\t\tconst binByteOffset = jsonByteOffset + jsonByteLength;\n\t\tif (glb.byteLength <= binByteOffset) {\n\t\t\treturn { json, resources: {} };\n\t\t}\n\n\t\tconst binChunkHeader = new Uint32Array(glb.buffer, glb.byteOffset + binByteOffset, 2);\n\t\tif (binChunkHeader[1] !== ChunkType.BIN) {\n\t\t\t// Allow GLB files without BIN chunk, but with unknown chunk\n\t\t\t// Spec: https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#chunks-overview\n\t\t\treturn { json, resources: {} };\n\t\t}\n\n\t\tconst binByteLength = binChunkHeader[0];\n\t\tconst binBuffer = BufferUtils.toView(glb, binByteOffset + 8, binByteLength);\n\n\t\treturn { json, resources: { [GLB_BUFFER]: binBuffer } };\n\t}\n}\n\nfunction isExternalBuffer(jsonDocument: JSONDocument, bufferDef: GLTF.IBuffer): boolean {\n\treturn bufferDef.uri !== undefined && !(bufferDef.uri in jsonDocument.resources);\n}\n\nfunction isExternalImage(jsonDocument: JSONDocument, imageDef: GLTF.IImage): boolean {\n\treturn imageDef.uri !== undefined && !(imageDef.uri in jsonDocument.resources) && imageDef.bufferView === undefined;\n}\n\nfunction isGLB(view: Uint8Array): boolean {\n\tif (view.byteLength < 3 * Uint32Array.BYTES_PER_ELEMENT) return false;\n\tconst header = new Uint32Array(view.buffer, view.byteOffset, 3);\n\treturn header[0] === 0x46546c67 && header[1] === 2;\n}\n", "import { Format } from '../constants.js';\nimport type { Document } from '../document.js';\nimport { FileUtils } from '../utils/index.js';\nimport { PlatformIO } from './platform-io.js';\nimport { HTTPUtils } from '../utils/index.js';\n\n/**\n * *I/O service for Node.js.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * Usage:\n *\n * ```typescript\n * import { NodeIO } from '@gltf-transform/core';\n *\n * const io = new NodeIO();\n *\n * // Read.\n * let document;\n * document = await io.read('model.glb'); // → Document\n * document = await io.readBinary(glb);   // Uint8Array → Document\n *\n * // Write.\n * await io.write('model.glb', document);      // → void\n * const glb = await io.writeBinary(document); // Document → Uint8Array\n * ```\n *\n * By default, NodeIO can only read/write paths on disk. To enable network requests, provide a Fetch\n * API implementation (such as [`node-fetch`](https://www.npmjs.com/package/node-fetch)) and enable\n * {@link NodeIO.setAllowNetwork setAllowNetwork}. Network requests may optionally be configured with\n * [RequestInit](https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters) parameters.\n *\n * ```typescript\n * import fetch from 'node-fetch';\n *\n * const io = new NodeIO(fetch, {headers: {...}}).setAllowNetwork(true);\n *\n * const document = await io.read('https://example.com/path/to/model.glb');\n * ```\n *\n * @category I/O\n */\nexport class NodeIO extends PlatformIO {\n\tprivate declare _fs;\n\tprivate declare _path;\n\tprivate readonly _fetch: typeof fetch | null;\n\tprivate readonly _fetchConfig: RequestInit;\n\n\tprivate _init: Promise<void>;\n\tprivate _fetchEnabled = false;\n\n\t/**\n\t * Constructs a new NodeIO service. Instances are reusable. By default, only NodeIO can only\n\t * read/write paths on disk. To enable HTTP requests, provide a Fetch API implementation and\n\t * enable {@link NodeIO.setAllowNetwork setAllowNetwork}.\n\t *\n\t * @param fetch Implementation of Fetch API.\n\t * @param fetchConfig Configuration object for Fetch API.\n\t */\n\tconstructor(_fetch: unknown = null, _fetchConfig = HTTPUtils.DEFAULT_INIT) {\n\t\tsuper();\n\t\tthis._fetch = _fetch as typeof fetch | null;\n\t\tthis._fetchConfig = _fetchConfig;\n\t\tthis._init = this.init();\n\t}\n\n\tpublic async init(): Promise<void> {\n\t\tif (this._init) return this._init;\n\t\treturn Promise.all([import('fs'), import('path')]).then(([fs, path]) => {\n\t\t\tthis._fs = fs.promises;\n\t\t\tthis._path = path;\n\t\t});\n\t}\n\n\tpublic setAllowNetwork(allow: boolean): this {\n\t\tif (allow && !this._fetch) {\n\t\t\tthrow new Error('NodeIO requires a Fetch API implementation for HTTP requests.');\n\t\t}\n\t\tthis._fetchEnabled = allow;\n\t\treturn this;\n\t}\n\n\tprotected async readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected async readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected async readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string> {\n\t\tawait this.init();\n\t\tif (HTTPUtils.isAbsoluteURL(uri)) {\n\t\t\tif (!this._fetchEnabled || !this._fetch) {\n\t\t\t\tthrow new Error('Network request blocked. Allow HTTP requests explicitly, if needed.');\n\t\t\t}\n\n\t\t\tconst response = await this._fetch(uri, this._fetchConfig);\n\t\t\tswitch (type) {\n\t\t\t\tcase 'view':\n\t\t\t\t\treturn new Uint8Array(await response.arrayBuffer());\n\t\t\t\tcase 'text':\n\t\t\t\t\treturn response.text();\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (type) {\n\t\t\t\tcase 'view':\n\t\t\t\t\treturn this._fs.readFile(uri);\n\t\t\t\tcase 'text':\n\t\t\t\t\treturn this._fs.readFile(uri, 'utf8');\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected resolve(base: string, path: string): string {\n\t\tif (HTTPUtils.isAbsoluteURL(base) || HTTPUtils.isAbsoluteURL(path)) {\n\t\t\treturn HTTPUtils.resolve(base, path);\n\t\t}\n\t\t// https://github.com/KhronosGroup/glTF/issues/1449\n\t\t// https://stackoverflow.com/a/27278490/1314762\n\t\treturn this._path.resolve(base, decodeURIComponent(path));\n\t}\n\n\tprotected dirname(uri: string): string {\n\t\tif (HTTPUtils.isAbsoluteURL(uri)) {\n\t\t\treturn HTTPUtils.dirname(uri);\n\t\t}\n\t\treturn this._path.dirname(uri);\n\t}\n\n\t/**********************************************************************************************\n\t * Public.\n\t */\n\n\t/** Writes a {@link Document} instance to a local path. */\n\tpublic async write(uri: string, doc: Document): Promise<void> {\n\t\tawait this.init();\n\t\tconst isGLB = !!uri.match(/\\.glb$/);\n\t\tawait (isGLB ? this._writeGLB(uri, doc) : this._writeGLTF(uri, doc));\n\t}\n\n\t/**********************************************************************************************\n\t * Private.\n\t */\n\n\t/** @internal */\n\tprivate async _writeGLTF(uri: string, doc: Document): Promise<void> {\n\t\tthis.lastWriteBytes = 0;\n\t\tconst { json, resources } = await this.writeJSON(doc, {\n\t\t\tformat: Format.GLTF,\n\t\t\tbasename: FileUtils.basename(uri),\n\t\t});\n\t\tconst { _fs: fs, _path: path } = this;\n\t\tconst dir = path.dirname(uri);\n\n\t\t// write json\n\t\tconst jsonContent = JSON.stringify(json, null, 2);\n\t\tawait fs.writeFile(uri, jsonContent);\n\t\tthis.lastWriteBytes += jsonContent.length;\n\n\t\t// write resources\n\t\tfor (const batch of listBatches(Object.keys(resources), 10)) {\n\t\t\tawait Promise.all(\n\t\t\t\tbatch.map(async (resourceURI) => {\n\t\t\t\t\tif (HTTPUtils.isAbsoluteURL(resourceURI)) {\n\t\t\t\t\t\tif (HTTPUtils.extension(resourceURI) === 'bin') {\n\t\t\t\t\t\t\tthrow new Error(`Cannot write buffer to path \"${resourceURI}\".`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst resourcePath = path.join(dir, decodeURIComponent(resourceURI));\n\t\t\t\t\tawait fs.mkdir(path.dirname(resourcePath), { recursive: true });\n\t\t\t\t\tawait fs.writeFile(resourcePath, resources[resourceURI]);\n\t\t\t\t\tthis.lastWriteBytes += resources[resourceURI].byteLength;\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate async _writeGLB(uri: string, doc: Document): Promise<void> {\n\t\tconst buffer = await this.writeBinary(doc);\n\t\tawait this._fs.writeFile(uri, buffer);\n\t\tthis.lastWriteBytes = buffer.byteLength;\n\t}\n}\n\n/** Divides a flat input array into batches of size `batchSize`. */\nfunction listBatches<T>(array: T[], batchSize: number): T[][] {\n\tconst batches: T[][] = [];\n\n\tfor (let i = 0, il = array.length; i < il; i += batchSize) {\n\t\tconst batch: T[] = [];\n\t\tfor (let j = 0; j < batchSize && i + j < il; j++) {\n\t\t\tbatch.push(array[i + j]);\n\t\t}\n\t\tbatches.push(batch);\n\t}\n\n\treturn batches;\n}\n", "import { PlatformIO } from './platform-io.js';\n\ninterface Path {\n\tresolve(base: string, path: string): string;\n\tdirname(uri: string): string;\n}\n\n/**\n * *I/O service for [Deno](https://deno.land/).*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * _*NOTICE:* Support for the Deno environment is currently experimental. See\n * [glTF-Transform#457](https://github.com/donmccurdy/glTF-Transform/issues/457)._\n *\n * Usage:\n *\n * ```typescript\n * import { DenoIO } from 'https://esm.sh/@gltf-transform/core';\n * import * as path from 'https://deno.land/std/path/mod.ts';\n *\n * const io = new DenoIO(path);\n *\n * // Read.\n * let document;\n * document = io.read('model.glb');  // → Document\n * document = io.readBinary(glb);    // Uint8Array → Document\n *\n * // Write.\n * const glb = io.writeBinary(document);  // Document → Uint8Array\n * ```\n *\n * @category I/O\n */\nexport class DenoIO extends PlatformIO {\n\tprivate _path: Path;\n\n\tconstructor(path: unknown) {\n\t\tsuper();\n\t\tthis._path = path as Path;\n\t}\n\n\tprotected async readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected async readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected async readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string> {\n\t\tswitch (type) {\n\t\t\tcase 'view':\n\t\t\t\treturn Deno.readFile(uri);\n\t\t\tcase 'text':\n\t\t\t\treturn Deno.readTextFile(uri);\n\t\t}\n\t}\n\n\tprotected resolve(base: string, path: string): string {\n\t\t// https://github.com/KhronosGroup/glTF/issues/1449\n\t\t// https://stackoverflow.com/a/27278490/1314762\n\t\treturn this._path.resolve(base, decodeURIComponent(path));\n\t}\n\n\tprotected dirname(uri: string): string {\n\t\treturn this._path.dirname(uri);\n\t}\n}\n", "import { PlatformIO } from './platform-io.js';\nimport { HTTPUtils } from '../utils/index.js';\n\n/**\n * *I/O service for Web.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * Usage:\n *\n * ```typescript\n * import { WebIO } from '@gltf-transform/core';\n *\n * const io = new WebIO({credentials: 'include'});\n *\n * // Read.\n * let document;\n * document = await io.read('model.glb');  // → Document\n * document = await io.readBinary(glb);    // Uint8Array → Document\n *\n * // Write.\n * const glb = await io.writeBinary(document); // Document → Uint8Array\n * ```\n *\n * @category I/O\n */\nexport class WebIO extends PlatformIO {\n\tprivate readonly _fetchConfig: RequestInit;\n\n\t/**\n\t * Constructs a new WebIO service. Instances are reusable.\n\t * @param fetchConfig Configuration object for Fetch API.\n\t */\n\tconstructor(fetchConfig = HTTPUtils.DEFAULT_INIT) {\n\t\tsuper();\n\t\tthis._fetchConfig = fetchConfig;\n\t}\n\n\tprotected async readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected async readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected async readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string> {\n\t\tconst response = await fetch(uri, this._fetchConfig);\n\t\tswitch (type) {\n\t\t\tcase 'view':\n\t\t\t\treturn new Uint8Array(await response.arrayBuffer());\n\t\t\tcase 'text':\n\t\t\t\treturn response.text();\n\t\t}\n\t}\n\n\tprotected resolve(base: string, path: string): string {\n\t\treturn HTTPUtils.resolve(base, path);\n\t}\n\n\tprotected dirname(uri: string): string {\n\t\treturn HTTPUtils.dirname(uri);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["EventDispatcher", "_listeners", "addEventListener", "type", "listener", "listeners", "undefined", "indexOf", "push", "removeEventListener", "listenerArray", "index", "splice", "dispatchEvent", "event", "array", "slice", "i", "l", "length", "call", "dispose", "key", "GraphEdge", "constructor", "_name", "_parent", "_child", "_attributes", "_disposed", "isOnGraph", "Error", "getName", "getParent", "getChild", "setChild", "child", "getAttributes", "target", "isDisposed", "Graph", "_emptySet", "Set", "_edges", "_parentEdges", "Map", "_childEdges", "listEdges", "Array", "from", "listParentEdges", "node", "get", "listParents", "map", "edge", "listChildEdges", "listChildren", "disconnectParents", "filter", "edges", "forEach", "createEdge", "name", "a", "b", "attributes", "_registerEdge", "add", "parent", "has", "set", "_removeEdge", "delete", "RefList", "refs", "list", "ref", "remove", "removeChild", "listRefsByChild", "values", "RefSet", "getRefByChild", "RefMap", "Object", "assign", "keys", "$attributes", "Symbol", "$immutableKeys", "GraphNode", "graph", "_createAttributes", "getDefaults", "defaultAttributes", "value", "other", "detach", "swap", "prevValue", "nextValue", "attribute", "setRef", "refAttributes", "removeRef", "addRef", "setRefMap", "getRef", "prevRef", "listRefs", "assertRefList", "listRefMapKeys", "assertRefMap", "listRefMapValues", "getRefMap", "refMap", "metadata", "VERSION", "GLB_BUFFER", "PropertyType", "VertexLayout", "BufferViewUsage", "TextureChannel", "Format", "ComponentTypeToTypedArray", "Int8Array", "Uint8Array", "Int16Array", "Uint16Array", "Uint32Array", "Float32Array", "glMatrix.ARRAY_TYPE", "getBounds", "node", "resultBounds", "createBounds", "parents", "propertyType", "NODE", "listChildren", "parent", "traverse", "mesh", "getMesh", "meshBounds", "getMeshBounds", "getWorldMatrix", "min", "every", "isFinite", "max", "expandBounds", "worldMatrix", "prim", "listPrimitives", "position", "getAttribute", "indices", "getIndices", "localPos", "worldPos", "i", "il", "getCount", "index", "getScalar", "getElement", "transformMat4", "point", "target", "Math", "Infinity", "BufferUtils", "createBufferFromDataURI", "dataURI", "Buffer", "byteString", "atob", "split", "ia", "length", "charCodeAt", "data", "isBase64", "indexOf", "from", "encodeText", "text", "TextEncoder", "encode", "decodeText", "array", "TextDecoder", "decode", "concat", "arrays", "totalByteLength", "byteLength", "result", "byteOffset", "set", "pad", "srcArray", "paddingByte", "paddedLength", "padNumber", "dstArray", "v", "ceil", "equals", "a", "b", "toView", "buffer", "assertView", "view", "ArrayBuffer", "isView", "Error", "ColorUtils", "hexToFactor", "hex", "floor", "_target", "convertSRGBToLinear", "factorToHex", "factor", "r", "g", "convertLinearToSRGB", "source", "_source", "pow", "JPEGImageUtils", "match", "getSize", "DataView", "next", "getUint16", "validateJPEGBuffer", "getUint8", "TypeError", "getChannels", "_buffer", "PNGImageUtils", "magic", "slice", "PNG_FRIED_CHUNK_NAME", "getUint32", "ImageUtils", "registerFormat", "mimeType", "impl", "impls", "getMimeType", "getVRAMByteLength", "uncompressedBytes", "channels", "resolution", "mimeTypeToExtension", "pop", "extensionToMimeType", "extension", "FileUtils", "basename", "uri", "fileName", "substring", "lastIndexOf", "startsWith", "isObject", "o", "Object", "prototype", "toString", "call", "isPlainObject", "ctor", "constructor", "undefined", "prot", "hasOwnProperty", "Verbosity", "Logger", "verbosity", "debug", "DEBUG", "console", "info", "INFO", "warn", "WARN", "error", "ERROR", "DEFAULT_INSTANCE", "MathUtils", "identity", "eq", "tolerance", "abs", "clamp", "value", "decodeNormalizedInt", "componentType", "encodeNormalizedInt", "f", "round", "decompose", "srcMat", "dstTranslation", "dstRotation", "dstScale", "sx", "sy", "sz", "det", "determinant", "_m1", "invSX", "invSY", "invSZ", "getRotation", "compose", "srcTranslation", "srcRotation", "srcScale", "dstMat", "te", "x", "y", "z", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "equalsRef", "refA", "refB", "getChild", "equalsRefSet", "refSetA", "refSetB", "refValuesA", "values", "refValuesB", "equalsRefMap", "refMapA", "refMapB", "keysA", "keys", "keysB", "key", "get", "equalsArray", "equalsObject", "_a", "_b", "numKeysA", "numKeysB", "valueA", "valueB", "isArray", "Array", "ALPHABET", "UNIQUE_RETRIES", "ID_LENGTH", "previousIDs", "Set", "generateOne", "rtn", "charAt", "random", "uuid", "retries", "id", "has", "add", "NULL_DOMAIN", "HTTPUtils", "dirname", "path", "URL", "pathname", "resolve", "base", "isRelativePath", "stack", "parts", "push", "join", "isAbsoluteURL", "PROTOCOL_REGEXP", "test", "DEFAULT_INIT", "COPY_IDENTITY", "t", "EMPTY_SET", "Property", "GraphNode", "graph", "name", "$attributes", "init", "dispatchEvent", "type", "getGraph", "getDefaults", "assign", "extras", "attribute", "getName", "setName", "getExtras", "setExtras", "clone", "PropertyClass", "copy", "other", "GraphEdge", "$immutableKeys", "dispose", "RefList", "RefSet", "ref", "RefMap", "thisValue", "otherValue", "setRef", "getAttributes", "addRef", "subkey", "setRefMap", "JSON", "parse", "stringify", "skip", "detach", "disconnectParents", "n", "listParents", "ExtensibleProperty", "extensions", "getExtension", "getRefMap", "setExtension", "extensionProperty", "_validateParent", "listExtensions", "listRefMapValues", "Accessor", "ACCESSOR", "Type", "SCALAR", "ComponentType", "FLOAT", "normalized", "sparse", "getElementSize", "VEC2", "VEC3", "VEC4", "MAT2", "MAT3", "MAT4", "getComponentSize", "BYTE", "UNSIGNED_BYTE", "SHORT", "UNSIGNED_SHORT", "UNSIGNED_INT", "getMinNormalized", "getNormalized", "elementSize", "getComponentType", "getMin", "j", "getArray", "count", "Number", "getMaxNormalized", "getMax", "getType", "setType", "BYTES_PER_ELEMENT", "setNormalized", "setScalar", "setElement", "getSparse", "setSparse", "getBuffer", "getRef", "setBuffer", "setArray", "arrayToComponentType", "getByteLength", "Animation", "ANIMATION", "samplers", "addChannel", "channel", "removeChannel", "removeRef", "listChannels", "listRefs", "addSampler", "sampler", "removeSampler", "listSamplers", "AnimationChannel", "ANIMATION_CHANNEL", "targetPath", "targetNode", "getTargetPath", "setTargetPath", "getTargetNode", "setTargetNode", "getSampler", "setSampler", "TargetPath", "TRANSLATION", "ROTATION", "SCALE", "WEIGHTS", "AnimationSampler", "ANIMATION_SAMPLER", "getDefaultAttributes", "interpolation", "Interpolation", "LINEAR", "input", "output", "getInterpolation", "setInterpolation", "getInput", "setInput", "usage", "OTHER", "getOutput", "setOutput", "STEP", "CUBICSPLINE", "BUFFER", "getURI", "setURI", "Camera", "CAMERA", "PERSPECTIVE", "znear", "zfar", "aspectRatio", "yfov", "PI", "xmag", "ymag", "getZNear", "setZNear", "getZFar", "setZFar", "getAspectRatio", "setAspectRatio", "getYFov", "setYFov", "getXMag", "setXMag", "getYMag", "setYMag", "ORTHOGRAPHIC", "ExtensionProperty", "parentTypes", "includes", "EXTENSION_NAME", "TextureInfo", "TEXTURE_INFO", "texCoord", "magFilter", "minFilter", "wrapS", "WrapMode", "REPEAT", "wrapT", "getTexCoord", "setTexCoord", "getMagFilter", "setMagFilter", "getMinFilter", "setMinFilter", "getWrapS", "setWrapS", "getWrapT", "setWrapT", "CLAMP_TO_EDGE", "MIRRORED_REPEAT", "MagFilter", "NEAREST", "MinFilter", "NEAREST_MIPMAP_NEAREST", "LINEAR_MIPMAP_NEAREST", "NEAREST_MIPMAP_LINEAR", "LINEAR_MIPMAP_LINEAR", "R", "G", "B", "A", "Material", "MATERIAL", "alphaMode", "AlphaMode", "OPAQUE", "alphaCutoff", "doubleSided", "baseColorFactor", "baseColorTexture", "baseColorTextureInfo", "emissiveFactor", "emissiveTexture", "emissiveTextureInfo", "normalScale", "normalTexture", "normalTextureInfo", "occlusionStrength", "occlusionTexture", "occlusionTextureInfo", "roughnessFactor", "metallicFactor", "metallicRoughnessTexture", "metallicRoughnessTextureInfo", "getDoubleSided", "setDoubleSided", "getAlpha", "setAlpha", "alpha", "getAlphaMode", "setAlphaMode", "getAlphaCutoff", "setAlphaCutoff", "getBaseColorFactor", "setBaseColorFactor", "getBaseColorTexture", "getBaseColorTextureInfo", "setBaseColorTexture", "texture", "isColor", "getEmissiveFactor", "setEmissiveFactor", "getEmissiveTexture", "getEmissiveTextureInfo", "setEmissiveTexture", "getNormalScale", "setNormalScale", "scale", "getNormalTexture", "getNormalTextureInfo", "setNormalTexture", "getOcclusionStrength", "setOcclusionStrength", "strength", "getOcclusionTexture", "getOcclusionTextureInfo", "setOcclusionTexture", "getRoughnessFactor", "setRoughnessFactor", "getMetallicFactor", "setMetallicFactor", "getMetallicRoughnessTexture", "getMetallicRoughnessTextureInfo", "setMetallicRoughnessTexture", "MASK", "BLEND", "Mesh", "MESH", "weights", "primitives", "addPrimitive", "primitive", "removePrimitive", "getWeights", "setWeights", "Node", "translation", "rotation", "camera", "skin", "children", "getTranslation", "getScale", "setTranslation", "setRotation", "setScale", "getMatrix", "setMatrix", "matrix", "getWorldTranslation", "getWorldRotation", "getWorldScale", "s", "ancestors", "getParentNode", "ancestor", "multiply", "addChild", "child", "parentNode", "removeChild", "SCENE", "setMesh", "getCamera", "setCamera", "getSkin", "setSkin", "fn", "Primitive", "PRIMITIVE", "mode", "Mode", "TRIANGLES", "material", "attributes", "targets", "setIndices", "ELEMENT_ARRAY_BUFFER", "semantic", "setAttribute", "accessor", "ARRAY_BUFFER", "listAttributes", "listSemantics", "listRefMapKeys", "getMaterial", "setMaterial", "getMode", "setMode", "listTargets", "addTarget", "removeTarget", "POINTS", "LINES", "LINE_LOOP", "LINE_STRIP", "TRIANGLE_STRIP", "TRIANGLE_FAN", "PrimitiveTarget", "PRIMITIVE_TARGET", "Scene", "Skin", "SKIN", "skeleton", "inverseBindMatrices", "joints", "getSkeleton", "setSkeleton", "getInverseBindMatrices", "setInverseBindMatrices", "INVERSE_BIND_MATRICES", "addJoint", "joint", "removeJoint", "listJoints", "Texture", "TEXTURE", "image", "setMimeType", "getImage", "setImage", "Root", "ROOT", "asset", "generator", "version", "defaultScene", "accessors", "animations", "buffers", "cameras", "materials", "meshes", "nodes", "scenes", "skins", "textures", "_extensions", "addEventListener", "event", "_addChildOfRoot", "_extends", "setDefaultScene", "getDefaultScene", "extensionName", "otherExtension", "getAsset", "listExtensionsUsed", "listExtensionsRequired", "filter", "isRequired", "_enableExtension", "_disableExtension", "delete", "listScenes", "listNodes", "listCameras", "listSkins", "listMeshes", "listMaterials", "listTextures", "listAnimations", "listAccessors", "listBuffers", "Document", "fromGraph", "_GRAPH_DOCUMENTS", "_graph", "Graph", "_root", "_logger", "getRoot", "getLogger", "setLogger", "logger", "merge", "_other", "transform", "transforms", "map", "createExtension", "prevExtension", "find", "ext", "createScene", "createNode", "createCamera", "createSkin", "createMesh", "createPrimitive", "createPrimitiveTarget", "createMaterial", "createTexture", "createAnimation", "createAnimationChannel", "createAnimationSampler", "createAccessor", "createBuffer", "WeakMap", "Extension", "document", "prereadTypes", "prewriteTypes", "readDependencies", "writeDependencies", "required", "properties", "_listener", "_event", "_addExtensionProperty", "_removeExtensionProperty", "removeEventListener", "property", "register", "setRequired", "listProperties", "install", "dependency", "preread", "_readerContext", "_propertyType", "prewrite", "_writerContext", "ReaderContext", "jsonDoc", "bufferViews", "bufferViewBuffers", "textureInfos", "Map", "setTextureInfo", "textureInfo", "textureInfoDef", "textureDef", "json", "samplerDef", "DEFAULT_OPTIONS", "dependencies", "SUPPORTED_PREREAD_TYPES", "GLTFReader", "read", "_options", "options", "validate", "context", "assetDef", "copyright", "extensionsUsed", "extensionsRequired", "sort", "unsupportedHooks", "bufferDefs", "forEach", "bufferDef", "bufferViewDefs", "bufferViewDef", "resource", "resources", "accessorDefs", "accessorDef", "bufferView", "getAccessorArray", "imageDefs", "images", "textureDefs", "imageDef", "bufferData", "imageData", "materialDefs", "materialDef", "pbrDef", "pbrMetallicRoughness", "meshDefs", "meshDef", "primitiveDefs", "primitiveDef", "entries", "targetNames", "targetDefs", "targetDef", "targetIndex", "targetName", "accessorIndex", "cameraDefs", "cameraDef", "perspectiveDef", "perspective", "orthoDef", "orthographic", "nodeDefs", "nodeDef", "skinDefs", "skinDef", "nodeIndex", "childIndex", "animationDefs", "animationDef", "animation", "samplerDefs", "channelDef", "sceneDefs", "sceneDef", "scene", "hasSparseValues", "isZeroFilled", "getSparseArray", "getInterleavedArray", "TypedArray", "componentSize", "accessorByteOffset", "byteStride", "getFloat32", "getInt16", "getInt8", "elementStride", "sparseDef", "indicesDef", "valuesDef", "BufferViewTarget", "WriterContext", "_doc", "accessorIndexMap", "animationIndexMap", "bufferIndexMap", "cameraIndexMap", "skinIndexMap", "materialIndexMap", "meshIndexMap", "nodeIndexMap", "imageIndexMap", "textureDefIndexMap", "textureInfoDefMap", "samplerDefIndexMap", "sceneIndexMap", "imageBufferViews", "otherBufferViews", "otherBufferViewsIndexMap", "extensionData", "bufferURIGenerator", "imageURIGenerator", "_accessorUsageMap", "accessorUsageGroupedByParent", "accessorParents", "root", "numBuffers", "numImages", "UniqueURIGenerator", "getSlot", "createTextureInfoDef", "samplerKey", "textureKey", "createPropertyDef", "def", "createAccessorDef", "needsBounds", "listParentEdges", "some", "edge", "fround", "createImageData", "format", "GLB", "createURI", "getAccessorUsage", "cachedUsage", "SPARSE", "getParent", "addAccessorToUsageGroup", "prevUsage", "USAGE_TO_TARGET", "multiple", "counter", "object", "replace", "SUPPORTED_PREWRITE_TYPES", "GLTFWriter", "write", "doc", "extensionsRegistered", "concatAccessors", "bufferIndex", "bufferByteOffset", "bufferViewTarget", "accessorArray", "bufferViewData", "interleaveAccessors", "vertexCount", "vertexByteOffset", "viewByteOffset", "setFloat32", "setInt8", "setInt16", "setUint8", "setUint16", "setUint32", "concatSparseAccessors", "sparseData", "maxIndex", "needSparseWarning", "el", "fill", "ValueArray", "IndexArray", "IndexComponentType", "indicesBufferViewDef", "indicesByteOffset", "indicesBufferViewIndex", "valuesBufferViewDef", "valuesByteOffset", "valuesBufferViewIndex", "textureIndex", "groupByParent", "hasBinaryResources", "size", "uniqueParents", "parentToIndex", "accessorGroups", "_key", "bufferByteLength", "groupAccessors", "vertexLayout", "INTERLEAVED", "imagePadding", "samplerIndexMap", "samplerIndex", "clean", "unused", "ChunkType", "PlatformIO", "_dependencies", "_vertexLayout", "lastReadBytes", "lastWriteBytes", "registerExtensions", "registerDependencies", "setVertexLayout", "layout", "readJSON", "readAsJSON", "readURI", "isGLB", "_binaryToJSON", "_readResourcesExternal", "_readResourcesInternal", "_copyJSON", "binaryToJSON", "glb", "isExternalBuffer", "isExternalImage", "readBinary", "writeJSON", "GLTF", "writeBinary", "header", "jsonText", "jsonChunkData", "jsonChunkHeader", "jsonChunk", "binBuffer", "binChunkData", "binChunkHeader", "binChunk", "_this", "pendingResources", "Promise", "all", "resolveResource", "resourceUUID", "jsonByteOffset", "jsonByteLength", "binByteOffset", "BIN", "binByteLength", "jsonDocument", "NodeIO", "_fetch", "_fetchConfig", "_init", "_fetchEnabled", "then", "fs", "_fs", "promises", "_path", "setAllowNetwork", "allow", "response", "arrayBuffer", "readFile", "decodeURIComponent", "_writeGLB", "_writeGLTF", "dir", "jsonContent", "writeFile", "batch", "listBatches", "resourceURI", "resourcePath", "mkdir", "recursive", "batchSize", "batches", "DenoIO", "Deno", "readTextFile", "WebIO", "fetchConfig", "fetch"]
}
